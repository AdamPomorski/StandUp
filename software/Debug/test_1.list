
test_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005090  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005150  08005150  00015150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051e8  080051e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051f0  080051f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051f0  080051f0  000151f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051f4  080051f4  000151f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080051f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db4  2000000c  08005204  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000dc0  08005204  00020dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ac5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000270d  00000000  00000000  00031af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  00034208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00035168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f92  00000000  00000000  00035fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d3c  00000000  00000000  00049f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007638b  00000000  00000000  0005cc8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3019  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003794  00000000  00000000  000d306c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005138 	.word	0x08005138

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005138 	.word	0x08005138

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4647      	mov	r7, r8
 8000276:	b580      	push	{r7, lr}
 8000278:	0007      	movs	r7, r0
 800027a:	4699      	mov	r9, r3
 800027c:	0c3b      	lsrs	r3, r7, #16
 800027e:	469c      	mov	ip, r3
 8000280:	0413      	lsls	r3, r2, #16
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0400      	lsls	r0, r0, #16
 800028c:	0c14      	lsrs	r4, r2, #16
 800028e:	0c00      	lsrs	r0, r0, #16
 8000290:	4345      	muls	r5, r0
 8000292:	434b      	muls	r3, r1
 8000294:	4360      	muls	r0, r4
 8000296:	4361      	muls	r1, r4
 8000298:	18c0      	adds	r0, r0, r3
 800029a:	0c2c      	lsrs	r4, r5, #16
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4372      	muls	r2, r6
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	4463      	add	r3, ip
 80002b6:	042d      	lsls	r5, r5, #16
 80002b8:	0c2d      	lsrs	r5, r5, #16
 80002ba:	18c9      	adds	r1, r1, r3
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	1889      	adds	r1, r1, r2
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	469b      	mov	fp, r3
 8000302:	d433      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000304:	465a      	mov	r2, fp
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83a      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e078      	b.n	8000410 <__udivmoddi4+0x144>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e075      	b.n	8000416 <__udivmoddi4+0x14a>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e028      	b.n	8000396 <__udivmoddi4+0xca>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	2320      	movs	r3, #32
 8000370:	1a9b      	subs	r3, r3, r2
 8000372:	4652      	mov	r2, sl
 8000374:	40da      	lsrs	r2, r3
 8000376:	4641      	mov	r1, r8
 8000378:	0013      	movs	r3, r2
 800037a:	464a      	mov	r2, r9
 800037c:	408a      	lsls	r2, r1
 800037e:	0017      	movs	r7, r2
 8000380:	4642      	mov	r2, r8
 8000382:	431f      	orrs	r7, r3
 8000384:	4653      	mov	r3, sl
 8000386:	4093      	lsls	r3, r2
 8000388:	001e      	movs	r6, r3
 800038a:	42af      	cmp	r7, r5
 800038c:	d9c4      	bls.n	8000318 <__udivmoddi4+0x4c>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	4643      	mov	r3, r8
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0d9      	beq.n	8000350 <__udivmoddi4+0x84>
 800039c:	07fb      	lsls	r3, r7, #31
 800039e:	0872      	lsrs	r2, r6, #1
 80003a0:	431a      	orrs	r2, r3
 80003a2:	4646      	mov	r6, r8
 80003a4:	087b      	lsrs	r3, r7, #1
 80003a6:	e00e      	b.n	80003c6 <__udivmoddi4+0xfa>
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	d101      	bne.n	80003b0 <__udivmoddi4+0xe4>
 80003ac:	42a2      	cmp	r2, r4
 80003ae:	d80c      	bhi.n	80003ca <__udivmoddi4+0xfe>
 80003b0:	1aa4      	subs	r4, r4, r2
 80003b2:	419d      	sbcs	r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	1924      	adds	r4, r4, r4
 80003b8:	416d      	adcs	r5, r5
 80003ba:	2100      	movs	r1, #0
 80003bc:	3e01      	subs	r6, #1
 80003be:	1824      	adds	r4, r4, r0
 80003c0:	414d      	adcs	r5, r1
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d006      	beq.n	80003d4 <__udivmoddi4+0x108>
 80003c6:	42ab      	cmp	r3, r5
 80003c8:	d9ee      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80003ca:	3e01      	subs	r6, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2e00      	cmp	r6, #0
 80003d2:	d1f8      	bne.n	80003c6 <__udivmoddi4+0xfa>
 80003d4:	9800      	ldr	r0, [sp, #0]
 80003d6:	9901      	ldr	r1, [sp, #4]
 80003d8:	465b      	mov	r3, fp
 80003da:	1900      	adds	r0, r0, r4
 80003dc:	4169      	adcs	r1, r5
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db24      	blt.n	800042c <__udivmoddi4+0x160>
 80003e2:	002b      	movs	r3, r5
 80003e4:	465a      	mov	r2, fp
 80003e6:	4644      	mov	r4, r8
 80003e8:	40d3      	lsrs	r3, r2
 80003ea:	002a      	movs	r2, r5
 80003ec:	40e2      	lsrs	r2, r4
 80003ee:	001c      	movs	r4, r3
 80003f0:	465b      	mov	r3, fp
 80003f2:	0015      	movs	r5, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db2a      	blt.n	800044e <__udivmoddi4+0x182>
 80003f8:	0026      	movs	r6, r4
 80003fa:	409e      	lsls	r6, r3
 80003fc:	0033      	movs	r3, r6
 80003fe:	0026      	movs	r6, r4
 8000400:	4647      	mov	r7, r8
 8000402:	40be      	lsls	r6, r7
 8000404:	0032      	movs	r2, r6
 8000406:	1a80      	subs	r0, r0, r2
 8000408:	4199      	sbcs	r1, r3
 800040a:	9000      	str	r0, [sp, #0]
 800040c:	9101      	str	r1, [sp, #4]
 800040e:	e79f      	b.n	8000350 <__udivmoddi4+0x84>
 8000410:	42a3      	cmp	r3, r4
 8000412:	d8bc      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000414:	e783      	b.n	800031e <__udivmoddi4+0x52>
 8000416:	4642      	mov	r2, r8
 8000418:	2320      	movs	r3, #32
 800041a:	2100      	movs	r1, #0
 800041c:	1a9b      	subs	r3, r3, r2
 800041e:	2200      	movs	r2, #0
 8000420:	9100      	str	r1, [sp, #0]
 8000422:	9201      	str	r2, [sp, #4]
 8000424:	2201      	movs	r2, #1
 8000426:	40da      	lsrs	r2, r3
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	e786      	b.n	800033a <__udivmoddi4+0x6e>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	4646      	mov	r6, r8
 8000436:	409a      	lsls	r2, r3
 8000438:	0023      	movs	r3, r4
 800043a:	40f3      	lsrs	r3, r6
 800043c:	4644      	mov	r4, r8
 800043e:	4313      	orrs	r3, r2
 8000440:	002a      	movs	r2, r5
 8000442:	40e2      	lsrs	r2, r4
 8000444:	001c      	movs	r4, r3
 8000446:	465b      	mov	r3, fp
 8000448:	0015      	movs	r5, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	dad4      	bge.n	80003f8 <__udivmoddi4+0x12c>
 800044e:	4642      	mov	r2, r8
 8000450:	002f      	movs	r7, r5
 8000452:	2320      	movs	r3, #32
 8000454:	0026      	movs	r6, r4
 8000456:	4097      	lsls	r7, r2
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	40de      	lsrs	r6, r3
 800045c:	003b      	movs	r3, r7
 800045e:	4333      	orrs	r3, r6
 8000460:	e7cd      	b.n	80003fe <__udivmoddi4+0x132>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <bma280_read>:
extern uint8_t data[10];

//-----------------------------------------------------
//	BASIC BMA280 READ
//-----------------------------------------------------
char bma280_read(char reg){
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b087      	sub	sp, #28
 80004bc:	af02      	add	r7, sp, #8
 80004be:	0002      	movs	r2, r0
 80004c0:	1dfb      	adds	r3, r7, #7
 80004c2:	701a      	strb	r2, [r3, #0]

	uint8_t data2 = 0;
 80004c4:	240f      	movs	r4, #15
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA,NSS_Pin , GPIO_PIN_RESET);
 80004cc:	23a0      	movs	r3, #160	; 0xa0
 80004ce:	05db      	lsls	r3, r3, #23
 80004d0:	2200      	movs	r2, #0
 80004d2:	2110      	movs	r1, #16
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 f987 	bl	80017e8 <HAL_GPIO_WritePin>
	//SPI_slave_ON(1);
	//SPI_TXBUF = reg | 0x80;
	buftx[0] = reg | 0x80;
 80004da:	1dfb      	adds	r3, r7, #7
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2280      	movs	r2, #128	; 0x80
 80004e0:	4252      	negs	r2, r2
 80004e2:	4313      	orrs	r3, r2
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <bma280_read+0x68>)
 80004e8:	701a      	strb	r2, [r3, #0]
	//SPI_TXBUF = reg | 0x80;
    HAL_SPI_TransmitReceive(&hspi1, buftx, bufrx, 2, 1000);
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <bma280_read+0x6c>)
 80004ec:	490c      	ldr	r1, [pc, #48]	; (8000520 <bma280_read+0x68>)
 80004ee:	480e      	ldr	r0, [pc, #56]	; (8000528 <bma280_read+0x70>)
 80004f0:	23fa      	movs	r3, #250	; 0xfa
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	2302      	movs	r3, #2
 80004f8:	f002 fdd9 	bl	80030ae <HAL_SPI_TransmitReceive>
    data2 = bufrx[1];
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	4a09      	ldr	r2, [pc, #36]	; (8000524 <bma280_read+0x6c>)
 8000500:	7852      	ldrb	r2, [r2, #1]
 8000502:	701a      	strb	r2, [r3, #0]
	//SPI_slave_OFF(1);
    HAL_GPIO_WritePin(GPIOA,NSS_Pin , GPIO_PIN_SET);
 8000504:	23a0      	movs	r3, #160	; 0xa0
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	2201      	movs	r2, #1
 800050a:	2110      	movs	r1, #16
 800050c:	0018      	movs	r0, r3
 800050e:	f001 f96b 	bl	80017e8 <HAL_GPIO_WritePin>
	return data2;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	781b      	ldrb	r3, [r3, #0]
}
 8000516:	0018      	movs	r0, r3
 8000518:	46bd      	mov	sp, r7
 800051a:	b005      	add	sp, #20
 800051c:	bd90      	pop	{r4, r7, pc}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	20000028 	.word	0x20000028
 8000524:	20000034 	.word	0x20000034
 8000528:	20000064 	.word	0x20000064

0800052c <bma280_write>:
}

//-----------------------------------------------------
//	BASIC BMA280 WRITE
//-----------------------------------------------------
void bma280_write(char reg, char value){
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	0002      	movs	r2, r0
 8000534:	1dfb      	adds	r3, r7, #7
 8000536:	701a      	strb	r2, [r3, #0]
 8000538:	1dbb      	adds	r3, r7, #6
 800053a:	1c0a      	adds	r2, r1, #0
 800053c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA,NSS_Pin , GPIO_PIN_RESET);
 800053e:	23a0      	movs	r3, #160	; 0xa0
 8000540:	05db      	lsls	r3, r3, #23
 8000542:	2200      	movs	r2, #0
 8000544:	2110      	movs	r1, #16
 8000546:	0018      	movs	r0, r3
 8000548:	f001 f94e 	bl	80017e8 <HAL_GPIO_WritePin>
	//SPI_slave_ON(1);
	buftx[0] = reg & ~0x80;
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	227f      	movs	r2, #127	; 0x7f
 8000552:	4013      	ands	r3, r2
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <bma280_write+0x5c>)
 8000558:	701a      	strb	r2, [r3, #0]
	buftx[1] = value;
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <bma280_write+0x5c>)
 800055c:	1dba      	adds	r2, r7, #6
 800055e:	7812      	ldrb	r2, [r2, #0]
 8000560:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1,buftx,2,1000);
 8000562:	23fa      	movs	r3, #250	; 0xfa
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	4908      	ldr	r1, [pc, #32]	; (8000588 <bma280_write+0x5c>)
 8000568:	4808      	ldr	r0, [pc, #32]	; (800058c <bma280_write+0x60>)
 800056a:	2202      	movs	r2, #2
 800056c:	f002 fc49 	bl	8002e02 <HAL_SPI_Transmit>
	//SPI_slave_OFF(1);
	HAL_GPIO_WritePin(GPIOA,NSS_Pin, GPIO_PIN_SET);
 8000570:	23a0      	movs	r3, #160	; 0xa0
 8000572:	05db      	lsls	r3, r3, #23
 8000574:	2201      	movs	r2, #1
 8000576:	2110      	movs	r1, #16
 8000578:	0018      	movs	r0, r3
 800057a:	f001 f935 	bl	80017e8 <HAL_GPIO_WritePin>
}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	b002      	add	sp, #8
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	20000028 	.word	0x20000028
 800058c:	20000064 	.word	0x20000064

08000590 <bma280_init>:

//-----------------------------------------------------
//	BMA280 INIT
//-----------------------------------------------------
int bma280_init(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
uint8_t bb;

	if(bma280_read(BMA280_ID) == 0xFB){			// ACC chip id check
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff ff8f 	bl	80004b8 <bma280_read>
 800059a:	0003      	movs	r3, r0
 800059c:	2bfb      	cmp	r3, #251	; 0xfb
 800059e:	d143      	bne.n	8000628 <bma280_init+0x98>

		bma280_write(BMA280_SOFTRESET, 0xB6);	// ACC softreset
 80005a0:	21b6      	movs	r1, #182	; 0xb6
 80005a2:	2014      	movs	r0, #20
 80005a4:	f7ff ffc2 	bl	800052c <bma280_write>
		while(bma280_read(BMA280_SOFTRESET) !=0);// ACC softreset complete
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	2014      	movs	r0, #20
 80005ac:	f7ff ff84 	bl	80004b8 <bma280_read>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d1fa      	bne.n	80005aa <bma280_init+0x1a>
		bma280_write(BMA280_RANGE, 0x05);		// ACC range +-4g
 80005b4:	2105      	movs	r1, #5
 80005b6:	200f      	movs	r0, #15
 80005b8:	f7ff ffb8 	bl	800052c <bma280_write>
		bma280_write(BMA280_BW, 0x0F);			// ACC bandwidth 31.25 Hz
 80005bc:	210f      	movs	r1, #15
 80005be:	2010      	movs	r0, #16
 80005c0:	f7ff ffb4 	bl	800052c <bma280_write>
		bma280_write(BMA280_HIGHBW, 0x00);		// ACC filtering & shadowing ON
 80005c4:	2100      	movs	r1, #0
 80005c6:	2013      	movs	r0, #19
 80005c8:	f7ff ffb0 	bl	800052c <bma280_write>
//		bma280_write(BMA280_LPM_SEL, 0x80);		// ACC suspend mode
		//bma280_write(BMA280_LPM_CNF, 0x40);		// ACC Low power mode ON
		bma280_write(BMA280_FIFO_CONF_0, 0x20);	//FIFO config_0
 80005cc:	2120      	movs	r1, #32
 80005ce:	2030      	movs	r0, #48	; 0x30
 80005d0:	f7ff ffac 	bl	800052c <bma280_write>
		bma280_write(BMA280_FIFO_CONF_1, 0x83);	//FIFO config_1
 80005d4:	2183      	movs	r1, #131	; 0x83
 80005d6:	203e      	movs	r0, #62	; 0x3e
 80005d8:	f7ff ffa8 	bl	800052c <bma280_write>

		//interrupts

		//no motion

		bma280_write(BMA280_INT_MAP_2, 0x08);//maping slo/no motion nt on int2
 80005dc:	2108      	movs	r1, #8
 80005de:	201b      	movs	r0, #27
 80005e0:	f7ff ffa4 	bl	800052c <bma280_write>
		bma280_write(BMA280_INT_EN_2, 0x0F);//enable no motion
 80005e4:	210f      	movs	r1, #15
 80005e6:	2018      	movs	r0, #24
 80005e8:	f7ff ffa0 	bl	800052c <bma280_write>
		bma280_write(BMA280_INT_SRC,0x08);//unfiltered data
 80005ec:	2108      	movs	r1, #8
 80005ee:	201e      	movs	r0, #30
 80005f0:	f7ff ff9c 	bl	800052c <bma280_write>
		bma280_write(BMA280_INT_LATCH,0x09);//250 micro
 80005f4:	2109      	movs	r1, #9
 80005f6:	2021      	movs	r0, #33	; 0x21
 80005f8:	f7ff ff98 	bl	800052c <bma280_write>
		bma280_write(BMA280_INT_5, 0x14);//5s delay
 80005fc:	2114      	movs	r1, #20
 80005fe:	2027      	movs	r0, #39	; 0x27
 8000600:	f7ff ff94 	bl	800052c <bma280_write>
		; //latched


		//any motion
				bma280_write(BMA280_INT_MAP_0, 0x04);/// maping int_slope to int1 port
 8000604:	2104      	movs	r1, #4
 8000606:	2019      	movs	r0, #25
 8000608:	f7ff ff90 	bl	800052c <bma280_write>
				bma280_write(BMA280_INT_SRC,0x04);//unfiltered data
 800060c:	2104      	movs	r1, #4
 800060e:	201e      	movs	r0, #30
 8000610:	f7ff ff8c 	bl	800052c <bma280_write>
				//bma280_write(BMA280_INT_LATCH,0x0F);//latched

				bma280_write(BMA280_INT_EN_0, 0x07); //enabling any-motion detection for all axis
 8000614:	2107      	movs	r1, #7
 8000616:	2016      	movs	r0, #22
 8000618:	f7ff ff88 	bl	800052c <bma280_write>
				bma280_write(BMA280_INT_6, 0x0F); // threshhold of slope in any motion
 800061c:	210f      	movs	r1, #15
 800061e:	2028      	movs	r0, #40	; 0x28
 8000620:	f7ff ff84 	bl	800052c <bma280_write>
				//bma280_write(BMA280_INT_5, 0x03);// In order to suppress false triggers, the
												 //interrupt is only generated (cleared) if a certain number N of consecutive slope data points is
												 //larger (smaller) than the slope threshold given by (0x28) slope_th.  It is N = (0x27) slope_dur + 1 for (0x27).


		return 1;	// Init complete
 8000624:	2301      	movs	r3, #1
 8000626:	e000      	b.n	800062a <bma280_init+0x9a>
	}else{
		return 0;	// ACC ID incorrect
 8000628:	2300      	movs	r3, #0
	}
}
 800062a:	0018      	movs	r0, r3
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000636:	f000 fd93 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f88d 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 fa85 	bl	8000b4c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000642:	f000 f971 	bl	8000928 <MX_SPI1_Init>
  MX_RTC_Init();
 8000646:	f000 f90b 	bl	8000860 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800064a:	f000 fa4f 	bl	8000aec <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800064e:	f000 f9a3 	bl	8000998 <MX_TIM2_Init>
  MX_TIM21_Init();
 8000652:	f000 f9f5 	bl	8000a40 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */
 // HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
// HAL_Delay(5000);
// HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 bma280_init();
 8000656:	f7ff ff9b 	bl	8000590 <bma280_init>
 HAL_RTC_Init(&hrtc);
 800065a:	4b39      	ldr	r3, [pc, #228]	; (8000740 <main+0x110>)
 800065c:	0018      	movs	r0, r3
 800065e:	f001 ffeb 	bl	8002638 <HAL_RTC_Init>
 HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	201c      	movs	r0, #28
 8000668:	f000 fe96 	bl	8001398 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(USART2_IRQn);
 800066c:	201c      	movs	r0, #28
 800066e:	f000 fea8 	bl	80013c2 <HAL_NVIC_EnableIRQ>
//	  HAL_UART_Transmit(&huart2, test, 7, 1000);
//	  }
	 //bma280_read_accl();
//	  HAL_UART_Transmit(&huart2, uart_buf,3, 1000);
//	  HAL_Delay(1000);
	  if(events_counter==2)
 8000672:	4b34      	ldr	r3, [pc, #208]	; (8000744 <main+0x114>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b02      	cmp	r3, #2
 8000678:	d1fb      	bne.n	8000672 <main+0x42>
	  {
		  for(int i=0;i<=events_counter;i++){
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	e055      	b.n	800072c <main+0xfc>
			  itoa(memtime_to_save[i].Hours,txt,10);
 8000680:	4931      	ldr	r1, [pc, #196]	; (8000748 <main+0x118>)
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	0013      	movs	r3, r2
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	189b      	adds	r3, r3, r2
 800068a:	5c5b      	ldrb	r3, [r3, r1]
 800068c:	0018      	movs	r0, r3
 800068e:	4b2f      	ldr	r3, [pc, #188]	; (800074c <main+0x11c>)
 8000690:	220a      	movs	r2, #10
 8000692:	0019      	movs	r1, r3
 8000694:	f004 fd04 	bl	80050a0 <itoa>
			  HAL_UART_Transmit(&huart2, txt,strlen(txt), 1000);
 8000698:	4b2c      	ldr	r3, [pc, #176]	; (800074c <main+0x11c>)
 800069a:	0018      	movs	r0, r3
 800069c:	f7ff fd34 	bl	8000108 <strlen>
 80006a0:	0003      	movs	r3, r0
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	23fa      	movs	r3, #250	; 0xfa
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4928      	ldr	r1, [pc, #160]	; (800074c <main+0x11c>)
 80006aa:	4829      	ldr	r0, [pc, #164]	; (8000750 <main+0x120>)
 80006ac:	f003 fc68 	bl	8003f80 <HAL_UART_Transmit>
			  itoa(memtime_to_save[i].Minutes,txt,10);
 80006b0:	4925      	ldr	r1, [pc, #148]	; (8000748 <main+0x118>)
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	0013      	movs	r3, r2
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	189b      	adds	r3, r3, r2
 80006ba:	18cb      	adds	r3, r1, r3
 80006bc:	3301      	adds	r3, #1
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	0018      	movs	r0, r3
 80006c2:	4b22      	ldr	r3, [pc, #136]	; (800074c <main+0x11c>)
 80006c4:	220a      	movs	r2, #10
 80006c6:	0019      	movs	r1, r3
 80006c8:	f004 fcea 	bl	80050a0 <itoa>
			  HAL_UART_Transmit(&huart2, txt,strlen(txt), 1000);
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <main+0x11c>)
 80006ce:	0018      	movs	r0, r3
 80006d0:	f7ff fd1a 	bl	8000108 <strlen>
 80006d4:	0003      	movs	r3, r0
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	23fa      	movs	r3, #250	; 0xfa
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	491b      	ldr	r1, [pc, #108]	; (800074c <main+0x11c>)
 80006de:	481c      	ldr	r0, [pc, #112]	; (8000750 <main+0x120>)
 80006e0:	f003 fc4e 	bl	8003f80 <HAL_UART_Transmit>
			  itoa(memtime_to_save[i].Seconds,txt,10);
 80006e4:	4918      	ldr	r1, [pc, #96]	; (8000748 <main+0x118>)
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	0013      	movs	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	189b      	adds	r3, r3, r2
 80006ee:	18cb      	adds	r3, r1, r3
 80006f0:	3302      	adds	r3, #2
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	0018      	movs	r0, r3
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <main+0x11c>)
 80006f8:	220a      	movs	r2, #10
 80006fa:	0019      	movs	r1, r3
 80006fc:	f004 fcd0 	bl	80050a0 <itoa>
			  HAL_UART_Transmit(&huart2, txt,strlen(txt), 1000);
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <main+0x11c>)
 8000702:	0018      	movs	r0, r3
 8000704:	f7ff fd00 	bl	8000108 <strlen>
 8000708:	0003      	movs	r3, r0
 800070a:	b29a      	uxth	r2, r3
 800070c:	23fa      	movs	r3, #250	; 0xfa
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	490e      	ldr	r1, [pc, #56]	; (800074c <main+0x11c>)
 8000712:	480f      	ldr	r0, [pc, #60]	; (8000750 <main+0x120>)
 8000714:	f003 fc34 	bl	8003f80 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, "\n",strlen("\n"), 1000);
 8000718:	23fa      	movs	r3, #250	; 0xfa
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	490d      	ldr	r1, [pc, #52]	; (8000754 <main+0x124>)
 800071e:	480c      	ldr	r0, [pc, #48]	; (8000750 <main+0x120>)
 8000720:	2201      	movs	r2, #1
 8000722:	f003 fc2d 	bl	8003f80 <HAL_UART_Transmit>
		  for(int i=0;i<=events_counter;i++){
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3301      	adds	r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <main+0x114>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	429a      	cmp	r2, r3
 8000734:	d9a4      	bls.n	8000680 <main+0x50>

		  }
		  events_counter=0;
 8000736:	4b03      	ldr	r3, [pc, #12]	; (8000744 <main+0x114>)
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
	  if(events_counter==2)
 800073c:	e799      	b.n	8000672 <main+0x42>
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	20000040 	.word	0x20000040
 8000744:	20000d90 	.word	0x20000d90
 8000748:	200001d8 	.word	0x200001d8
 800074c:	20000da8 	.word	0x20000da8
 8000750:	2000013c 	.word	0x2000013c
 8000754:	08005150 	.word	0x08005150

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b099      	sub	sp, #100	; 0x64
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	242c      	movs	r4, #44	; 0x2c
 8000760:	193b      	adds	r3, r7, r4
 8000762:	0018      	movs	r0, r3
 8000764:	2334      	movs	r3, #52	; 0x34
 8000766:	001a      	movs	r2, r3
 8000768:	2100      	movs	r1, #0
 800076a:	f004 fc9d 	bl	80050a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076e:	2318      	movs	r3, #24
 8000770:	18fb      	adds	r3, r7, r3
 8000772:	0018      	movs	r0, r3
 8000774:	2314      	movs	r3, #20
 8000776:	001a      	movs	r2, r3
 8000778:	2100      	movs	r1, #0
 800077a:	f004 fc95 	bl	80050a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800077e:	003b      	movs	r3, r7
 8000780:	0018      	movs	r0, r3
 8000782:	2318      	movs	r3, #24
 8000784:	001a      	movs	r2, r3
 8000786:	2100      	movs	r1, #0
 8000788:	f004 fc8e 	bl	80050a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078c:	4b31      	ldr	r3, [pc, #196]	; (8000854 <SystemClock_Config+0xfc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a31      	ldr	r2, [pc, #196]	; (8000858 <SystemClock_Config+0x100>)
 8000792:	401a      	ands	r2, r3
 8000794:	4b2f      	ldr	r3, [pc, #188]	; (8000854 <SystemClock_Config+0xfc>)
 8000796:	2180      	movs	r1, #128	; 0x80
 8000798:	0109      	lsls	r1, r1, #4
 800079a:	430a      	orrs	r2, r1
 800079c:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800079e:	f001 f877 	bl	8001890 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007a2:	4b2e      	ldr	r3, [pc, #184]	; (800085c <SystemClock_Config+0x104>)
 80007a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80007a6:	4b2d      	ldr	r3, [pc, #180]	; (800085c <SystemClock_Config+0x104>)
 80007a8:	492b      	ldr	r1, [pc, #172]	; (8000858 <SystemClock_Config+0x100>)
 80007aa:	400a      	ands	r2, r1
 80007ac:	651a      	str	r2, [r3, #80]	; 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	2206      	movs	r2, #6
 80007b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	0052      	lsls	r2, r2, #1
 80007ba:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007bc:	0021      	movs	r1, r4
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2201      	movs	r2, #1
 80007c2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2210      	movs	r2, #16
 80007c8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2202      	movs	r2, #2
 80007ce:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2200      	movs	r2, #0
 80007d4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2200      	movs	r2, #0
 80007da:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2280      	movs	r2, #128	; 0x80
 80007e0:	0412      	lsls	r2, r2, #16
 80007e2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	0018      	movs	r0, r3
 80007e8:	f001 f860 	bl	80018ac <HAL_RCC_OscConfig>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007f0:	f000 fae4 	bl	8000dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	2118      	movs	r1, #24
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	220f      	movs	r2, #15
 80007fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2203      	movs	r2, #3
 8000800:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	22a0      	movs	r2, #160	; 0xa0
 8000806:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2100      	movs	r1, #0
 8000818:	0018      	movs	r0, r3
 800081a:	f001 fbc3 	bl	8001fa4 <HAL_RCC_ClockConfig>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000822:	f000 facb 	bl	8000dbc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8000826:	003b      	movs	r3, r7
 8000828:	2222      	movs	r2, #34	; 0x22
 800082a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800082c:	003b      	movs	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000832:	003b      	movs	r3, r7
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	0252      	lsls	r2, r2, #9
 8000838:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800083a:	003b      	movs	r3, r7
 800083c:	0018      	movs	r0, r3
 800083e:	f001 fdd5 	bl	80023ec <HAL_RCCEx_PeriphCLKConfig>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000846:	f000 fab9 	bl	8000dbc <Error_Handler>
  }
}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b019      	add	sp, #100	; 0x64
 8000850:	bd90      	pop	{r4, r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40007000 	.word	0x40007000
 8000858:	ffffe7ff 	.word	0xffffe7ff
 800085c:	40021000 	.word	0x40021000

08000860 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	0018      	movs	r0, r3
 800086a:	2314      	movs	r3, #20
 800086c:	001a      	movs	r2, r3
 800086e:	2100      	movs	r1, #0
 8000870:	f004 fc1a 	bl	80050a8 <memset>
  RTC_DateTypeDef sDate = {0};
 8000874:	003b      	movs	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800087a:	4b29      	ldr	r3, [pc, #164]	; (8000920 <MX_RTC_Init+0xc0>)
 800087c:	4a29      	ldr	r2, [pc, #164]	; (8000924 <MX_RTC_Init+0xc4>)
 800087e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000880:	4b27      	ldr	r3, [pc, #156]	; (8000920 <MX_RTC_Init+0xc0>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000886:	4b26      	ldr	r3, [pc, #152]	; (8000920 <MX_RTC_Init+0xc0>)
 8000888:	227f      	movs	r2, #127	; 0x7f
 800088a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800088c:	4b24      	ldr	r3, [pc, #144]	; (8000920 <MX_RTC_Init+0xc0>)
 800088e:	22ff      	movs	r2, #255	; 0xff
 8000890:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000892:	4b23      	ldr	r3, [pc, #140]	; (8000920 <MX_RTC_Init+0xc0>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000898:	4b21      	ldr	r3, [pc, #132]	; (8000920 <MX_RTC_Init+0xc0>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800089e:	4b20      	ldr	r3, [pc, #128]	; (8000920 <MX_RTC_Init+0xc0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008a4:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <MX_RTC_Init+0xc0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008aa:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <MX_RTC_Init+0xc0>)
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 fec3 	bl	8002638 <HAL_RTC_Init>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80008b6:	f000 fa81 	bl	8000dbc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 14;
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	220e      	movs	r2, #14
 80008be:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 52;
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2234      	movs	r2, #52	; 0x34
 80008c4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2200      	movs	r2, #0
 80008ca:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80008d8:	1d39      	adds	r1, r7, #4
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_RTC_Init+0xc0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	0018      	movs	r0, r3
 80008e0:	f001 ff48 	bl	8002774 <HAL_RTC_SetTime>
 80008e4:	1e03      	subs	r3, r0, #0
 80008e6:	d001      	beq.n	80008ec <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80008e8:	f000 fa68 	bl	8000dbc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008ec:	003b      	movs	r3, r7
 80008ee:	2201      	movs	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80008f2:	003b      	movs	r3, r7
 80008f4:	2201      	movs	r2, #1
 80008f6:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80008f8:	003b      	movs	r3, r7
 80008fa:	2201      	movs	r2, #1
 80008fc:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 80008fe:	003b      	movs	r3, r7
 8000900:	2200      	movs	r2, #0
 8000902:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000904:	0039      	movs	r1, r7
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_RTC_Init+0xc0>)
 8000908:	2200      	movs	r2, #0
 800090a:	0018      	movs	r0, r3
 800090c:	f002 f852 	bl	80029b4 <HAL_RTC_SetDate>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000914:	f000 fa52 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	b006      	add	sp, #24
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000040 	.word	0x20000040
 8000924:	40002800 	.word	0x40002800

08000928 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_SPI1_Init+0x68>)
 800092e:	4a19      	ldr	r2, [pc, #100]	; (8000994 <MX_SPI1_Init+0x6c>)
 8000930:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_SPI1_Init+0x68>)
 8000934:	2282      	movs	r2, #130	; 0x82
 8000936:	0052      	lsls	r2, r2, #1
 8000938:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_SPI1_Init+0x68>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <MX_SPI1_Init+0x68>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_SPI1_Init+0x68>)
 8000948:	2202      	movs	r2, #2
 800094a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800094c:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_SPI1_Init+0x68>)
 800094e:	2201      	movs	r2, #1
 8000950:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_SPI1_Init+0x68>)
 8000954:	2280      	movs	r2, #128	; 0x80
 8000956:	0092      	lsls	r2, r2, #2
 8000958:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <MX_SPI1_Init+0x68>)
 800095c:	2210      	movs	r2, #16
 800095e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_SPI1_Init+0x68>)
 8000962:	2200      	movs	r2, #0
 8000964:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_SPI1_Init+0x68>)
 8000968:	2200      	movs	r2, #0
 800096a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_SPI1_Init+0x68>)
 800096e:	2200      	movs	r2, #0
 8000970:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <MX_SPI1_Init+0x68>)
 8000974:	2207      	movs	r2, #7
 8000976:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <MX_SPI1_Init+0x68>)
 800097a:	0018      	movs	r0, r3
 800097c:	f002 f9b8 	bl	8002cf0 <HAL_SPI_Init>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000984:	f000 fa1a 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	20000064 	.word	0x20000064
 8000994:	40013000 	.word	0x40013000

08000998 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099e:	2308      	movs	r3, #8
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	0018      	movs	r0, r3
 80009a4:	2310      	movs	r3, #16
 80009a6:	001a      	movs	r2, r3
 80009a8:	2100      	movs	r1, #0
 80009aa:	f004 fb7d 	bl	80050a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ae:	003b      	movs	r3, r7
 80009b0:	0018      	movs	r0, r3
 80009b2:	2308      	movs	r3, #8
 80009b4:	001a      	movs	r2, r3
 80009b6:	2100      	movs	r1, #0
 80009b8:	f004 fb76 	bl	80050a8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MX_TIM2_Init+0xa0>)
 80009be:	2280      	movs	r2, #128	; 0x80
 80009c0:	05d2      	lsls	r2, r2, #23
 80009c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_TIM2_Init+0xa0>)
 80009c6:	22c8      	movs	r2, #200	; 0xc8
 80009c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <MX_TIM2_Init+0xa0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_TIM2_Init+0xa0>)
 80009d2:	4a1a      	ldr	r2, [pc, #104]	; (8000a3c <MX_TIM2_Init+0xa4>)
 80009d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_TIM2_Init+0xa0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_TIM2_Init+0xa0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_TIM2_Init+0xa0>)
 80009e4:	0018      	movs	r0, r3
 80009e6:	f002 ff0d 	bl	8003804 <HAL_TIM_Base_Init>
 80009ea:	1e03      	subs	r3, r0, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80009ee:	f000 f9e5 	bl	8000dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f2:	2108      	movs	r1, #8
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	0152      	lsls	r2, r2, #5
 80009fa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009fc:	187a      	adds	r2, r7, r1
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_TIM2_Init+0xa0>)
 8000a00:	0011      	movs	r1, r2
 8000a02:	0018      	movs	r0, r3
 8000a04:	f003 f826 	bl	8003a54 <HAL_TIM_ConfigClockSource>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000a0c:	f000 f9d6 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a10:	003b      	movs	r3, r7
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a16:	003b      	movs	r3, r7
 8000a18:	2200      	movs	r2, #0
 8000a1a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a1c:	003a      	movs	r2, r7
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_TIM2_Init+0xa0>)
 8000a20:	0011      	movs	r1, r2
 8000a22:	0018      	movs	r0, r3
 8000a24:	f003 fa00 	bl	8003e28 <HAL_TIMEx_MasterConfigSynchronization>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a2c:	f000 f9c6 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b006      	add	sp, #24
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200000bc 	.word	0x200000bc
 8000a3c:	00002710 	.word	0x00002710

08000a40 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a46:	2308      	movs	r3, #8
 8000a48:	18fb      	adds	r3, r7, r3
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	001a      	movs	r2, r3
 8000a50:	2100      	movs	r1, #0
 8000a52:	f004 fb29 	bl	80050a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a56:	003b      	movs	r3, r7
 8000a58:	0018      	movs	r0, r3
 8000a5a:	2308      	movs	r3, #8
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	2100      	movs	r1, #0
 8000a60:	f004 fb22 	bl	80050a8 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000a64:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <MX_TIM21_Init+0xa0>)
 8000a66:	4a1f      	ldr	r2, [pc, #124]	; (8000ae4 <MX_TIM21_Init+0xa4>)
 8000a68:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 200;
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <MX_TIM21_Init+0xa0>)
 8000a6c:	22c8      	movs	r2, #200	; 0xc8
 8000a6e:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <MX_TIM21_Init+0xa0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 10000;
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_TIM21_Init+0xa0>)
 8000a78:	4a1b      	ldr	r2, [pc, #108]	; (8000ae8 <MX_TIM21_Init+0xa8>)
 8000a7a:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MX_TIM21_Init+0xa0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_TIM21_Init+0xa0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_TIM21_Init+0xa0>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f002 feba 	bl	8003804 <HAL_TIM_Base_Init>
 8000a90:	1e03      	subs	r3, r0, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000a94:	f000 f992 	bl	8000dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a98:	2108      	movs	r1, #8
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2280      	movs	r2, #128	; 0x80
 8000a9e:	0152      	lsls	r2, r2, #5
 8000aa0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000aa2:	187a      	adds	r2, r7, r1
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_TIM21_Init+0xa0>)
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f002 ffd3 	bl	8003a54 <HAL_TIM_ConfigClockSource>
 8000aae:	1e03      	subs	r3, r0, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 8000ab2:	f000 f983 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab6:	003b      	movs	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abc:	003b      	movs	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000ac2:	003a      	movs	r2, r7
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_TIM21_Init+0xa0>)
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f003 f9ad 	bl	8003e28 <HAL_TIMEx_MasterConfigSynchronization>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8000ad2:	f000 f973 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b006      	add	sp, #24
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	200000fc 	.word	0x200000fc
 8000ae4:	40010800 	.word	0x40010800
 8000ae8:	00002710 	.word	0x00002710

08000aec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000af2:	4a15      	ldr	r2, [pc, #84]	; (8000b48 <MX_USART2_UART_Init+0x5c>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000af8:	22e1      	movs	r2, #225	; 0xe1
 8000afa:	0252      	lsls	r2, r2, #9
 8000afc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b30:	0018      	movs	r0, r3
 8000b32:	f003 f9d1 	bl	8003ed8 <HAL_UART_Init>
 8000b36:	1e03      	subs	r3, r0, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b3a:	f000 f93f 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	2000013c 	.word	0x2000013c
 8000b48:	40004400 	.word	0x40004400

08000b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	240c      	movs	r4, #12
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	0018      	movs	r0, r3
 8000b58:	2314      	movs	r3, #20
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	f004 faa3 	bl	80050a8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	4b3a      	ldr	r3, [pc, #232]	; (8000c4c <MX_GPIO_Init+0x100>)
 8000b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b66:	4b39      	ldr	r3, [pc, #228]	; (8000c4c <MX_GPIO_Init+0x100>)
 8000b68:	2104      	movs	r1, #4
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b6e:	4b37      	ldr	r3, [pc, #220]	; (8000c4c <MX_GPIO_Init+0x100>)
 8000b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b72:	2204      	movs	r2, #4
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b34      	ldr	r3, [pc, #208]	; (8000c4c <MX_GPIO_Init+0x100>)
 8000b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b7e:	4b33      	ldr	r3, [pc, #204]	; (8000c4c <MX_GPIO_Init+0x100>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	430a      	orrs	r2, r1
 8000b84:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b86:	4b31      	ldr	r3, [pc, #196]	; (8000c4c <MX_GPIO_Init+0x100>)
 8000b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b2e      	ldr	r3, [pc, #184]	; (8000c4c <MX_GPIO_Init+0x100>)
 8000b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b96:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <MX_GPIO_Init+0x100>)
 8000b98:	2102      	movs	r1, #2
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b9e:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <MX_GPIO_Init+0x100>)
 8000ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000baa:	23a0      	movs	r3, #160	; 0xa0
 8000bac:	05db      	lsls	r3, r3, #23
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2110      	movs	r1, #16
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f000 fe18 	bl	80017e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000bb8:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <MX_GPIO_Init+0x104>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2103      	movs	r1, #3
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 fe12 	bl	80017e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT2_Pin INT1_Pin */
  GPIO_InitStruct.Pin = INT2_Pin|INT1_Pin;
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	2288      	movs	r2, #136	; 0x88
 8000bce:	0352      	lsls	r2, r2, #13
 8000bd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	193a      	adds	r2, r7, r4
 8000bda:	23a0      	movs	r3, #160	; 0xa0
 8000bdc:	05db      	lsls	r3, r3, #23
 8000bde:	0011      	movs	r1, r2
 8000be0:	0018      	movs	r0, r3
 8000be2:	f000 fc93 	bl	800150c <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	2210      	movs	r2, #16
 8000bea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	2201      	movs	r2, #1
 8000bf0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	193b      	adds	r3, r7, r4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	193a      	adds	r2, r7, r4
 8000c00:	23a0      	movs	r3, #160	; 0xa0
 8000c02:	05db      	lsls	r3, r3, #23
 8000c04:	0011      	movs	r1, r2
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 fc80 	bl	800150c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000c0c:	0021      	movs	r1, r4
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2203      	movs	r2, #3
 8000c12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	2201      	movs	r2, #1
 8000c18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <MX_GPIO_Init+0x104>)
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	0010      	movs	r0, r2
 8000c2e:	f000 fc6d 	bl	800150c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	2006      	movs	r0, #6
 8000c38:	f000 fbae 	bl	8001398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000c3c:	2006      	movs	r0, #6
 8000c3e:	f000 fbc0 	bl	80013c2 <HAL_NVIC_EnableIRQ>

}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b009      	add	sp, #36	; 0x24
 8000c48:	bd90      	pop	{r4, r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	50000400 	.word	0x50000400

08000c54 <HAL_GPIO_EXTI_Callback>:
//
//}
//interrupt handler

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	0002      	movs	r2, r0
 8000c5c:	1dbb      	adds	r3, r7, #6
 8000c5e:	801a      	strh	r2, [r3, #0]


	if(GPIO_Pin == INT1_Pin)
 8000c60:	1dbb      	adds	r3, r7, #6
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	2b08      	cmp	r3, #8
 8000c66:	d137      	bne.n	8000cd8 <HAL_GPIO_EXTI_Callback+0x84>
	{
		HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 8000c68:	4b4a      	ldr	r3, [pc, #296]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x140>)
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f000 fdd8 	bl	8001822 <HAL_GPIO_TogglePin>

					//motion_events++;
					if(flag_stop==1){
 8000c72:	4b49      	ldr	r3, [pc, #292]	; (8000d98 <HAL_GPIO_EXTI_Callback+0x144>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d12b      	bne.n	8000cd2 <HAL_GPIO_EXTI_Callback+0x7e>

						flag_stop=0;
 8000c7a:	4b47      	ldr	r3, [pc, #284]	; (8000d98 <HAL_GPIO_EXTI_Callback+0x144>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
					HAL_RTC_GetTime(&hrtc, &sTime1, RTC_FORMAT_BIN);
 8000c80:	4946      	ldr	r1, [pc, #280]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x148>)
 8000c82:	4b47      	ldr	r3, [pc, #284]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	0018      	movs	r0, r3
 8000c88:	f001 fe38 	bl	80028fc <HAL_RTC_GetTime>
					HAL_RTC_GetDate(&hrtc, &sDate1, RTC_FORMAT_BIN);
 8000c8c:	4945      	ldr	r1, [pc, #276]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x150>)
 8000c8e:	4b44      	ldr	r3, [pc, #272]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	0018      	movs	r0, r3
 8000c94:	f001 ff3c 	bl	8002b10 <HAL_RTC_GetDate>
					HAL_RTC_GetState(&hrtc);
 8000c98:	4b41      	ldr	r3, [pc, #260]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f001 ffad 	bl	8002bfa <HAL_RTC_GetState>


					seconds_counter_motion = (sTime1.Hours * 3600) + (sTime1.Minutes * 60) + (sTime1.Seconds);
 8000ca0:	4b3e      	ldr	r3, [pc, #248]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x148>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	0013      	movs	r3, r2
 8000ca8:	011b      	lsls	r3, r3, #4
 8000caa:	1a9b      	subs	r3, r3, r2
 8000cac:	011a      	lsls	r2, r3, #4
 8000cae:	1ad2      	subs	r2, r2, r3
 8000cb0:	0113      	lsls	r3, r2, #4
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	0011      	movs	r1, r2
 8000cb6:	4b39      	ldr	r3, [pc, #228]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x148>)
 8000cb8:	785b      	ldrb	r3, [r3, #1]
 8000cba:	001a      	movs	r2, r3
 8000cbc:	0013      	movs	r3, r2
 8000cbe:	011b      	lsls	r3, r3, #4
 8000cc0:	1a9b      	subs	r3, r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	18cb      	adds	r3, r1, r3
 8000cc6:	4a35      	ldr	r2, [pc, #212]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x148>)
 8000cc8:	7892      	ldrb	r2, [r2, #2]
 8000cca:	189b      	adds	r3, r3, r2
 8000ccc:	001a      	movs	r2, r3
 8000cce:	4b36      	ldr	r3, [pc, #216]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x154>)
 8000cd0:	601a      	str	r2, [r3, #0]
				    //events_counter++;
					}
					sitting_counter=0;
 8000cd2:	4b36      	ldr	r3, [pc, #216]	; (8000dac <HAL_GPIO_EXTI_Callback+0x158>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]

	}
	if(GPIO_Pin == INT2_Pin)
 8000cd8:	1dbb      	adds	r3, r7, #6
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	d155      	bne.n	8000d8c <HAL_GPIO_EXTI_Callback+0x138>
	{
		HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000ce0:	4b2c      	ldr	r3, [pc, #176]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x140>)
 8000ce2:	2102      	movs	r1, #2
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f000 fd9c 	bl	8001822 <HAL_GPIO_TogglePin>
		HAL_RTC_GetTime(&hrtc, &sTime1, RTC_FORMAT_BIN);
 8000cea:	492c      	ldr	r1, [pc, #176]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x148>)
 8000cec:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f001 fe03 	bl	80028fc <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate1, RTC_FORMAT_BIN);
 8000cf6:	492b      	ldr	r1, [pc, #172]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x150>)
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f001 ff07 	bl	8002b10 <HAL_RTC_GetDate>
		HAL_RTC_GetState(&hrtc);
 8000d02:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000d04:	0018      	movs	r0, r3
 8000d06:	f001 ff78 	bl	8002bfa <HAL_RTC_GetState>
//		sitting_counter=sitting_counter - DELAY_TIME;
		seconds_counter_stop = (sTime1.Hours * 3600) + (sTime1.Minutes * 60) + (sTime1.Seconds);
 8000d0a:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x148>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	001a      	movs	r2, r3
 8000d10:	0013      	movs	r3, r2
 8000d12:	011b      	lsls	r3, r3, #4
 8000d14:	1a9b      	subs	r3, r3, r2
 8000d16:	011a      	lsls	r2, r3, #4
 8000d18:	1ad2      	subs	r2, r2, r3
 8000d1a:	0113      	lsls	r3, r2, #4
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	0011      	movs	r1, r2
 8000d20:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x148>)
 8000d22:	785b      	ldrb	r3, [r3, #1]
 8000d24:	001a      	movs	r2, r3
 8000d26:	0013      	movs	r3, r2
 8000d28:	011b      	lsls	r3, r3, #4
 8000d2a:	1a9b      	subs	r3, r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	18cb      	adds	r3, r1, r3
 8000d30:	4a1a      	ldr	r2, [pc, #104]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x148>)
 8000d32:	7892      	ldrb	r2, [r2, #2]
 8000d34:	189b      	adds	r3, r3, r2
 8000d36:	001a      	movs	r2, r3
 8000d38:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000d3a:	601a      	str	r2, [r3, #0]
		seconds_counter_substract = seconds_counter_stop - seconds_counter_motion;
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x154>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	1ad2      	subs	r2, r2, r3
 8000d46:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x160>)
 8000d48:	601a      	str	r2, [r3, #0]
		if(seconds_counter_substract>DELAY_TIME)
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x160>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	d919      	bls.n	8000d86 <HAL_GPIO_EXTI_Callback+0x132>
		{
		sitting_counter=sitting_counter - DELAY_TIME;
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <HAL_GPIO_EXTI_Callback+0x158>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	1f5a      	subs	r2, r3, #5
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_GPIO_EXTI_Callback+0x158>)
 8000d5a:	601a      	str	r2, [r3, #0]
	    convert_seconds_to_struct(seconds_counter_motion);
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x154>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	0018      	movs	r0, r3
 8000d62:	f000 f831 	bl	8000dc8 <convert_seconds_to_struct>
		events_counter++;
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x164>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x164>)
 8000d6e:	601a      	str	r2, [r3, #0]
//		flag_stop=1;
	convert_seconds_to_struct(seconds_counter_stop-DELAY_TIME);
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3b05      	subs	r3, #5
 8000d76:	0018      	movs	r0, r3
 8000d78:	f000 f826 	bl	8000dc8 <convert_seconds_to_struct>
		events_counter++;
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x164>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	1c5a      	adds	r2, r3, #1
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x164>)
 8000d84:	601a      	str	r2, [r3, #0]


		}
		flag_stop=1;
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <HAL_GPIO_EXTI_Callback+0x144>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	701a      	strb	r2, [r3, #0]
		//motion_events = 0;

		//bma280_write(BMA280_INT_LATCH,0x80);
	}
}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b002      	add	sp, #8
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	50000400 	.word	0x50000400
 8000d98:	20000da4 	.word	0x20000da4
 8000d9c:	200001c0 	.word	0x200001c0
 8000da0:	20000040 	.word	0x20000040
 8000da4:	200001d4 	.word	0x200001d4
 8000da8:	20000d94 	.word	0x20000d94
 8000dac:	20000da0 	.word	0x20000da0
 8000db0:	20000d98 	.word	0x20000d98
 8000db4:	20000d9c 	.word	0x20000d9c
 8000db8:	20000d90 	.word	0x20000d90

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <Error_Handler+0x8>
	...

08000dc8 <convert_seconds_to_struct>:

extern MemTime memtime_to_save[1000];
extern MemTime memtime_to_equation[1];
extern RTC_TimeTypeDef sTime1;
extern uint32_t events_counter;
void convert_seconds_to_struct(uint32_t seconds_to_struct){
 8000dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	    uint16_t seconds_counter_substract_minutes;
		uint16_t seconds_counter_substract_seconds;

			memtime_to_save[events_counter].Hours= seconds_to_struct/3600;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	22e1      	movs	r2, #225	; 0xe1
 8000dd4:	0111      	lsls	r1, r2, #4
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff f99e 	bl	8000118 <__udivsi3>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	0019      	movs	r1, r3
 8000de0:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <convert_seconds_to_struct+0x9c>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	b2c8      	uxtb	r0, r1
 8000de6:	4920      	ldr	r1, [pc, #128]	; (8000e68 <convert_seconds_to_struct+0xa0>)
 8000de8:	0013      	movs	r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	189b      	adds	r3, r3, r2
 8000dee:	1c02      	adds	r2, r0, #0
 8000df0:	545a      	strb	r2, [r3, r1]
			seconds_counter_substract_minutes = seconds_to_struct % 3600;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	22e1      	movs	r2, #225	; 0xe1
 8000df6:	0111      	lsls	r1, r2, #4
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f7ff fa13 	bl	8000224 <__aeabi_uidivmod>
 8000dfe:	000b      	movs	r3, r1
 8000e00:	001a      	movs	r2, r3
 8000e02:	250e      	movs	r5, #14
 8000e04:	197b      	adds	r3, r7, r5
 8000e06:	801a      	strh	r2, [r3, #0]
			memtime_to_save[events_counter].Minutes = seconds_counter_substract_minutes/60;
 8000e08:	197b      	adds	r3, r7, r5
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	213c      	movs	r1, #60	; 0x3c
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f7ff f982 	bl	8000118 <__udivsi3>
 8000e14:	0003      	movs	r3, r0
 8000e16:	b299      	uxth	r1, r3
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <convert_seconds_to_struct+0x9c>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	b2c8      	uxtb	r0, r1
 8000e1e:	4912      	ldr	r1, [pc, #72]	; (8000e68 <convert_seconds_to_struct+0xa0>)
 8000e20:	0013      	movs	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	189b      	adds	r3, r3, r2
 8000e26:	18cb      	adds	r3, r1, r3
 8000e28:	3301      	adds	r3, #1
 8000e2a:	1c02      	adds	r2, r0, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
			seconds_counter_substract_seconds = seconds_counter_substract_minutes % 60;
 8000e2e:	260c      	movs	r6, #12
 8000e30:	19bc      	adds	r4, r7, r6
 8000e32:	197b      	adds	r3, r7, r5
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	213c      	movs	r1, #60	; 0x3c
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff f9f3 	bl	8000224 <__aeabi_uidivmod>
 8000e3e:	000b      	movs	r3, r1
 8000e40:	8023      	strh	r3, [r4, #0]
			memtime_to_save[events_counter].Seconds = seconds_counter_substract_seconds;
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <convert_seconds_to_struct+0x9c>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	19bb      	adds	r3, r7, r6
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	b2d8      	uxtb	r0, r3
 8000e4c:	4906      	ldr	r1, [pc, #24]	; (8000e68 <convert_seconds_to_struct+0xa0>)
 8000e4e:	0013      	movs	r3, r2
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	189b      	adds	r3, r3, r2
 8000e54:	18cb      	adds	r3, r1, r3
 8000e56:	3302      	adds	r3, #2
 8000e58:	1c02      	adds	r2, r0, #0
 8000e5a:	701a      	strb	r2, [r3, #0]

}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b005      	add	sp, #20
 8000e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e64:	20000d90 	.word	0x20000d90
 8000e68:	200001d8 	.word	0x200001d8

08000e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <HAL_MspInit+0x24>)
 8000e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_MspInit+0x24>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <HAL_MspInit+0x24>)
 8000e7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <HAL_MspInit+0x24>)
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	0549      	lsls	r1, r1, #21
 8000e86:	430a      	orrs	r2, r1
 8000e88:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000

08000e94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <HAL_RTC_MspInit+0x28>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d106      	bne.n	8000eb4 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_RTC_MspInit+0x2c>)
 8000ea8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_RTC_MspInit+0x2c>)
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	02c9      	lsls	r1, r1, #11
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b002      	add	sp, #8
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40002800 	.word	0x40002800
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	240c      	movs	r4, #12
 8000ece:	193b      	adds	r3, r7, r4
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	2314      	movs	r3, #20
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	f004 f8e6 	bl	80050a8 <memset>
  if(hspi->Instance==SPI1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <HAL_SPI_MspInit+0x90>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d131      	bne.n	8000f4a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <HAL_SPI_MspInit+0x94>)
 8000ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_SPI_MspInit+0x94>)
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	0149      	lsls	r1, r1, #5
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <HAL_SPI_MspInit+0x94>)
 8000ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_SPI_MspInit+0x94>)
 8000efa:	2101      	movs	r1, #1
 8000efc:	430a      	orrs	r2, r1
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_SPI_MspInit+0x94>)
 8000f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f04:	2201      	movs	r2, #1
 8000f06:	4013      	ands	r3, r2
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f0c:	0021      	movs	r1, r4
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	22e0      	movs	r2, #224	; 0xe0
 8000f12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2202      	movs	r2, #2
 8000f18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2203      	movs	r2, #3
 8000f24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	187a      	adds	r2, r7, r1
 8000f2e:	23a0      	movs	r3, #160	; 0xa0
 8000f30:	05db      	lsls	r3, r3, #23
 8000f32:	0011      	movs	r1, r2
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 fae9 	bl	800150c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2019      	movs	r0, #25
 8000f40:	f000 fa2a 	bl	8001398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f44:	2019      	movs	r0, #25
 8000f46:	f000 fa3c 	bl	80013c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b009      	add	sp, #36	; 0x24
 8000f50:	bd90      	pop	{r4, r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	40013000 	.word	0x40013000
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	05db      	lsls	r3, r3, #23
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d10e      	bne.n	8000f8e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_TIM_Base_MspInit+0x60>)
 8000f72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_TIM_Base_MspInit+0x60>)
 8000f76:	2101      	movs	r1, #1
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	200f      	movs	r0, #15
 8000f82:	f000 fa09 	bl	8001398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f86:	200f      	movs	r0, #15
 8000f88:	f000 fa1b 	bl	80013c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8000f8c:	e012      	b.n	8000fb4 <HAL_TIM_Base_MspInit+0x58>
  else if(htim_base->Instance==TIM21)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <HAL_TIM_Base_MspInit+0x64>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d10d      	bne.n	8000fb4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_TIM_Base_MspInit+0x60>)
 8000f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <HAL_TIM_Base_MspInit+0x60>)
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2014      	movs	r0, #20
 8000faa:	f000 f9f5 	bl	8001398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8000fae:	2014      	movs	r0, #20
 8000fb0:	f000 fa07 	bl	80013c2 <HAL_NVIC_EnableIRQ>
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b002      	add	sp, #8
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010800 	.word	0x40010800

08000fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	240c      	movs	r4, #12
 8000fce:	193b      	adds	r3, r7, r4
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	2314      	movs	r3, #20
 8000fd4:	001a      	movs	r2, r3
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	f004 f866 	bl	80050a8 <memset>
  if(huart->Instance==USART2)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a1c      	ldr	r2, [pc, #112]	; (8001054 <HAL_UART_MspInit+0x90>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d132      	bne.n	800104c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_UART_MspInit+0x94>)
 8000fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <HAL_UART_MspInit+0x94>)
 8000fec:	2180      	movs	r1, #128	; 0x80
 8000fee:	0289      	lsls	r1, r1, #10
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_UART_MspInit+0x94>)
 8000ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_UART_MspInit+0x94>)
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_UART_MspInit+0x94>)
 8001002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001004:	2201      	movs	r2, #1
 8001006:	4013      	ands	r3, r2
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA9     ------> USART2_TX
    PA10     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800100c:	193b      	adds	r3, r7, r4
 800100e:	22c0      	movs	r2, #192	; 0xc0
 8001010:	00d2      	lsls	r2, r2, #3
 8001012:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	0021      	movs	r1, r4
 8001016:	187b      	adds	r3, r7, r1
 8001018:	2202      	movs	r2, #2
 800101a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	187b      	adds	r3, r7, r1
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	187b      	adds	r3, r7, r1
 8001024:	2203      	movs	r2, #3
 8001026:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001028:	187b      	adds	r3, r7, r1
 800102a:	2204      	movs	r2, #4
 800102c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	187a      	adds	r2, r7, r1
 8001030:	23a0      	movs	r3, #160	; 0xa0
 8001032:	05db      	lsls	r3, r3, #23
 8001034:	0011      	movs	r1, r2
 8001036:	0018      	movs	r0, r3
 8001038:	f000 fa68 	bl	800150c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	2100      	movs	r1, #0
 8001040:	201c      	movs	r0, #28
 8001042:	f000 f9a9 	bl	8001398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001046:	201c      	movs	r0, #28
 8001048:	f000 f9bb 	bl	80013c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800104c:	46c0      	nop			; (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	b009      	add	sp, #36	; 0x24
 8001052:	bd90      	pop	{r4, r7, pc}
 8001054:	40004400 	.word	0x40004400
 8001058:	40021000 	.word	0x40021000

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001080:	f000 f8c2 	bl	8001208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_Pin);
 800108e:	2004      	movs	r0, #4
 8001090:	f000 fbe2 	bl	8001858 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT1_Pin);
 8001094:	2008      	movs	r0, #8
 8001096:	f000 fbdf 	bl	8001858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <TIM2_IRQHandler+0x14>)
 80010a6:	0018      	movs	r0, r3
 80010a8:	f002 fbec 	bl	8003884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	200000bc 	.word	0x200000bc

080010b8 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <TIM21_IRQHandler+0x14>)
 80010be:	0018      	movs	r0, r3
 80010c0:	f002 fbe0 	bl	8003884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	200000fc 	.word	0x200000fc

080010d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <SPI1_IRQHandler+0x14>)
 80010d6:	0018      	movs	r0, r3
 80010d8:	f002 f9a4 	bl	8003424 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	20000064 	.word	0x20000064

080010e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <USART2_IRQHandler+0x14>)
 80010ee:	0018      	movs	r0, r3
 80010f0:	f002 ffee 	bl	80040d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	2000013c 	.word	0x2000013c

08001100 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800110c:	480d      	ldr	r0, [pc, #52]	; (8001144 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800110e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <LoopForever+0x6>)
  ldr r1, =_edata
 8001112:	490e      	ldr	r1, [pc, #56]	; (800114c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001114:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <LoopForever+0xe>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001128:	4c0b      	ldr	r4, [pc, #44]	; (8001158 <LoopForever+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001136:	f7ff ffe3 	bl	8001100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113a:	f003 ff75 	bl	8005028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113e:	f7ff fa77 	bl	8000630 <main>

08001142 <LoopForever>:

LoopForever:
    b LoopForever
 8001142:	e7fe      	b.n	8001142 <LoopForever>
   ldr   r0, =_estack
 8001144:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800114c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001150:	080051f8 	.word	0x080051f8
  ldr r2, =_sbss
 8001154:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001158:	20000dc0 	.word	0x20000dc0

0800115c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC1_COMP_IRQHandler>
	...

08001160 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HAL_Init+0x3c>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_Init+0x3c>)
 8001172:	2140      	movs	r1, #64	; 0x40
 8001174:	430a      	orrs	r2, r1
 8001176:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001178:	2003      	movs	r0, #3
 800117a:	f000 f811 	bl	80011a0 <HAL_InitTick>
 800117e:	1e03      	subs	r3, r0, #0
 8001180:	d003      	beq.n	800118a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
 8001188:	e001      	b.n	800118e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800118a:	f7ff fe6f 	bl	8000e6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	781b      	ldrb	r3, [r3, #0]
}
 8001192:	0018      	movs	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	b002      	add	sp, #8
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	40022000 	.word	0x40022000

080011a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HAL_InitTick+0x5c>)
 80011aa:	681c      	ldr	r4, [r3, #0]
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_InitTick+0x60>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	0019      	movs	r1, r3
 80011b2:	23fa      	movs	r3, #250	; 0xfa
 80011b4:	0098      	lsls	r0, r3, #2
 80011b6:	f7fe ffaf 	bl	8000118 <__udivsi3>
 80011ba:	0003      	movs	r3, r0
 80011bc:	0019      	movs	r1, r3
 80011be:	0020      	movs	r0, r4
 80011c0:	f7fe ffaa 	bl	8000118 <__udivsi3>
 80011c4:	0003      	movs	r3, r0
 80011c6:	0018      	movs	r0, r3
 80011c8:	f000 f90b 	bl	80013e2 <HAL_SYSTICK_Config>
 80011cc:	1e03      	subs	r3, r0, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e00f      	b.n	80011f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d80b      	bhi.n	80011f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	2301      	movs	r3, #1
 80011de:	425b      	negs	r3, r3
 80011e0:	2200      	movs	r2, #0
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 f8d8 	bl	8001398 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_InitTick+0x64>)
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e000      	b.n	80011f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	0018      	movs	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	b003      	add	sp, #12
 80011fa:	bd90      	pop	{r4, r7, pc}
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000008 	.word	0x20000008
 8001204:	20000004 	.word	0x20000004

08001208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_IncTick+0x1c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	001a      	movs	r2, r3
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_IncTick+0x20>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	18d2      	adds	r2, r2, r3
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_IncTick+0x20>)
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	20000008 	.word	0x20000008
 8001228:	20000dbc 	.word	0x20000dbc

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b02      	ldr	r3, [pc, #8]	; (800123c <HAL_GetTick+0x10>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	20000dbc 	.word	0x20000dbc

08001240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	0002      	movs	r2, r0
 8001248:	1dfb      	adds	r3, r7, #7
 800124a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b7f      	cmp	r3, #127	; 0x7f
 8001252:	d809      	bhi.n	8001268 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001254:	1dfb      	adds	r3, r7, #7
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	001a      	movs	r2, r3
 800125a:	231f      	movs	r3, #31
 800125c:	401a      	ands	r2, r3
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <__NVIC_EnableIRQ+0x30>)
 8001260:	2101      	movs	r1, #1
 8001262:	4091      	lsls	r1, r2
 8001264:	000a      	movs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]
  }
}
 8001268:	46c0      	nop			; (mov r8, r8)
 800126a:	46bd      	mov	sp, r7
 800126c:	b002      	add	sp, #8
 800126e:	bd80      	pop	{r7, pc}
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	0002      	movs	r2, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b7f      	cmp	r3, #127	; 0x7f
 8001288:	d828      	bhi.n	80012dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800128a:	4a2f      	ldr	r2, [pc, #188]	; (8001348 <__NVIC_SetPriority+0xd4>)
 800128c:	1dfb      	adds	r3, r7, #7
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b25b      	sxtb	r3, r3
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	33c0      	adds	r3, #192	; 0xc0
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	589b      	ldr	r3, [r3, r2]
 800129a:	1dfa      	adds	r2, r7, #7
 800129c:	7812      	ldrb	r2, [r2, #0]
 800129e:	0011      	movs	r1, r2
 80012a0:	2203      	movs	r2, #3
 80012a2:	400a      	ands	r2, r1
 80012a4:	00d2      	lsls	r2, r2, #3
 80012a6:	21ff      	movs	r1, #255	; 0xff
 80012a8:	4091      	lsls	r1, r2
 80012aa:	000a      	movs	r2, r1
 80012ac:	43d2      	mvns	r2, r2
 80012ae:	401a      	ands	r2, r3
 80012b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	019b      	lsls	r3, r3, #6
 80012b6:	22ff      	movs	r2, #255	; 0xff
 80012b8:	401a      	ands	r2, r3
 80012ba:	1dfb      	adds	r3, r7, #7
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	0018      	movs	r0, r3
 80012c0:	2303      	movs	r3, #3
 80012c2:	4003      	ands	r3, r0
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c8:	481f      	ldr	r0, [pc, #124]	; (8001348 <__NVIC_SetPriority+0xd4>)
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	430a      	orrs	r2, r1
 80012d4:	33c0      	adds	r3, #192	; 0xc0
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012da:	e031      	b.n	8001340 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012dc:	4a1b      	ldr	r2, [pc, #108]	; (800134c <__NVIC_SetPriority+0xd8>)
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	0019      	movs	r1, r3
 80012e4:	230f      	movs	r3, #15
 80012e6:	400b      	ands	r3, r1
 80012e8:	3b08      	subs	r3, #8
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	3306      	adds	r3, #6
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	18d3      	adds	r3, r2, r3
 80012f2:	3304      	adds	r3, #4
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	1dfa      	adds	r2, r7, #7
 80012f8:	7812      	ldrb	r2, [r2, #0]
 80012fa:	0011      	movs	r1, r2
 80012fc:	2203      	movs	r2, #3
 80012fe:	400a      	ands	r2, r1
 8001300:	00d2      	lsls	r2, r2, #3
 8001302:	21ff      	movs	r1, #255	; 0xff
 8001304:	4091      	lsls	r1, r2
 8001306:	000a      	movs	r2, r1
 8001308:	43d2      	mvns	r2, r2
 800130a:	401a      	ands	r2, r3
 800130c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	019b      	lsls	r3, r3, #6
 8001312:	22ff      	movs	r2, #255	; 0xff
 8001314:	401a      	ands	r2, r3
 8001316:	1dfb      	adds	r3, r7, #7
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	0018      	movs	r0, r3
 800131c:	2303      	movs	r3, #3
 800131e:	4003      	ands	r3, r0
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001324:	4809      	ldr	r0, [pc, #36]	; (800134c <__NVIC_SetPriority+0xd8>)
 8001326:	1dfb      	adds	r3, r7, #7
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	001c      	movs	r4, r3
 800132c:	230f      	movs	r3, #15
 800132e:	4023      	ands	r3, r4
 8001330:	3b08      	subs	r3, #8
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	430a      	orrs	r2, r1
 8001336:	3306      	adds	r3, #6
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	18c3      	adds	r3, r0, r3
 800133c:	3304      	adds	r3, #4
 800133e:	601a      	str	r2, [r3, #0]
}
 8001340:	46c0      	nop			; (mov r8, r8)
 8001342:	46bd      	mov	sp, r7
 8001344:	b003      	add	sp, #12
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	1e5a      	subs	r2, r3, #1
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	045b      	lsls	r3, r3, #17
 8001360:	429a      	cmp	r2, r3
 8001362:	d301      	bcc.n	8001368 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001364:	2301      	movs	r3, #1
 8001366:	e010      	b.n	800138a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <SysTick_Config+0x44>)
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	3a01      	subs	r2, #1
 800136e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001370:	2301      	movs	r3, #1
 8001372:	425b      	negs	r3, r3
 8001374:	2103      	movs	r1, #3
 8001376:	0018      	movs	r0, r3
 8001378:	f7ff ff7c 	bl	8001274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <SysTick_Config+0x44>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <SysTick_Config+0x44>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001388:	2300      	movs	r3, #0
}
 800138a:	0018      	movs	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	b002      	add	sp, #8
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	e000e010 	.word	0xe000e010

08001398 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	210f      	movs	r1, #15
 80013a4:	187b      	adds	r3, r7, r1
 80013a6:	1c02      	adds	r2, r0, #0
 80013a8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	0011      	movs	r1, r2
 80013b4:	0018      	movs	r0, r3
 80013b6:	f7ff ff5d 	bl	8001274 <__NVIC_SetPriority>
}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	b004      	add	sp, #16
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	0002      	movs	r2, r0
 80013ca:	1dfb      	adds	r3, r7, #7
 80013cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ce:	1dfb      	adds	r3, r7, #7
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	0018      	movs	r0, r3
 80013d6:	f7ff ff33 	bl	8001240 <__NVIC_EnableIRQ>
}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	46bd      	mov	sp, r7
 80013de:	b002      	add	sp, #8
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	0018      	movs	r0, r3
 80013ee:	f7ff ffaf 	bl	8001350 <SysTick_Config>
 80013f2:	0003      	movs	r3, r0
}
 80013f4:	0018      	movs	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b002      	add	sp, #8
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001404:	230f      	movs	r3, #15
 8001406:	18fb      	adds	r3, r7, r3
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2225      	movs	r2, #37	; 0x25
 8001410:	5c9b      	ldrb	r3, [r3, r2]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d008      	beq.n	800142a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2204      	movs	r2, #4
 800141c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2224      	movs	r2, #36	; 0x24
 8001422:	2100      	movs	r1, #0
 8001424:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e024      	b.n	8001474 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	210e      	movs	r1, #14
 8001436:	438a      	bics	r2, r1
 8001438:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	438a      	bics	r2, r1
 8001448:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	221c      	movs	r2, #28
 8001450:	401a      	ands	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	2101      	movs	r1, #1
 8001458:	4091      	lsls	r1, r2
 800145a:	000a      	movs	r2, r1
 800145c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2225      	movs	r2, #37	; 0x25
 8001462:	2101      	movs	r1, #1
 8001464:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2224      	movs	r2, #36	; 0x24
 800146a:	2100      	movs	r1, #0
 800146c:	5499      	strb	r1, [r3, r2]

    return status;
 800146e:	230f      	movs	r3, #15
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001474:	0018      	movs	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	b004      	add	sp, #16
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001484:	210f      	movs	r1, #15
 8001486:	187b      	adds	r3, r7, r1
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2225      	movs	r2, #37	; 0x25
 8001490:	5c9b      	ldrb	r3, [r3, r2]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d006      	beq.n	80014a6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2204      	movs	r2, #4
 800149c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800149e:	187b      	adds	r3, r7, r1
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]
 80014a4:	e02a      	b.n	80014fc <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	210e      	movs	r1, #14
 80014b2:	438a      	bics	r2, r1
 80014b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2101      	movs	r1, #1
 80014c2:	438a      	bics	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	221c      	movs	r2, #28
 80014cc:	401a      	ands	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	2101      	movs	r1, #1
 80014d4:	4091      	lsls	r1, r2
 80014d6:	000a      	movs	r2, r1
 80014d8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2225      	movs	r2, #37	; 0x25
 80014de:	2101      	movs	r1, #1
 80014e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2224      	movs	r2, #36	; 0x24
 80014e6:	2100      	movs	r1, #0
 80014e8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d004      	beq.n	80014fc <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	0010      	movs	r0, r2
 80014fa:	4798      	blx	r3
    }
  }
  return status;
 80014fc:	230f      	movs	r3, #15
 80014fe:	18fb      	adds	r3, r7, r3
 8001500:	781b      	ldrb	r3, [r3, #0]
}
 8001502:	0018      	movs	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	b004      	add	sp, #16
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001522:	e149      	b.n	80017b8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2101      	movs	r1, #1
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	4091      	lsls	r1, r2
 800152e:	000a      	movs	r2, r1
 8001530:	4013      	ands	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d100      	bne.n	800153c <HAL_GPIO_Init+0x30>
 800153a:	e13a      	b.n	80017b2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2203      	movs	r2, #3
 8001542:	4013      	ands	r3, r2
 8001544:	2b01      	cmp	r3, #1
 8001546:	d005      	beq.n	8001554 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2203      	movs	r2, #3
 800154e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001550:	2b02      	cmp	r3, #2
 8001552:	d130      	bne.n	80015b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	2203      	movs	r2, #3
 8001560:	409a      	lsls	r2, r3
 8001562:	0013      	movs	r3, r2
 8001564:	43da      	mvns	r2, r3
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	409a      	lsls	r2, r3
 8001576:	0013      	movs	r3, r2
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800158a:	2201      	movs	r2, #1
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	409a      	lsls	r2, r3
 8001590:	0013      	movs	r3, r2
 8001592:	43da      	mvns	r2, r3
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	091b      	lsrs	r3, r3, #4
 80015a0:	2201      	movs	r2, #1
 80015a2:	401a      	ands	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	409a      	lsls	r2, r3
 80015a8:	0013      	movs	r3, r2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2203      	movs	r2, #3
 80015bc:	4013      	ands	r3, r2
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d017      	beq.n	80015f2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	2203      	movs	r2, #3
 80015ce:	409a      	lsls	r2, r3
 80015d0:	0013      	movs	r3, r2
 80015d2:	43da      	mvns	r2, r3
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	409a      	lsls	r2, r3
 80015e4:	0013      	movs	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2203      	movs	r2, #3
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d123      	bne.n	8001646 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	08da      	lsrs	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3208      	adds	r2, #8
 8001606:	0092      	lsls	r2, r2, #2
 8001608:	58d3      	ldr	r3, [r2, r3]
 800160a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2207      	movs	r2, #7
 8001610:	4013      	ands	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	220f      	movs	r2, #15
 8001616:	409a      	lsls	r2, r3
 8001618:	0013      	movs	r3, r2
 800161a:	43da      	mvns	r2, r3
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	691a      	ldr	r2, [r3, #16]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	2107      	movs	r1, #7
 800162a:	400b      	ands	r3, r1
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	409a      	lsls	r2, r3
 8001630:	0013      	movs	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	08da      	lsrs	r2, r3, #3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3208      	adds	r2, #8
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	6939      	ldr	r1, [r7, #16]
 8001644:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	409a      	lsls	r2, r3
 8001654:	0013      	movs	r3, r2
 8001656:	43da      	mvns	r2, r3
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2203      	movs	r2, #3
 8001664:	401a      	ands	r2, r3
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	409a      	lsls	r2, r3
 800166c:	0013      	movs	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	23c0      	movs	r3, #192	; 0xc0
 8001680:	029b      	lsls	r3, r3, #10
 8001682:	4013      	ands	r3, r2
 8001684:	d100      	bne.n	8001688 <HAL_GPIO_Init+0x17c>
 8001686:	e094      	b.n	80017b2 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001688:	4b51      	ldr	r3, [pc, #324]	; (80017d0 <HAL_GPIO_Init+0x2c4>)
 800168a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800168c:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <HAL_GPIO_Init+0x2c4>)
 800168e:	2101      	movs	r1, #1
 8001690:	430a      	orrs	r2, r1
 8001692:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001694:	4a4f      	ldr	r2, [pc, #316]	; (80017d4 <HAL_GPIO_Init+0x2c8>)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	3302      	adds	r3, #2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	589b      	ldr	r3, [r3, r2]
 80016a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2203      	movs	r2, #3
 80016a6:	4013      	ands	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	220f      	movs	r2, #15
 80016ac:	409a      	lsls	r2, r3
 80016ae:	0013      	movs	r3, r2
 80016b0:	43da      	mvns	r2, r3
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	23a0      	movs	r3, #160	; 0xa0
 80016bc:	05db      	lsls	r3, r3, #23
 80016be:	429a      	cmp	r2, r3
 80016c0:	d013      	beq.n	80016ea <HAL_GPIO_Init+0x1de>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a44      	ldr	r2, [pc, #272]	; (80017d8 <HAL_GPIO_Init+0x2cc>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00d      	beq.n	80016e6 <HAL_GPIO_Init+0x1da>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a43      	ldr	r2, [pc, #268]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d007      	beq.n	80016e2 <HAL_GPIO_Init+0x1d6>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a42      	ldr	r2, [pc, #264]	; (80017e0 <HAL_GPIO_Init+0x2d4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d101      	bne.n	80016de <HAL_GPIO_Init+0x1d2>
 80016da:	2305      	movs	r3, #5
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x1e0>
 80016de:	2306      	movs	r3, #6
 80016e0:	e004      	b.n	80016ec <HAL_GPIO_Init+0x1e0>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e002      	b.n	80016ec <HAL_GPIO_Init+0x1e0>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_GPIO_Init+0x1e0>
 80016ea:	2300      	movs	r3, #0
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	2103      	movs	r1, #3
 80016f0:	400a      	ands	r2, r1
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	4093      	lsls	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016fc:	4935      	ldr	r1, [pc, #212]	; (80017d4 <HAL_GPIO_Init+0x2c8>)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170a:	4b36      	ldr	r3, [pc, #216]	; (80017e4 <HAL_GPIO_Init+0x2d8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43da      	mvns	r2, r3
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	025b      	lsls	r3, r3, #9
 8001722:	4013      	ands	r3, r2
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800172e:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <HAL_GPIO_Init+0x2d8>)
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001734:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <HAL_GPIO_Init+0x2d8>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43da      	mvns	r2, r3
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	029b      	lsls	r3, r3, #10
 800174c:	4013      	ands	r3, r2
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001758:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <HAL_GPIO_Init+0x2d8>)
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800175e:	4b21      	ldr	r3, [pc, #132]	; (80017e4 <HAL_GPIO_Init+0x2d8>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43da      	mvns	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	035b      	lsls	r3, r3, #13
 8001776:	4013      	ands	r3, r2
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_GPIO_Init+0x2d8>)
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001788:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HAL_GPIO_Init+0x2d8>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	43da      	mvns	r2, r3
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	039b      	lsls	r3, r3, #14
 80017a0:	4013      	ands	r3, r2
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017ac:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <HAL_GPIO_Init+0x2d8>)
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	40da      	lsrs	r2, r3
 80017c0:	1e13      	subs	r3, r2, #0
 80017c2:	d000      	beq.n	80017c6 <HAL_GPIO_Init+0x2ba>
 80017c4:	e6ae      	b.n	8001524 <HAL_GPIO_Init+0x18>
  }
}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	46c0      	nop			; (mov r8, r8)
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b006      	add	sp, #24
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40010000 	.word	0x40010000
 80017d8:	50000400 	.word	0x50000400
 80017dc:	50000800 	.word	0x50000800
 80017e0:	50001c00 	.word	0x50001c00
 80017e4:	40010400 	.word	0x40010400

080017e8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	0008      	movs	r0, r1
 80017f2:	0011      	movs	r1, r2
 80017f4:	1cbb      	adds	r3, r7, #2
 80017f6:	1c02      	adds	r2, r0, #0
 80017f8:	801a      	strh	r2, [r3, #0]
 80017fa:	1c7b      	adds	r3, r7, #1
 80017fc:	1c0a      	adds	r2, r1, #0
 80017fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001800:	1c7b      	adds	r3, r7, #1
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d004      	beq.n	8001812 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001808:	1cbb      	adds	r3, r7, #2
 800180a:	881a      	ldrh	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001810:	e003      	b.n	800181a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001812:	1cbb      	adds	r3, r7, #2
 8001814:	881a      	ldrh	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b002      	add	sp, #8
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b084      	sub	sp, #16
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	000a      	movs	r2, r1
 800182c:	1cbb      	adds	r3, r7, #2
 800182e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001836:	1cbb      	adds	r3, r7, #2
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4013      	ands	r3, r2
 800183e:	041a      	lsls	r2, r3, #16
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	43db      	mvns	r3, r3
 8001844:	1cb9      	adds	r1, r7, #2
 8001846:	8809      	ldrh	r1, [r1, #0]
 8001848:	400b      	ands	r3, r1
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	619a      	str	r2, [r3, #24]
}
 8001850:	46c0      	nop			; (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	b004      	add	sp, #16
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	0002      	movs	r2, r0
 8001860:	1dbb      	adds	r3, r7, #6
 8001862:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	1dba      	adds	r2, r7, #6
 800186a:	8812      	ldrh	r2, [r2, #0]
 800186c:	4013      	ands	r3, r2
 800186e:	d008      	beq.n	8001882 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001872:	1dba      	adds	r2, r7, #6
 8001874:	8812      	ldrh	r2, [r2, #0]
 8001876:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001878:	1dbb      	adds	r3, r7, #6
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	0018      	movs	r0, r3
 800187e:	f7ff f9e9 	bl	8000c54 <HAL_GPIO_EXTI_Callback>
  }
}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	46bd      	mov	sp, r7
 8001886:	b002      	add	sp, #8
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	40010400 	.word	0x40010400

08001890 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_PWR_EnableBkUpAccess+0x18>)
 800189a:	2180      	movs	r1, #128	; 0x80
 800189c:	0049      	lsls	r1, r1, #1
 800189e:	430a      	orrs	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]
}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40007000 	.word	0x40007000

080018ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ac:	b5b0      	push	{r4, r5, r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	f000 fb6c 	bl	8001f98 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c0:	4bc8      	ldr	r3, [pc, #800]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	220c      	movs	r2, #12
 80018c6:	4013      	ands	r3, r2
 80018c8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ca:	4bc6      	ldr	r3, [pc, #792]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	025b      	lsls	r3, r3, #9
 80018d2:	4013      	ands	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2201      	movs	r2, #1
 80018dc:	4013      	ands	r3, r2
 80018de:	d100      	bne.n	80018e2 <HAL_RCC_OscConfig+0x36>
 80018e0:	e07d      	b.n	80019de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d007      	beq.n	80018f8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	2b0c      	cmp	r3, #12
 80018ec:	d112      	bne.n	8001914 <HAL_RCC_OscConfig+0x68>
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d10d      	bne.n	8001914 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f8:	4bba      	ldr	r3, [pc, #744]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	029b      	lsls	r3, r3, #10
 8001900:	4013      	ands	r3, r2
 8001902:	d100      	bne.n	8001906 <HAL_RCC_OscConfig+0x5a>
 8001904:	e06a      	b.n	80019dc <HAL_RCC_OscConfig+0x130>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d166      	bne.n	80019dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	f000 fb42 	bl	8001f98 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	025b      	lsls	r3, r3, #9
 800191c:	429a      	cmp	r2, r3
 800191e:	d107      	bne.n	8001930 <HAL_RCC_OscConfig+0x84>
 8001920:	4bb0      	ldr	r3, [pc, #704]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4baf      	ldr	r3, [pc, #700]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001926:	2180      	movs	r1, #128	; 0x80
 8001928:	0249      	lsls	r1, r1, #9
 800192a:	430a      	orrs	r2, r1
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	e027      	b.n	8001980 <HAL_RCC_OscConfig+0xd4>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	23a0      	movs	r3, #160	; 0xa0
 8001936:	02db      	lsls	r3, r3, #11
 8001938:	429a      	cmp	r2, r3
 800193a:	d10e      	bne.n	800195a <HAL_RCC_OscConfig+0xae>
 800193c:	4ba9      	ldr	r3, [pc, #676]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4ba8      	ldr	r3, [pc, #672]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001942:	2180      	movs	r1, #128	; 0x80
 8001944:	02c9      	lsls	r1, r1, #11
 8001946:	430a      	orrs	r2, r1
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	4ba6      	ldr	r3, [pc, #664]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4ba5      	ldr	r3, [pc, #660]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001950:	2180      	movs	r1, #128	; 0x80
 8001952:	0249      	lsls	r1, r1, #9
 8001954:	430a      	orrs	r2, r1
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	e012      	b.n	8001980 <HAL_RCC_OscConfig+0xd4>
 800195a:	4ba2      	ldr	r3, [pc, #648]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	4ba1      	ldr	r3, [pc, #644]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001960:	49a1      	ldr	r1, [pc, #644]	; (8001be8 <HAL_RCC_OscConfig+0x33c>)
 8001962:	400a      	ands	r2, r1
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	4b9f      	ldr	r3, [pc, #636]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	025b      	lsls	r3, r3, #9
 800196e:	4013      	ands	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4b9b      	ldr	r3, [pc, #620]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b9a      	ldr	r3, [pc, #616]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 800197a:	499c      	ldr	r1, [pc, #624]	; (8001bec <HAL_RCC_OscConfig+0x340>)
 800197c:	400a      	ands	r2, r1
 800197e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d014      	beq.n	80019b2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff fc50 	bl	800122c <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001992:	f7ff fc4b 	bl	800122c <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b64      	cmp	r3, #100	; 0x64
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e2f9      	b.n	8001f98 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019a4:	4b8f      	ldr	r3, [pc, #572]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	029b      	lsls	r3, r3, #10
 80019ac:	4013      	ands	r3, r2
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0xe6>
 80019b0:	e015      	b.n	80019de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7ff fc3b 	bl	800122c <HAL_GetTick>
 80019b6:	0003      	movs	r3, r0
 80019b8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019bc:	f7ff fc36 	bl	800122c <HAL_GetTick>
 80019c0:	0002      	movs	r2, r0
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	; 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e2e4      	b.n	8001f98 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019ce:	4b85      	ldr	r3, [pc, #532]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	029b      	lsls	r3, r3, #10
 80019d6:	4013      	ands	r3, r2
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x110>
 80019da:	e000      	b.n	80019de <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019dc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2202      	movs	r2, #2
 80019e4:	4013      	ands	r3, r2
 80019e6:	d100      	bne.n	80019ea <HAL_RCC_OscConfig+0x13e>
 80019e8:	e099      	b.n	8001b1e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	2220      	movs	r2, #32
 80019f4:	4013      	ands	r3, r2
 80019f6:	d009      	beq.n	8001a0c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80019f8:	4b7a      	ldr	r3, [pc, #488]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b79      	ldr	r3, [pc, #484]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 80019fe:	2120      	movs	r1, #32
 8001a00:	430a      	orrs	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	2220      	movs	r2, #32
 8001a08:	4393      	bics	r3, r2
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d005      	beq.n	8001a1e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	2b0c      	cmp	r3, #12
 8001a16:	d13e      	bne.n	8001a96 <HAL_RCC_OscConfig+0x1ea>
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d13b      	bne.n	8001a96 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001a1e:	4b71      	ldr	r3, [pc, #452]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2204      	movs	r2, #4
 8001a24:	4013      	ands	r3, r2
 8001a26:	d004      	beq.n	8001a32 <HAL_RCC_OscConfig+0x186>
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e2b2      	b.n	8001f98 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a32:	4b6c      	ldr	r3, [pc, #432]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4a6e      	ldr	r2, [pc, #440]	; (8001bf0 <HAL_RCC_OscConfig+0x344>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	021a      	lsls	r2, r3, #8
 8001a42:	4b68      	ldr	r3, [pc, #416]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001a44:	430a      	orrs	r2, r1
 8001a46:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a48:	4b66      	ldr	r3, [pc, #408]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2209      	movs	r2, #9
 8001a4e:	4393      	bics	r3, r2
 8001a50:	0019      	movs	r1, r3
 8001a52:	4b64      	ldr	r3, [pc, #400]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a56:	430a      	orrs	r2, r1
 8001a58:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a5a:	f000 fbeb 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 8001a5e:	0001      	movs	r1, r0
 8001a60:	4b60      	ldr	r3, [pc, #384]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	220f      	movs	r2, #15
 8001a68:	4013      	ands	r3, r2
 8001a6a:	4a62      	ldr	r2, [pc, #392]	; (8001bf4 <HAL_RCC_OscConfig+0x348>)
 8001a6c:	5cd3      	ldrb	r3, [r2, r3]
 8001a6e:	000a      	movs	r2, r1
 8001a70:	40da      	lsrs	r2, r3
 8001a72:	4b61      	ldr	r3, [pc, #388]	; (8001bf8 <HAL_RCC_OscConfig+0x34c>)
 8001a74:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001a76:	4b61      	ldr	r3, [pc, #388]	; (8001bfc <HAL_RCC_OscConfig+0x350>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2513      	movs	r5, #19
 8001a7c:	197c      	adds	r4, r7, r5
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f7ff fb8e 	bl	80011a0 <HAL_InitTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001a88:	197b      	adds	r3, r7, r5
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d046      	beq.n	8001b1e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001a90:	197b      	adds	r3, r7, r5
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	e280      	b.n	8001f98 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d027      	beq.n	8001aec <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a9c:	4b51      	ldr	r3, [pc, #324]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2209      	movs	r2, #9
 8001aa2:	4393      	bics	r3, r2
 8001aa4:	0019      	movs	r1, r3
 8001aa6:	4b4f      	ldr	r3, [pc, #316]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7ff fbbd 	bl	800122c <HAL_GetTick>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab8:	f7ff fbb8 	bl	800122c <HAL_GetTick>
 8001abc:	0002      	movs	r2, r0
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e266      	b.n	8001f98 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aca:	4b46      	ldr	r3, [pc, #280]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2204      	movs	r2, #4
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d0f1      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad4:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	4a45      	ldr	r2, [pc, #276]	; (8001bf0 <HAL_RCC_OscConfig+0x344>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	0019      	movs	r1, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	021a      	lsls	r2, r3, #8
 8001ae4:	4b3f      	ldr	r3, [pc, #252]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	e018      	b.n	8001b1e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aec:	4b3d      	ldr	r3, [pc, #244]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b3c      	ldr	r3, [pc, #240]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001af2:	2101      	movs	r1, #1
 8001af4:	438a      	bics	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff fb98 	bl	800122c <HAL_GetTick>
 8001afc:	0003      	movs	r3, r0
 8001afe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b02:	f7ff fb93 	bl	800122c <HAL_GetTick>
 8001b06:	0002      	movs	r2, r0
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e241      	b.n	8001f98 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b14:	4b33      	ldr	r3, [pc, #204]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2204      	movs	r2, #4
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d1f1      	bne.n	8001b02 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2210      	movs	r2, #16
 8001b24:	4013      	ands	r3, r2
 8001b26:	d100      	bne.n	8001b2a <HAL_RCC_OscConfig+0x27e>
 8001b28:	e0a1      	b.n	8001c6e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d140      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b30:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_OscConfig+0x29c>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e227      	b.n	8001f98 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b48:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	4a2c      	ldr	r2, [pc, #176]	; (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	0019      	movs	r1, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1a      	ldr	r2, [r3, #32]
 8001b56:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b5c:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	0a19      	lsrs	r1, r3, #8
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	061a      	lsls	r2, r3, #24
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	0b5b      	lsrs	r3, r3, #13
 8001b76:	3301      	adds	r3, #1
 8001b78:	2280      	movs	r2, #128	; 0x80
 8001b7a:	0212      	lsls	r2, r2, #8
 8001b7c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	091b      	lsrs	r3, r3, #4
 8001b84:	210f      	movs	r1, #15
 8001b86:	400b      	ands	r3, r1
 8001b88:	491a      	ldr	r1, [pc, #104]	; (8001bf4 <HAL_RCC_OscConfig+0x348>)
 8001b8a:	5ccb      	ldrb	r3, [r1, r3]
 8001b8c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x34c>)
 8001b90:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_RCC_OscConfig+0x350>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2513      	movs	r5, #19
 8001b98:	197c      	adds	r4, r7, r5
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f7ff fb00 	bl	80011a0 <HAL_InitTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001ba4:	197b      	adds	r3, r7, r5
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d060      	beq.n	8001c6e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001bac:	197b      	adds	r3, r7, r5
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	e1f2      	b.n	8001f98 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d03f      	beq.n	8001c3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_RCC_OscConfig+0x338>)
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	0049      	lsls	r1, r1, #1
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fb30 	bl	800122c <HAL_GetTick>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bd0:	e018      	b.n	8001c04 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bd2:	f7ff fb2b 	bl	800122c <HAL_GetTick>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d911      	bls.n	8001c04 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e1d9      	b.n	8001f98 <HAL_RCC_OscConfig+0x6ec>
 8001be4:	40021000 	.word	0x40021000
 8001be8:	fffeffff 	.word	0xfffeffff
 8001bec:	fffbffff 	.word	0xfffbffff
 8001bf0:	ffffe0ff 	.word	0xffffe0ff
 8001bf4:	08005154 	.word	0x08005154
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000004 	.word	0x20000004
 8001c00:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c04:	4bc9      	ldr	r3, [pc, #804]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d0e0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c10:	4bc6      	ldr	r3, [pc, #792]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4ac6      	ldr	r2, [pc, #792]	; (8001f30 <HAL_RCC_OscConfig+0x684>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	0019      	movs	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1a      	ldr	r2, [r3, #32]
 8001c1e:	4bc3      	ldr	r3, [pc, #780]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001c20:	430a      	orrs	r2, r1
 8001c22:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c24:	4bc1      	ldr	r3, [pc, #772]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	0a19      	lsrs	r1, r3, #8
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	061a      	lsls	r2, r3, #24
 8001c32:	4bbe      	ldr	r3, [pc, #760]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001c34:	430a      	orrs	r2, r1
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	e019      	b.n	8001c6e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c3a:	4bbc      	ldr	r3, [pc, #752]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4bbb      	ldr	r3, [pc, #748]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001c40:	49bc      	ldr	r1, [pc, #752]	; (8001f34 <HAL_RCC_OscConfig+0x688>)
 8001c42:	400a      	ands	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c46:	f7ff faf1 	bl	800122c <HAL_GetTick>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c50:	f7ff faec 	bl	800122c <HAL_GetTick>
 8001c54:	0002      	movs	r2, r0
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e19a      	b.n	8001f98 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c62:	4bb2      	ldr	r3, [pc, #712]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2208      	movs	r2, #8
 8001c74:	4013      	ands	r3, r2
 8001c76:	d036      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d019      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c80:	4baa      	ldr	r3, [pc, #680]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001c82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c84:	4ba9      	ldr	r3, [pc, #676]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001c86:	2101      	movs	r1, #1
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8c:	f7ff face 	bl	800122c <HAL_GetTick>
 8001c90:	0003      	movs	r3, r0
 8001c92:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c96:	f7ff fac9 	bl	800122c <HAL_GetTick>
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e177      	b.n	8001f98 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ca8:	4ba0      	ldr	r3, [pc, #640]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cac:	2202      	movs	r2, #2
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d0f1      	beq.n	8001c96 <HAL_RCC_OscConfig+0x3ea>
 8001cb2:	e018      	b.n	8001ce6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb4:	4b9d      	ldr	r3, [pc, #628]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001cb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cb8:	4b9c      	ldr	r3, [pc, #624]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001cba:	2101      	movs	r1, #1
 8001cbc:	438a      	bics	r2, r1
 8001cbe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc0:	f7ff fab4 	bl	800122c <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cca:	f7ff faaf 	bl	800122c <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e15d      	b.n	8001f98 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cdc:	4b93      	ldr	r3, [pc, #588]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d1f1      	bne.n	8001cca <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2204      	movs	r2, #4
 8001cec:	4013      	ands	r3, r2
 8001cee:	d100      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x446>
 8001cf0:	e0ae      	b.n	8001e50 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf2:	2023      	movs	r0, #35	; 0x23
 8001cf4:	183b      	adds	r3, r7, r0
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfa:	4b8c      	ldr	r3, [pc, #560]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	055b      	lsls	r3, r3, #21
 8001d02:	4013      	ands	r3, r2
 8001d04:	d109      	bne.n	8001d1a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b89      	ldr	r3, [pc, #548]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d0a:	4b88      	ldr	r3, [pc, #544]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001d0c:	2180      	movs	r1, #128	; 0x80
 8001d0e:	0549      	lsls	r1, r1, #21
 8001d10:	430a      	orrs	r2, r1
 8001d12:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d14:	183b      	adds	r3, r7, r0
 8001d16:	2201      	movs	r2, #1
 8001d18:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1a:	4b87      	ldr	r3, [pc, #540]	; (8001f38 <HAL_RCC_OscConfig+0x68c>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4013      	ands	r3, r2
 8001d24:	d11a      	bne.n	8001d5c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d26:	4b84      	ldr	r3, [pc, #528]	; (8001f38 <HAL_RCC_OscConfig+0x68c>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b83      	ldr	r3, [pc, #524]	; (8001f38 <HAL_RCC_OscConfig+0x68c>)
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	0049      	lsls	r1, r1, #1
 8001d30:	430a      	orrs	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d34:	f7ff fa7a 	bl	800122c <HAL_GetTick>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3e:	f7ff fa75 	bl	800122c <HAL_GetTick>
 8001d42:	0002      	movs	r2, r0
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b64      	cmp	r3, #100	; 0x64
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e123      	b.n	8001f98 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d50:	4b79      	ldr	r3, [pc, #484]	; (8001f38 <HAL_RCC_OscConfig+0x68c>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d107      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4cc>
 8001d68:	4b70      	ldr	r3, [pc, #448]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001d6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d6c:	4b6f      	ldr	r3, [pc, #444]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001d6e:	2180      	movs	r1, #128	; 0x80
 8001d70:	0049      	lsls	r1, r1, #1
 8001d72:	430a      	orrs	r2, r1
 8001d74:	651a      	str	r2, [r3, #80]	; 0x50
 8001d76:	e031      	b.n	8001ddc <HAL_RCC_OscConfig+0x530>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10c      	bne.n	8001d9a <HAL_RCC_OscConfig+0x4ee>
 8001d80:	4b6a      	ldr	r3, [pc, #424]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001d82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d84:	4b69      	ldr	r3, [pc, #420]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001d86:	496b      	ldr	r1, [pc, #428]	; (8001f34 <HAL_RCC_OscConfig+0x688>)
 8001d88:	400a      	ands	r2, r1
 8001d8a:	651a      	str	r2, [r3, #80]	; 0x50
 8001d8c:	4b67      	ldr	r3, [pc, #412]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001d8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d90:	4b66      	ldr	r3, [pc, #408]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001d92:	496a      	ldr	r1, [pc, #424]	; (8001f3c <HAL_RCC_OscConfig+0x690>)
 8001d94:	400a      	ands	r2, r1
 8001d96:	651a      	str	r2, [r3, #80]	; 0x50
 8001d98:	e020      	b.n	8001ddc <HAL_RCC_OscConfig+0x530>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	23a0      	movs	r3, #160	; 0xa0
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d10e      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x518>
 8001da6:	4b61      	ldr	r3, [pc, #388]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001da8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001daa:	4b60      	ldr	r3, [pc, #384]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001dac:	2180      	movs	r1, #128	; 0x80
 8001dae:	00c9      	lsls	r1, r1, #3
 8001db0:	430a      	orrs	r2, r1
 8001db2:	651a      	str	r2, [r3, #80]	; 0x50
 8001db4:	4b5d      	ldr	r3, [pc, #372]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001db6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001db8:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001dba:	2180      	movs	r1, #128	; 0x80
 8001dbc:	0049      	lsls	r1, r1, #1
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	651a      	str	r2, [r3, #80]	; 0x50
 8001dc2:	e00b      	b.n	8001ddc <HAL_RCC_OscConfig+0x530>
 8001dc4:	4b59      	ldr	r3, [pc, #356]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001dc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dc8:	4b58      	ldr	r3, [pc, #352]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001dca:	495a      	ldr	r1, [pc, #360]	; (8001f34 <HAL_RCC_OscConfig+0x688>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	651a      	str	r2, [r3, #80]	; 0x50
 8001dd0:	4b56      	ldr	r3, [pc, #344]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001dd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dd4:	4b55      	ldr	r3, [pc, #340]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001dd6:	4959      	ldr	r1, [pc, #356]	; (8001f3c <HAL_RCC_OscConfig+0x690>)
 8001dd8:	400a      	ands	r2, r1
 8001dda:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d015      	beq.n	8001e10 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de4:	f7ff fa22 	bl	800122c <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dec:	e009      	b.n	8001e02 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dee:	f7ff fa1d 	bl	800122c <HAL_GetTick>
 8001df2:	0002      	movs	r2, r0
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	4a51      	ldr	r2, [pc, #324]	; (8001f40 <HAL_RCC_OscConfig+0x694>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e0ca      	b.n	8001f98 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e02:	4b4a      	ldr	r3, [pc, #296]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001e04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d0ef      	beq.n	8001dee <HAL_RCC_OscConfig+0x542>
 8001e0e:	e014      	b.n	8001e3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e10:	f7ff fa0c 	bl	800122c <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e18:	e009      	b.n	8001e2e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7ff fa07 	bl	800122c <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	4a46      	ldr	r2, [pc, #280]	; (8001f40 <HAL_RCC_OscConfig+0x694>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e0b4      	b.n	8001f98 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e2e:	4b3f      	ldr	r3, [pc, #252]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001e30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4013      	ands	r3, r2
 8001e38:	d1ef      	bne.n	8001e1a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e3a:	2323      	movs	r3, #35	; 0x23
 8001e3c:	18fb      	adds	r3, r7, r3
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d105      	bne.n	8001e50 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e44:	4b39      	ldr	r3, [pc, #228]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e48:	4b38      	ldr	r3, [pc, #224]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001e4a:	493e      	ldr	r1, [pc, #248]	; (8001f44 <HAL_RCC_OscConfig+0x698>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d100      	bne.n	8001e5a <HAL_RCC_OscConfig+0x5ae>
 8001e58:	e09d      	b.n	8001f96 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	2b0c      	cmp	r3, #12
 8001e5e:	d100      	bne.n	8001e62 <HAL_RCC_OscConfig+0x5b6>
 8001e60:	e076      	b.n	8001f50 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d145      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6a:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001e70:	4935      	ldr	r1, [pc, #212]	; (8001f48 <HAL_RCC_OscConfig+0x69c>)
 8001e72:	400a      	ands	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e76:	f7ff f9d9 	bl	800122c <HAL_GetTick>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff f9d4 	bl	800122c <HAL_GetTick>
 8001e84:	0002      	movs	r2, r0
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e082      	b.n	8001f98 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e92:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	049b      	lsls	r3, r3, #18
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e9e:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	4a2a      	ldr	r2, [pc, #168]	; (8001f4c <HAL_RCC_OscConfig+0x6a0>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	0019      	movs	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	0449      	lsls	r1, r1, #17
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f9ae 	bl	800122c <HAL_GetTick>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed6:	f7ff f9a9 	bl	800122c <HAL_GetTick>
 8001eda:	0002      	movs	r2, r0
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e057      	b.n	8001f98 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ee8:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	049b      	lsls	r3, r3, #18
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x62a>
 8001ef4:	e04f      	b.n	8001f96 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001efc:	4912      	ldr	r1, [pc, #72]	; (8001f48 <HAL_RCC_OscConfig+0x69c>)
 8001efe:	400a      	ands	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7ff f993 	bl	800122c <HAL_GetTick>
 8001f06:	0003      	movs	r3, r0
 8001f08:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7ff f98e 	bl	800122c <HAL_GetTick>
 8001f10:	0002      	movs	r2, r0
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e03c      	b.n	8001f98 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f1e:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_RCC_OscConfig+0x680>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	049b      	lsls	r3, r3, #18
 8001f26:	4013      	ands	r3, r2
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x660>
 8001f2a:	e034      	b.n	8001f96 <HAL_RCC_OscConfig+0x6ea>
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	ffff1fff 	.word	0xffff1fff
 8001f34:	fffffeff 	.word	0xfffffeff
 8001f38:	40007000 	.word	0x40007000
 8001f3c:	fffffbff 	.word	0xfffffbff
 8001f40:	00001388 	.word	0x00001388
 8001f44:	efffffff 	.word	0xefffffff
 8001f48:	feffffff 	.word	0xfeffffff
 8001f4c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e01d      	b.n	8001f98 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f5c:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_RCC_OscConfig+0x6f4>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	025b      	lsls	r3, r3, #9
 8001f68:	401a      	ands	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d10f      	bne.n	8001f92 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	23f0      	movs	r3, #240	; 0xf0
 8001f76:	039b      	lsls	r3, r3, #14
 8001f78:	401a      	ands	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	23c0      	movs	r3, #192	; 0xc0
 8001f86:	041b      	lsls	r3, r3, #16
 8001f88:	401a      	ands	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d001      	beq.n	8001f96 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	0018      	movs	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b00a      	add	sp, #40	; 0x28
 8001f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa0:	40021000 	.word	0x40021000

08001fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa4:	b5b0      	push	{r4, r5, r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e128      	b.n	800220a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb8:	4b96      	ldr	r3, [pc, #600]	; (8002214 <HAL_RCC_ClockConfig+0x270>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d91e      	bls.n	8002004 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc6:	4b93      	ldr	r3, [pc, #588]	; (8002214 <HAL_RCC_ClockConfig+0x270>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4393      	bics	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	4b90      	ldr	r3, [pc, #576]	; (8002214 <HAL_RCC_ClockConfig+0x270>)
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fd8:	f7ff f928 	bl	800122c <HAL_GetTick>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe0:	e009      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe2:	f7ff f923 	bl	800122c <HAL_GetTick>
 8001fe6:	0002      	movs	r2, r0
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	4a8a      	ldr	r2, [pc, #552]	; (8002218 <HAL_RCC_ClockConfig+0x274>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e109      	b.n	800220a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b87      	ldr	r3, [pc, #540]	; (8002214 <HAL_RCC_ClockConfig+0x270>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d1ee      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2202      	movs	r2, #2
 800200a:	4013      	ands	r3, r2
 800200c:	d009      	beq.n	8002022 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800200e:	4b83      	ldr	r3, [pc, #524]	; (800221c <HAL_RCC_ClockConfig+0x278>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	22f0      	movs	r2, #240	; 0xf0
 8002014:	4393      	bics	r3, r2
 8002016:	0019      	movs	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	4b7f      	ldr	r3, [pc, #508]	; (800221c <HAL_RCC_ClockConfig+0x278>)
 800201e:	430a      	orrs	r2, r1
 8002020:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2201      	movs	r2, #1
 8002028:	4013      	ands	r3, r2
 800202a:	d100      	bne.n	800202e <HAL_RCC_ClockConfig+0x8a>
 800202c:	e089      	b.n	8002142 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d107      	bne.n	8002046 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002036:	4b79      	ldr	r3, [pc, #484]	; (800221c <HAL_RCC_ClockConfig+0x278>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	029b      	lsls	r3, r3, #10
 800203e:	4013      	ands	r3, r2
 8002040:	d120      	bne.n	8002084 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e0e1      	b.n	800220a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b03      	cmp	r3, #3
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800204e:	4b73      	ldr	r3, [pc, #460]	; (800221c <HAL_RCC_ClockConfig+0x278>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	049b      	lsls	r3, r3, #18
 8002056:	4013      	ands	r3, r2
 8002058:	d114      	bne.n	8002084 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e0d5      	b.n	800220a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d106      	bne.n	8002074 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002066:	4b6d      	ldr	r3, [pc, #436]	; (800221c <HAL_RCC_ClockConfig+0x278>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2204      	movs	r2, #4
 800206c:	4013      	ands	r3, r2
 800206e:	d109      	bne.n	8002084 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0ca      	b.n	800220a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002074:	4b69      	ldr	r3, [pc, #420]	; (800221c <HAL_RCC_ClockConfig+0x278>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4013      	ands	r3, r2
 800207e:	d101      	bne.n	8002084 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0c2      	b.n	800220a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002084:	4b65      	ldr	r3, [pc, #404]	; (800221c <HAL_RCC_ClockConfig+0x278>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2203      	movs	r2, #3
 800208a:	4393      	bics	r3, r2
 800208c:	0019      	movs	r1, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	4b62      	ldr	r3, [pc, #392]	; (800221c <HAL_RCC_ClockConfig+0x278>)
 8002094:	430a      	orrs	r2, r1
 8002096:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002098:	f7ff f8c8 	bl	800122c <HAL_GetTick>
 800209c:	0003      	movs	r3, r0
 800209e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d111      	bne.n	80020cc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020a8:	e009      	b.n	80020be <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020aa:	f7ff f8bf 	bl	800122c <HAL_GetTick>
 80020ae:	0002      	movs	r2, r0
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	4a58      	ldr	r2, [pc, #352]	; (8002218 <HAL_RCC_ClockConfig+0x274>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e0a5      	b.n	800220a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020be:	4b57      	ldr	r3, [pc, #348]	; (800221c <HAL_RCC_ClockConfig+0x278>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	220c      	movs	r2, #12
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d1ef      	bne.n	80020aa <HAL_RCC_ClockConfig+0x106>
 80020ca:	e03a      	b.n	8002142 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d111      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d4:	e009      	b.n	80020ea <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d6:	f7ff f8a9 	bl	800122c <HAL_GetTick>
 80020da:	0002      	movs	r2, r0
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	4a4d      	ldr	r2, [pc, #308]	; (8002218 <HAL_RCC_ClockConfig+0x274>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e08f      	b.n	800220a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ea:	4b4c      	ldr	r3, [pc, #304]	; (800221c <HAL_RCC_ClockConfig+0x278>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	220c      	movs	r2, #12
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b0c      	cmp	r3, #12
 80020f4:	d1ef      	bne.n	80020d6 <HAL_RCC_ClockConfig+0x132>
 80020f6:	e024      	b.n	8002142 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d11b      	bne.n	8002138 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002100:	e009      	b.n	8002116 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002102:	f7ff f893 	bl	800122c <HAL_GetTick>
 8002106:	0002      	movs	r2, r0
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	4a42      	ldr	r2, [pc, #264]	; (8002218 <HAL_RCC_ClockConfig+0x274>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e079      	b.n	800220a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002116:	4b41      	ldr	r3, [pc, #260]	; (800221c <HAL_RCC_ClockConfig+0x278>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	220c      	movs	r2, #12
 800211c:	4013      	ands	r3, r2
 800211e:	2b04      	cmp	r3, #4
 8002120:	d1ef      	bne.n	8002102 <HAL_RCC_ClockConfig+0x15e>
 8002122:	e00e      	b.n	8002142 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002124:	f7ff f882 	bl	800122c <HAL_GetTick>
 8002128:	0002      	movs	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	4a3a      	ldr	r2, [pc, #232]	; (8002218 <HAL_RCC_ClockConfig+0x274>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e068      	b.n	800220a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002138:	4b38      	ldr	r3, [pc, #224]	; (800221c <HAL_RCC_ClockConfig+0x278>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	220c      	movs	r2, #12
 800213e:	4013      	ands	r3, r2
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002142:	4b34      	ldr	r3, [pc, #208]	; (8002214 <HAL_RCC_ClockConfig+0x270>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2201      	movs	r2, #1
 8002148:	4013      	ands	r3, r2
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d21e      	bcs.n	800218e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002150:	4b30      	ldr	r3, [pc, #192]	; (8002214 <HAL_RCC_ClockConfig+0x270>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2201      	movs	r2, #1
 8002156:	4393      	bics	r3, r2
 8002158:	0019      	movs	r1, r3
 800215a:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <HAL_RCC_ClockConfig+0x270>)
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002162:	f7ff f863 	bl	800122c <HAL_GetTick>
 8002166:	0003      	movs	r3, r0
 8002168:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	e009      	b.n	8002180 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216c:	f7ff f85e 	bl	800122c <HAL_GetTick>
 8002170:	0002      	movs	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	4a28      	ldr	r2, [pc, #160]	; (8002218 <HAL_RCC_ClockConfig+0x274>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e044      	b.n	800220a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002180:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_RCC_ClockConfig+0x270>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2201      	movs	r2, #1
 8002186:	4013      	ands	r3, r2
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d1ee      	bne.n	800216c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2204      	movs	r2, #4
 8002194:	4013      	ands	r3, r2
 8002196:	d009      	beq.n	80021ac <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002198:	4b20      	ldr	r3, [pc, #128]	; (800221c <HAL_RCC_ClockConfig+0x278>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4a20      	ldr	r2, [pc, #128]	; (8002220 <HAL_RCC_ClockConfig+0x27c>)
 800219e:	4013      	ands	r3, r2
 80021a0:	0019      	movs	r1, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	4b1d      	ldr	r3, [pc, #116]	; (800221c <HAL_RCC_ClockConfig+0x278>)
 80021a8:	430a      	orrs	r2, r1
 80021aa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2208      	movs	r2, #8
 80021b2:	4013      	ands	r3, r2
 80021b4:	d00a      	beq.n	80021cc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021b6:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_RCC_ClockConfig+0x278>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	4a1a      	ldr	r2, [pc, #104]	; (8002224 <HAL_RCC_ClockConfig+0x280>)
 80021bc:	4013      	ands	r3, r2
 80021be:	0019      	movs	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	00da      	lsls	r2, r3, #3
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_RCC_ClockConfig+0x278>)
 80021c8:	430a      	orrs	r2, r1
 80021ca:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021cc:	f000 f832 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80021d0:	0001      	movs	r1, r0
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_RCC_ClockConfig+0x278>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	091b      	lsrs	r3, r3, #4
 80021d8:	220f      	movs	r2, #15
 80021da:	4013      	ands	r3, r2
 80021dc:	4a12      	ldr	r2, [pc, #72]	; (8002228 <HAL_RCC_ClockConfig+0x284>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	000a      	movs	r2, r1
 80021e2:	40da      	lsrs	r2, r3
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_RCC_ClockConfig+0x288>)
 80021e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_RCC_ClockConfig+0x28c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	250b      	movs	r5, #11
 80021ee:	197c      	adds	r4, r7, r5
 80021f0:	0018      	movs	r0, r3
 80021f2:	f7fe ffd5 	bl	80011a0 <HAL_InitTick>
 80021f6:	0003      	movs	r3, r0
 80021f8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80021fa:	197b      	adds	r3, r7, r5
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002202:	197b      	adds	r3, r7, r5
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	e000      	b.n	800220a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b004      	add	sp, #16
 8002210:	bdb0      	pop	{r4, r5, r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	40022000 	.word	0x40022000
 8002218:	00001388 	.word	0x00001388
 800221c:	40021000 	.word	0x40021000
 8002220:	fffff8ff 	.word	0xfffff8ff
 8002224:	ffffc7ff 	.word	0xffffc7ff
 8002228:	08005154 	.word	0x08005154
 800222c:	20000000 	.word	0x20000000
 8002230:	20000004 	.word	0x20000004

08002234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	b5b0      	push	{r4, r5, r7, lr}
 8002236:	b08e      	sub	sp, #56	; 0x38
 8002238:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800223a:	4b4c      	ldr	r3, [pc, #304]	; (800236c <HAL_RCC_GetSysClockFreq+0x138>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002242:	230c      	movs	r3, #12
 8002244:	4013      	ands	r3, r2
 8002246:	2b0c      	cmp	r3, #12
 8002248:	d014      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x40>
 800224a:	d900      	bls.n	800224e <HAL_RCC_GetSysClockFreq+0x1a>
 800224c:	e07b      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x112>
 800224e:	2b04      	cmp	r3, #4
 8002250:	d002      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0x24>
 8002252:	2b08      	cmp	r3, #8
 8002254:	d00b      	beq.n	800226e <HAL_RCC_GetSysClockFreq+0x3a>
 8002256:	e076      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002258:	4b44      	ldr	r3, [pc, #272]	; (800236c <HAL_RCC_GetSysClockFreq+0x138>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2210      	movs	r2, #16
 800225e:	4013      	ands	r3, r2
 8002260:	d002      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002262:	4b43      	ldr	r3, [pc, #268]	; (8002370 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002264:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002266:	e07c      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002268:	4b42      	ldr	r3, [pc, #264]	; (8002374 <HAL_RCC_GetSysClockFreq+0x140>)
 800226a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800226c:	e079      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800226e:	4b42      	ldr	r3, [pc, #264]	; (8002378 <HAL_RCC_GetSysClockFreq+0x144>)
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002272:	e076      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002276:	0c9a      	lsrs	r2, r3, #18
 8002278:	230f      	movs	r3, #15
 800227a:	401a      	ands	r2, r3
 800227c:	4b3f      	ldr	r3, [pc, #252]	; (800237c <HAL_RCC_GetSysClockFreq+0x148>)
 800227e:	5c9b      	ldrb	r3, [r3, r2]
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	0d9a      	lsrs	r2, r3, #22
 8002286:	2303      	movs	r3, #3
 8002288:	4013      	ands	r3, r2
 800228a:	3301      	adds	r3, #1
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800228e:	4b37      	ldr	r3, [pc, #220]	; (800236c <HAL_RCC_GetSysClockFreq+0x138>)
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	025b      	lsls	r3, r3, #9
 8002296:	4013      	ands	r3, r2
 8002298:	d01a      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800229a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	4a35      	ldr	r2, [pc, #212]	; (8002378 <HAL_RCC_GetSysClockFreq+0x144>)
 80022a4:	2300      	movs	r3, #0
 80022a6:	69b8      	ldr	r0, [r7, #24]
 80022a8:	69f9      	ldr	r1, [r7, #28]
 80022aa:	f7fd ffe1 	bl	8000270 <__aeabi_lmul>
 80022ae:	0002      	movs	r2, r0
 80022b0:	000b      	movs	r3, r1
 80022b2:	0010      	movs	r0, r2
 80022b4:	0019      	movs	r1, r3
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f7fd ffb5 	bl	8000230 <__aeabi_uldivmod>
 80022c6:	0002      	movs	r2, r0
 80022c8:	000b      	movs	r3, r1
 80022ca:	0013      	movs	r3, r2
 80022cc:	637b      	str	r3, [r7, #52]	; 0x34
 80022ce:	e037      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80022d0:	4b26      	ldr	r3, [pc, #152]	; (800236c <HAL_RCC_GetSysClockFreq+0x138>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2210      	movs	r2, #16
 80022d6:	4013      	ands	r3, r2
 80022d8:	d01a      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80022da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4a23      	ldr	r2, [pc, #140]	; (8002370 <HAL_RCC_GetSysClockFreq+0x13c>)
 80022e4:	2300      	movs	r3, #0
 80022e6:	68b8      	ldr	r0, [r7, #8]
 80022e8:	68f9      	ldr	r1, [r7, #12]
 80022ea:	f7fd ffc1 	bl	8000270 <__aeabi_lmul>
 80022ee:	0002      	movs	r2, r0
 80022f0:	000b      	movs	r3, r1
 80022f2:	0010      	movs	r0, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	603b      	str	r3, [r7, #0]
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f7fd ff95 	bl	8000230 <__aeabi_uldivmod>
 8002306:	0002      	movs	r2, r0
 8002308:	000b      	movs	r3, r1
 800230a:	0013      	movs	r3, r2
 800230c:	637b      	str	r3, [r7, #52]	; 0x34
 800230e:	e017      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002312:	0018      	movs	r0, r3
 8002314:	2300      	movs	r3, #0
 8002316:	0019      	movs	r1, r3
 8002318:	4a16      	ldr	r2, [pc, #88]	; (8002374 <HAL_RCC_GetSysClockFreq+0x140>)
 800231a:	2300      	movs	r3, #0
 800231c:	f7fd ffa8 	bl	8000270 <__aeabi_lmul>
 8002320:	0002      	movs	r2, r0
 8002322:	000b      	movs	r3, r1
 8002324:	0010      	movs	r0, r2
 8002326:	0019      	movs	r1, r3
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	001c      	movs	r4, r3
 800232c:	2300      	movs	r3, #0
 800232e:	001d      	movs	r5, r3
 8002330:	0022      	movs	r2, r4
 8002332:	002b      	movs	r3, r5
 8002334:	f7fd ff7c 	bl	8000230 <__aeabi_uldivmod>
 8002338:	0002      	movs	r2, r0
 800233a:	000b      	movs	r3, r1
 800233c:	0013      	movs	r3, r2
 800233e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002344:	e00d      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_RCC_GetSysClockFreq+0x138>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	0b5b      	lsrs	r3, r3, #13
 800234c:	2207      	movs	r2, #7
 800234e:	4013      	ands	r3, r2
 8002350:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	3301      	adds	r3, #1
 8002356:	2280      	movs	r2, #128	; 0x80
 8002358:	0212      	lsls	r2, r2, #8
 800235a:	409a      	lsls	r2, r3
 800235c:	0013      	movs	r3, r2
 800235e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002360:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002364:	0018      	movs	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	b00e      	add	sp, #56	; 0x38
 800236a:	bdb0      	pop	{r4, r5, r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	003d0900 	.word	0x003d0900
 8002374:	00f42400 	.word	0x00f42400
 8002378:	007a1200 	.word	0x007a1200
 800237c:	0800516c 	.word	0x0800516c

08002380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002384:	4b02      	ldr	r3, [pc, #8]	; (8002390 <HAL_RCC_GetHCLKFreq+0x10>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	0018      	movs	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	20000000 	.word	0x20000000

08002394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002398:	f7ff fff2 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 800239c:	0001      	movs	r1, r0
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	0a1b      	lsrs	r3, r3, #8
 80023a4:	2207      	movs	r2, #7
 80023a6:	4013      	ands	r3, r2
 80023a8:	4a04      	ldr	r2, [pc, #16]	; (80023bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80023aa:	5cd3      	ldrb	r3, [r2, r3]
 80023ac:	40d9      	lsrs	r1, r3
 80023ae:	000b      	movs	r3, r1
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	40021000 	.word	0x40021000
 80023bc:	08005164 	.word	0x08005164

080023c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023c4:	f7ff ffdc 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80023c8:	0001      	movs	r1, r0
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	0adb      	lsrs	r3, r3, #11
 80023d0:	2207      	movs	r2, #7
 80023d2:	4013      	ands	r3, r2
 80023d4:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023d6:	5cd3      	ldrb	r3, [r2, r3]
 80023d8:	40d9      	lsrs	r1, r3
 80023da:	000b      	movs	r3, r1
}
 80023dc:	0018      	movs	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	40021000 	.word	0x40021000
 80023e8:	08005164 	.word	0x08005164

080023ec <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80023f4:	2017      	movs	r0, #23
 80023f6:	183b      	adds	r3, r7, r0
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2220      	movs	r2, #32
 8002402:	4013      	ands	r3, r2
 8002404:	d100      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002406:	e0c2      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002408:	4b81      	ldr	r3, [pc, #516]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800240a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	055b      	lsls	r3, r3, #21
 8002410:	4013      	ands	r3, r2
 8002412:	d109      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002414:	4b7e      	ldr	r3, [pc, #504]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002418:	4b7d      	ldr	r3, [pc, #500]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800241a:	2180      	movs	r1, #128	; 0x80
 800241c:	0549      	lsls	r1, r1, #21
 800241e:	430a      	orrs	r2, r1
 8002420:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002422:	183b      	adds	r3, r7, r0
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002428:	4b7a      	ldr	r3, [pc, #488]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4013      	ands	r3, r2
 8002432:	d11a      	bne.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002434:	4b77      	ldr	r3, [pc, #476]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b76      	ldr	r3, [pc, #472]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800243a:	2180      	movs	r1, #128	; 0x80
 800243c:	0049      	lsls	r1, r1, #1
 800243e:	430a      	orrs	r2, r1
 8002440:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002442:	f7fe fef3 	bl	800122c <HAL_GetTick>
 8002446:	0003      	movs	r3, r0
 8002448:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244a:	e008      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244c:	f7fe feee 	bl	800122c <HAL_GetTick>
 8002450:	0002      	movs	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	; 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e0d4      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245e:	4b6d      	ldr	r3, [pc, #436]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4013      	ands	r3, r2
 8002468:	d0f0      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800246a:	4b69      	ldr	r3, [pc, #420]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	23c0      	movs	r3, #192	; 0xc0
 8002470:	039b      	lsls	r3, r3, #14
 8002472:	4013      	ands	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	23c0      	movs	r3, #192	; 0xc0
 800247c:	039b      	lsls	r3, r3, #14
 800247e:	4013      	ands	r3, r2
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	429a      	cmp	r2, r3
 8002484:	d013      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	23c0      	movs	r3, #192	; 0xc0
 800248c:	029b      	lsls	r3, r3, #10
 800248e:	401a      	ands	r2, r3
 8002490:	23c0      	movs	r3, #192	; 0xc0
 8002492:	029b      	lsls	r3, r3, #10
 8002494:	429a      	cmp	r2, r3
 8002496:	d10a      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002498:	4b5d      	ldr	r3, [pc, #372]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	029b      	lsls	r3, r3, #10
 80024a0:	401a      	ands	r2, r3
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	029b      	lsls	r3, r3, #10
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d101      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e0ac      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80024ae:	4b58      	ldr	r3, [pc, #352]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024b2:	23c0      	movs	r3, #192	; 0xc0
 80024b4:	029b      	lsls	r3, r3, #10
 80024b6:	4013      	ands	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d03b      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	23c0      	movs	r3, #192	; 0xc0
 80024c6:	029b      	lsls	r3, r3, #10
 80024c8:	4013      	ands	r3, r2
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d033      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2220      	movs	r2, #32
 80024d6:	4013      	ands	r3, r2
 80024d8:	d02e      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80024da:	4b4d      	ldr	r3, [pc, #308]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024de:	4a4e      	ldr	r2, [pc, #312]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024e4:	4b4a      	ldr	r3, [pc, #296]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024e8:	4b49      	ldr	r3, [pc, #292]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024ea:	2180      	movs	r1, #128	; 0x80
 80024ec:	0309      	lsls	r1, r1, #12
 80024ee:	430a      	orrs	r2, r1
 80024f0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024f2:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024f6:	4b46      	ldr	r3, [pc, #280]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024f8:	4948      	ldr	r1, [pc, #288]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024fa:	400a      	ands	r2, r1
 80024fc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80024fe:	4b44      	ldr	r3, [pc, #272]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4013      	ands	r3, r2
 800250c:	d014      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7fe fe8d 	bl	800122c <HAL_GetTick>
 8002512:	0003      	movs	r3, r0
 8002514:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002516:	e009      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002518:	f7fe fe88 	bl	800122c <HAL_GetTick>
 800251c:	0002      	movs	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	4a3f      	ldr	r2, [pc, #252]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d901      	bls.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e06d      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800252c:	4b38      	ldr	r3, [pc, #224]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800252e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4013      	ands	r3, r2
 8002536:	d0ef      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	23c0      	movs	r3, #192	; 0xc0
 800253e:	029b      	lsls	r3, r3, #10
 8002540:	401a      	ands	r2, r3
 8002542:	23c0      	movs	r3, #192	; 0xc0
 8002544:	029b      	lsls	r3, r3, #10
 8002546:	429a      	cmp	r2, r3
 8002548:	d10c      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800254a:	4b31      	ldr	r3, [pc, #196]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a35      	ldr	r2, [pc, #212]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002550:	4013      	ands	r3, r2
 8002552:	0019      	movs	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	23c0      	movs	r3, #192	; 0xc0
 800255a:	039b      	lsls	r3, r3, #14
 800255c:	401a      	ands	r2, r3
 800255e:	4b2c      	ldr	r3, [pc, #176]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002560:	430a      	orrs	r2, r1
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	4b2a      	ldr	r3, [pc, #168]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002566:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	23c0      	movs	r3, #192	; 0xc0
 800256e:	029b      	lsls	r3, r3, #10
 8002570:	401a      	ands	r2, r3
 8002572:	4b27      	ldr	r3, [pc, #156]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002574:	430a      	orrs	r2, r1
 8002576:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002578:	2317      	movs	r3, #23
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d105      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002582:	4b23      	ldr	r3, [pc, #140]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002586:	4b22      	ldr	r3, [pc, #136]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002588:	4927      	ldr	r1, [pc, #156]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800258a:	400a      	ands	r2, r1
 800258c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2202      	movs	r2, #2
 8002594:	4013      	ands	r3, r2
 8002596:	d009      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800259a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259c:	220c      	movs	r2, #12
 800259e:	4393      	bics	r3, r2
 80025a0:	0019      	movs	r1, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80025a8:	430a      	orrs	r2, r1
 80025aa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2204      	movs	r2, #4
 80025b2:	4013      	ands	r3, r2
 80025b4:	d009      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b6:	4b16      	ldr	r3, [pc, #88]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	4a1c      	ldr	r2, [pc, #112]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025bc:	4013      	ands	r3, r2
 80025be:	0019      	movs	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80025c6:	430a      	orrs	r2, r1
 80025c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2208      	movs	r2, #8
 80025d0:	4013      	ands	r3, r2
 80025d2:	d009      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80025d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d8:	4a15      	ldr	r2, [pc, #84]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80025da:	4013      	ands	r3, r2
 80025dc:	0019      	movs	r1, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80025e4:	430a      	orrs	r2, r1
 80025e6:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2280      	movs	r2, #128	; 0x80
 80025ee:	4013      	ands	r3, r2
 80025f0:	d009      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80025f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f6:	4a0f      	ldr	r2, [pc, #60]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	0019      	movs	r1, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002602:	430a      	orrs	r2, r1
 8002604:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	0018      	movs	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	b006      	add	sp, #24
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000
 8002614:	40007000 	.word	0x40007000
 8002618:	fffcffff 	.word	0xfffcffff
 800261c:	fff7ffff 	.word	0xfff7ffff
 8002620:	00001388 	.word	0x00001388
 8002624:	ffcfffff 	.word	0xffcfffff
 8002628:	efffffff 	.word	0xefffffff
 800262c:	fffff3ff 	.word	0xfffff3ff
 8002630:	ffffcfff 	.word	0xffffcfff
 8002634:	fff3ffff 	.word	0xfff3ffff

08002638 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e08e      	b.n	8002768 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2221      	movs	r2, #33	; 0x21
 800264e:	5c9b      	ldrb	r3, [r3, r2]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d107      	bne.n	8002666 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2220      	movs	r2, #32
 800265a:	2100      	movs	r1, #0
 800265c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	0018      	movs	r0, r3
 8002662:	f7fe fc17 	bl	8000e94 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2221      	movs	r2, #33	; 0x21
 800266a:	2102      	movs	r1, #2
 800266c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	22ca      	movs	r2, #202	; 0xca
 8002674:	625a      	str	r2, [r3, #36]	; 0x24
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2253      	movs	r2, #83	; 0x53
 800267c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	0018      	movs	r0, r3
 8002682:	f000 fac6 	bl	8002c12 <RTC_EnterInitMode>
 8002686:	1e03      	subs	r3, r0, #0
 8002688:	d009      	beq.n	800269e <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	22ff      	movs	r2, #255	; 0xff
 8002690:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2221      	movs	r2, #33	; 0x21
 8002696:	2104      	movs	r1, #4
 8002698:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e064      	b.n	8002768 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4931      	ldr	r1, [pc, #196]	; (8002770 <HAL_RTC_Init+0x138>)
 80026aa:	400a      	ands	r2, r1
 80026ac:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6899      	ldr	r1, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	68d2      	ldr	r2, [r2, #12]
 80026d4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6919      	ldr	r1, [r3, #16]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	041a      	lsls	r2, r3, #16
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2180      	movs	r1, #128	; 0x80
 80026f6:	438a      	bics	r2, r1
 80026f8:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2103      	movs	r1, #3
 8002706:	438a      	bics	r2, r1
 8002708:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69da      	ldr	r2, [r3, #28]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2220      	movs	r2, #32
 800272a:	4013      	ands	r3, r2
 800272c:	d113      	bne.n	8002756 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	0018      	movs	r0, r3
 8002732:	f000 fa3b 	bl	8002bac <HAL_RTC_WaitForSynchro>
 8002736:	1e03      	subs	r3, r0, #0
 8002738:	d00d      	beq.n	8002756 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	22ff      	movs	r2, #255	; 0xff
 8002740:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2221      	movs	r2, #33	; 0x21
 8002746:	2104      	movs	r1, #4
 8002748:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2220      	movs	r2, #32
 800274e:	2100      	movs	r1, #0
 8002750:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e008      	b.n	8002768 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	22ff      	movs	r2, #255	; 0xff
 800275c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2221      	movs	r2, #33	; 0x21
 8002762:	2101      	movs	r1, #1
 8002764:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002766:	2300      	movs	r3, #0
  }
}
 8002768:	0018      	movs	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	b002      	add	sp, #8
 800276e:	bd80      	pop	{r7, pc}
 8002770:	ff8fffbf 	.word	0xff8fffbf

08002774 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002774:	b590      	push	{r4, r7, lr}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	5c9b      	ldrb	r3, [r3, r2]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_RTC_SetTime+0x1a>
 800278a:	2302      	movs	r3, #2
 800278c:	e0ad      	b.n	80028ea <HAL_RTC_SetTime+0x176>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	2101      	movs	r1, #1
 8002794:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2221      	movs	r2, #33	; 0x21
 800279a:	2102      	movs	r1, #2
 800279c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d125      	bne.n	80027f0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2240      	movs	r2, #64	; 0x40
 80027ac:	4013      	ands	r3, r2
 80027ae:	d102      	bne.n	80027b6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2200      	movs	r2, #0
 80027b4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	0018      	movs	r0, r3
 80027bc:	f000 fa53 	bl	8002c66 <RTC_ByteToBcd2>
 80027c0:	0003      	movs	r3, r0
 80027c2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	785b      	ldrb	r3, [r3, #1]
 80027c8:	0018      	movs	r0, r3
 80027ca:	f000 fa4c 	bl	8002c66 <RTC_ByteToBcd2>
 80027ce:	0003      	movs	r3, r0
 80027d0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80027d2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	789b      	ldrb	r3, [r3, #2]
 80027d8:	0018      	movs	r0, r3
 80027da:	f000 fa44 	bl	8002c66 <RTC_ByteToBcd2>
 80027de:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80027e0:	0022      	movs	r2, r4
 80027e2:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	78db      	ldrb	r3, [r3, #3]
 80027e8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80027ea:	4313      	orrs	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e017      	b.n	8002820 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2240      	movs	r2, #64	; 0x40
 80027f8:	4013      	ands	r3, r2
 80027fa:	d102      	bne.n	8002802 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2200      	movs	r2, #0
 8002800:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	785b      	ldrb	r3, [r3, #1]
 800280c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800280e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002814:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	78db      	ldrb	r3, [r3, #3]
 800281a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	22ca      	movs	r2, #202	; 0xca
 8002826:	625a      	str	r2, [r3, #36]	; 0x24
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2253      	movs	r2, #83	; 0x53
 800282e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	0018      	movs	r0, r3
 8002834:	f000 f9ed 	bl	8002c12 <RTC_EnterInitMode>
 8002838:	1e03      	subs	r3, r0, #0
 800283a:	d00d      	beq.n	8002858 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	22ff      	movs	r2, #255	; 0xff
 8002842:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2221      	movs	r2, #33	; 0x21
 8002848:	2104      	movs	r1, #4
 800284a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2220      	movs	r2, #32
 8002850:	2100      	movs	r1, #0
 8002852:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e048      	b.n	80028ea <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	4925      	ldr	r1, [pc, #148]	; (80028f4 <HAL_RTC_SetTime+0x180>)
 8002860:	400a      	ands	r2, r1
 8002862:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4922      	ldr	r1, [pc, #136]	; (80028f8 <HAL_RTC_SetTime+0x184>)
 8002870:	400a      	ands	r2, r1
 8002872:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6899      	ldr	r1, [r3, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	431a      	orrs	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2180      	movs	r1, #128	; 0x80
 8002898:	438a      	bics	r2, r1
 800289a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2220      	movs	r2, #32
 80028a4:	4013      	ands	r3, r2
 80028a6:	d113      	bne.n	80028d0 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	0018      	movs	r0, r3
 80028ac:	f000 f97e 	bl	8002bac <HAL_RTC_WaitForSynchro>
 80028b0:	1e03      	subs	r3, r0, #0
 80028b2:	d00d      	beq.n	80028d0 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	22ff      	movs	r2, #255	; 0xff
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2221      	movs	r2, #33	; 0x21
 80028c0:	2104      	movs	r1, #4
 80028c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	2100      	movs	r1, #0
 80028ca:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e00c      	b.n	80028ea <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	22ff      	movs	r2, #255	; 0xff
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2221      	movs	r2, #33	; 0x21
 80028dc:	2101      	movs	r1, #1
 80028de:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2220      	movs	r2, #32
 80028e4:	2100      	movs	r1, #0
 80028e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028e8:	2300      	movs	r3, #0
  }
}
 80028ea:	0018      	movs	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b007      	add	sp, #28
 80028f0:	bd90      	pop	{r4, r7, pc}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	007f7f7f 	.word	0x007f7f7f
 80028f8:	fffbffff 	.word	0xfffbffff

080028fc <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	045b      	lsls	r3, r3, #17
 800291a:	0c5a      	lsrs	r2, r3, #17
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a22      	ldr	r2, [pc, #136]	; (80029b0 <HAL_RTC_GetTime+0xb4>)
 8002928:	4013      	ands	r3, r2
 800292a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	0c1b      	lsrs	r3, r3, #16
 8002930:	b2db      	uxtb	r3, r3
 8002932:	223f      	movs	r2, #63	; 0x3f
 8002934:	4013      	ands	r3, r2
 8002936:	b2da      	uxtb	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	0a1b      	lsrs	r3, r3, #8
 8002940:	b2db      	uxtb	r3, r3
 8002942:	227f      	movs	r2, #127	; 0x7f
 8002944:	4013      	ands	r3, r2
 8002946:	b2da      	uxtb	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	227f      	movs	r2, #127	; 0x7f
 8002952:	4013      	ands	r3, r2
 8002954:	b2da      	uxtb	r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	0c1b      	lsrs	r3, r3, #16
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2240      	movs	r2, #64	; 0x40
 8002962:	4013      	ands	r3, r2
 8002964:	b2da      	uxtb	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d11a      	bne.n	80029a6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	0018      	movs	r0, r3
 8002976:	f000 f99e 	bl	8002cb6 <RTC_Bcd2ToByte>
 800297a:	0003      	movs	r3, r0
 800297c:	001a      	movs	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	785b      	ldrb	r3, [r3, #1]
 8002986:	0018      	movs	r0, r3
 8002988:	f000 f995 	bl	8002cb6 <RTC_Bcd2ToByte>
 800298c:	0003      	movs	r3, r0
 800298e:	001a      	movs	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	789b      	ldrb	r3, [r3, #2]
 8002998:	0018      	movs	r0, r3
 800299a:	f000 f98c 	bl	8002cb6 <RTC_Bcd2ToByte>
 800299e:	0003      	movs	r3, r0
 80029a0:	001a      	movs	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	0018      	movs	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	b006      	add	sp, #24
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	007f7f7f 	.word	0x007f7f7f

080029b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2220      	movs	r2, #32
 80029c4:	5c9b      	ldrb	r3, [r3, r2]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_RTC_SetDate+0x1a>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e099      	b.n	8002b02 <HAL_RTC_SetDate+0x14e>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2220      	movs	r2, #32
 80029d2:	2101      	movs	r1, #1
 80029d4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2221      	movs	r2, #33	; 0x21
 80029da:	2102      	movs	r1, #2
 80029dc:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10e      	bne.n	8002a02 <HAL_RTC_SetDate+0x4e>
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	785b      	ldrb	r3, [r3, #1]
 80029e8:	001a      	movs	r2, r3
 80029ea:	2310      	movs	r3, #16
 80029ec:	4013      	ands	r3, r2
 80029ee:	d008      	beq.n	8002a02 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	785b      	ldrb	r3, [r3, #1]
 80029f4:	2210      	movs	r2, #16
 80029f6:	4393      	bics	r3, r2
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	330a      	adds	r3, #10
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d11c      	bne.n	8002a42 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	78db      	ldrb	r3, [r3, #3]
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f000 f92a 	bl	8002c66 <RTC_ByteToBcd2>
 8002a12:	0003      	movs	r3, r0
 8002a14:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	785b      	ldrb	r3, [r3, #1]
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 f923 	bl	8002c66 <RTC_ByteToBcd2>
 8002a20:	0003      	movs	r3, r0
 8002a22:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002a24:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	789b      	ldrb	r3, [r3, #2]
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f000 f91b 	bl	8002c66 <RTC_ByteToBcd2>
 8002a30:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002a32:	0022      	movs	r2, r4
 8002a34:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	e00e      	b.n	8002a60 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	78db      	ldrb	r3, [r3, #3]
 8002a46:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	785b      	ldrb	r3, [r3, #1]
 8002a4c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002a4e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002a54:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	22ca      	movs	r2, #202	; 0xca
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2253      	movs	r2, #83	; 0x53
 8002a6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	0018      	movs	r0, r3
 8002a74:	f000 f8cd 	bl	8002c12 <RTC_EnterInitMode>
 8002a78:	1e03      	subs	r3, r0, #0
 8002a7a:	d00d      	beq.n	8002a98 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	22ff      	movs	r2, #255	; 0xff
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2221      	movs	r2, #33	; 0x21
 8002a88:	2104      	movs	r1, #4
 8002a8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	2100      	movs	r1, #0
 8002a92:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e034      	b.n	8002b02 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	491b      	ldr	r1, [pc, #108]	; (8002b0c <HAL_RTC_SetDate+0x158>)
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2180      	movs	r1, #128	; 0x80
 8002ab0:	438a      	bics	r2, r1
 8002ab2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2220      	movs	r2, #32
 8002abc:	4013      	ands	r3, r2
 8002abe:	d113      	bne.n	8002ae8 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f000 f872 	bl	8002bac <HAL_RTC_WaitForSynchro>
 8002ac8:	1e03      	subs	r3, r0, #0
 8002aca:	d00d      	beq.n	8002ae8 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	22ff      	movs	r2, #255	; 0xff
 8002ad2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2221      	movs	r2, #33	; 0x21
 8002ad8:	2104      	movs	r1, #4
 8002ada:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e00c      	b.n	8002b02 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	22ff      	movs	r2, #255	; 0xff
 8002aee:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2221      	movs	r2, #33	; 0x21
 8002af4:	2101      	movs	r1, #1
 8002af6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	2100      	movs	r1, #0
 8002afe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b00:	2300      	movs	r3, #0
  }
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b007      	add	sp, #28
 8002b08:	bd90      	pop	{r4, r7, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	00ffff3f 	.word	0x00ffff3f

08002b10 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4a21      	ldr	r2, [pc, #132]	; (8002ba8 <HAL_RTC_GetDate+0x98>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	0c1b      	lsrs	r3, r3, #16
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	221f      	movs	r2, #31
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	223f      	movs	r2, #63	; 0x3f
 8002b48:	4013      	ands	r3, r2
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	0b5b      	lsrs	r3, r3, #13
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2207      	movs	r2, #7
 8002b58:	4013      	ands	r3, r2
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d11a      	bne.n	8002b9c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	78db      	ldrb	r3, [r3, #3]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f000 f8a3 	bl	8002cb6 <RTC_Bcd2ToByte>
 8002b70:	0003      	movs	r3, r0
 8002b72:	001a      	movs	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	785b      	ldrb	r3, [r3, #1]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f000 f89a 	bl	8002cb6 <RTC_Bcd2ToByte>
 8002b82:	0003      	movs	r3, r0
 8002b84:	001a      	movs	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	789b      	ldrb	r3, [r3, #2]
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f000 f891 	bl	8002cb6 <RTC_Bcd2ToByte>
 8002b94:	0003      	movs	r3, r0
 8002b96:	001a      	movs	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b006      	add	sp, #24
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	00ffff3f 	.word	0x00ffff3f

08002bac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	21a0      	movs	r1, #160	; 0xa0
 8002bc0:	438a      	bics	r2, r1
 8002bc2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002bc4:	f7fe fb32 	bl	800122c <HAL_GetTick>
 8002bc8:	0003      	movs	r3, r0
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002bcc:	e00a      	b.n	8002be4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002bce:	f7fe fb2d 	bl	800122c <HAL_GetTick>
 8002bd2:	0002      	movs	r2, r0
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1ad2      	subs	r2, r2, r3
 8002bd8:	23fa      	movs	r3, #250	; 0xfa
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d901      	bls.n	8002be4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e006      	b.n	8002bf2 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	4013      	ands	r3, r2
 8002bee:	d0ee      	beq.n	8002bce <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b004      	add	sp, #16
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_RTC_GetState>:
  * @brief  Return the RTC handle state.
  * @param  hrtc RTC handle
  * @retval HAL state
  */
HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef *hrtc)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  /* Return RTC handle state */
  return hrtc->State;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2221      	movs	r2, #33	; 0x21
 8002c06:	5c9b      	ldrb	r3, [r3, r2]
 8002c08:	b2db      	uxtb	r3, r3
}
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b002      	add	sp, #8
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2240      	movs	r2, #64	; 0x40
 8002c22:	4013      	ands	r3, r2
 8002c24:	d11a      	bne.n	8002c5c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	4252      	negs	r2, r2
 8002c2e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002c30:	f7fe fafc 	bl	800122c <HAL_GetTick>
 8002c34:	0003      	movs	r3, r0
 8002c36:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002c38:	e00a      	b.n	8002c50 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002c3a:	f7fe faf7 	bl	800122c <HAL_GetTick>
 8002c3e:	0002      	movs	r2, r0
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	1ad2      	subs	r2, r2, r3
 8002c44:	23fa      	movs	r3, #250	; 0xfa
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d901      	bls.n	8002c50 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e006      	b.n	8002c5e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	2240      	movs	r2, #64	; 0x40
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d0ee      	beq.n	8002c3a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	0018      	movs	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	b004      	add	sp, #16
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	0002      	movs	r2, r0
 8002c6e:	1dfb      	adds	r3, r7, #7
 8002c70:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002c76:	230b      	movs	r3, #11
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	1dfa      	adds	r2, r7, #7
 8002c7c:	7812      	ldrb	r2, [r2, #0]
 8002c7e:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8002c80:	e008      	b.n	8002c94 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3301      	adds	r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002c88:	220b      	movs	r2, #11
 8002c8a:	18bb      	adds	r3, r7, r2
 8002c8c:	18ba      	adds	r2, r7, r2
 8002c8e:	7812      	ldrb	r2, [r2, #0]
 8002c90:	3a0a      	subs	r2, #10
 8002c92:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8002c94:	210b      	movs	r1, #11
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b09      	cmp	r3, #9
 8002c9c:	d8f1      	bhi.n	8002c82 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	187b      	adds	r3, r7, r1
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	b2db      	uxtb	r3, r3
}
 8002cae:	0018      	movs	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b004      	add	sp, #16
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	1dfb      	adds	r3, r7, #7
 8002cc0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002cc2:	1dfb      	adds	r3, r7, #7
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	091b      	lsrs	r3, r3, #4
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	001a      	movs	r2, r3
 8002ccc:	0013      	movs	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	189b      	adds	r3, r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	1dfb      	adds	r3, r7, #7
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	210f      	movs	r1, #15
 8002ce0:	400b      	ands	r3, r1
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	18d3      	adds	r3, r2, r3
 8002ce6:	b2db      	uxtb	r3, r3
}
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b004      	add	sp, #16
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e07b      	b.n	8002dfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d109      	bne.n	8002d1e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	2382      	movs	r3, #130	; 0x82
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d009      	beq.n	8002d2a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	61da      	str	r2, [r3, #28]
 8002d1c:	e005      	b.n	8002d2a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2251      	movs	r2, #81	; 0x51
 8002d34:	5c9b      	ldrb	r3, [r3, r2]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d107      	bne.n	8002d4c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2250      	movs	r2, #80	; 0x50
 8002d40:	2100      	movs	r1, #0
 8002d42:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	0018      	movs	r0, r3
 8002d48:	f7fe f8bc 	bl	8000ec4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2251      	movs	r2, #81	; 0x51
 8002d50:	2102      	movs	r1, #2
 8002d52:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2140      	movs	r1, #64	; 0x40
 8002d60:	438a      	bics	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	2382      	movs	r3, #130	; 0x82
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	401a      	ands	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6899      	ldr	r1, [r3, #8]
 8002d72:	2384      	movs	r3, #132	; 0x84
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	400b      	ands	r3, r1
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68d9      	ldr	r1, [r3, #12]
 8002d7e:	2380      	movs	r3, #128	; 0x80
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	400b      	ands	r3, r1
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2102      	movs	r1, #2
 8002d8c:	400b      	ands	r3, r1
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	2101      	movs	r1, #1
 8002d96:	400b      	ands	r3, r1
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6999      	ldr	r1, [r3, #24]
 8002d9e:	2380      	movs	r3, #128	; 0x80
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	400b      	ands	r3, r1
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	2138      	movs	r1, #56	; 0x38
 8002dac:	400b      	ands	r3, r1
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	2180      	movs	r1, #128	; 0x80
 8002db6:	400b      	ands	r3, r1
 8002db8:	431a      	orrs	r2, r3
 8002dba:	0011      	movs	r1, r2
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dc0:	2380      	movs	r3, #128	; 0x80
 8002dc2:	019b      	lsls	r3, r3, #6
 8002dc4:	401a      	ands	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	0c1b      	lsrs	r3, r3, #16
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	0019      	movs	r1, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	2210      	movs	r2, #16
 8002de0:	401a      	ands	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2251      	movs	r2, #81	; 0x51
 8002df4:	2101      	movs	r1, #1
 8002df6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b002      	add	sp, #8
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b088      	sub	sp, #32
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	603b      	str	r3, [r7, #0]
 8002e0e:	1dbb      	adds	r3, r7, #6
 8002e10:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e12:	231f      	movs	r3, #31
 8002e14:	18fb      	adds	r3, r7, r3
 8002e16:	2200      	movs	r2, #0
 8002e18:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2250      	movs	r2, #80	; 0x50
 8002e1e:	5c9b      	ldrb	r3, [r3, r2]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_SPI_Transmit+0x26>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e13e      	b.n	80030a6 <HAL_SPI_Transmit+0x2a4>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2250      	movs	r2, #80	; 0x50
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e30:	f7fe f9fc 	bl	800122c <HAL_GetTick>
 8002e34:	0003      	movs	r3, r0
 8002e36:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002e38:	2316      	movs	r3, #22
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	1dba      	adds	r2, r7, #6
 8002e3e:	8812      	ldrh	r2, [r2, #0]
 8002e40:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2251      	movs	r2, #81	; 0x51
 8002e46:	5c9b      	ldrb	r3, [r3, r2]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d004      	beq.n	8002e58 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002e4e:	231f      	movs	r3, #31
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	2202      	movs	r2, #2
 8002e54:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e56:	e11b      	b.n	8003090 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_SPI_Transmit+0x64>
 8002e5e:	1dbb      	adds	r3, r7, #6
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d104      	bne.n	8002e70 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002e66:	231f      	movs	r3, #31
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e6e:	e10f      	b.n	8003090 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2251      	movs	r2, #81	; 0x51
 8002e74:	2103      	movs	r1, #3
 8002e76:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1dba      	adds	r2, r7, #6
 8002e88:	8812      	ldrh	r2, [r2, #0]
 8002e8a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1dba      	adds	r2, r7, #6
 8002e90:	8812      	ldrh	r2, [r2, #0]
 8002e92:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	2380      	movs	r3, #128	; 0x80
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d110      	bne.n	8002ee0 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2140      	movs	r1, #64	; 0x40
 8002eca:	438a      	bics	r2, r1
 8002ecc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2180      	movs	r1, #128	; 0x80
 8002eda:	01c9      	lsls	r1, r1, #7
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2240      	movs	r2, #64	; 0x40
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b40      	cmp	r3, #64	; 0x40
 8002eec:	d007      	beq.n	8002efe <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2140      	movs	r1, #64	; 0x40
 8002efa:	430a      	orrs	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d14e      	bne.n	8002fa8 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d004      	beq.n	8002f1c <HAL_SPI_Transmit+0x11a>
 8002f12:	2316      	movs	r3, #22
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	881b      	ldrh	r3, [r3, #0]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d13f      	bne.n	8002f9c <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	881a      	ldrh	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	1c9a      	adds	r2, r3, #2
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f40:	e02c      	b.n	8002f9c <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2202      	movs	r2, #2
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d112      	bne.n	8002f76 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	881a      	ldrh	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	1c9a      	adds	r2, r3, #2
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f74:	e012      	b.n	8002f9c <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f76:	f7fe f959 	bl	800122c <HAL_GetTick>
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d802      	bhi.n	8002f8c <HAL_SPI_Transmit+0x18a>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	d102      	bne.n	8002f92 <HAL_SPI_Transmit+0x190>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d104      	bne.n	8002f9c <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8002f92:	231f      	movs	r3, #31
 8002f94:	18fb      	adds	r3, r7, r3
 8002f96:	2203      	movs	r2, #3
 8002f98:	701a      	strb	r2, [r3, #0]
          goto error;
 8002f9a:	e079      	b.n	8003090 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1cd      	bne.n	8002f42 <HAL_SPI_Transmit+0x140>
 8002fa6:	e04f      	b.n	8003048 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d004      	beq.n	8002fba <HAL_SPI_Transmit+0x1b8>
 8002fb0:	2316      	movs	r3, #22
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d141      	bne.n	800303e <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	330c      	adds	r3, #12
 8002fc4:	7812      	ldrb	r2, [r2, #0]
 8002fc6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002fe0:	e02d      	b.n	800303e <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d113      	bne.n	8003018 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	330c      	adds	r3, #12
 8002ffa:	7812      	ldrb	r2, [r2, #0]
 8002ffc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	86da      	strh	r2, [r3, #54]	; 0x36
 8003016:	e012      	b.n	800303e <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003018:	f7fe f908 	bl	800122c <HAL_GetTick>
 800301c:	0002      	movs	r2, r0
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d802      	bhi.n	800302e <HAL_SPI_Transmit+0x22c>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	3301      	adds	r3, #1
 800302c:	d102      	bne.n	8003034 <HAL_SPI_Transmit+0x232>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d104      	bne.n	800303e <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8003034:	231f      	movs	r3, #31
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	2203      	movs	r2, #3
 800303a:	701a      	strb	r2, [r3, #0]
          goto error;
 800303c:	e028      	b.n	8003090 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003042:	b29b      	uxth	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1cc      	bne.n	8002fe2 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	6839      	ldr	r1, [r7, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	0018      	movs	r0, r3
 8003050:	f000 fb92 	bl	8003778 <SPI_EndRxTxTransaction>
 8003054:	1e03      	subs	r3, r0, #0
 8003056:	d002      	beq.n	800305e <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10a      	bne.n	800307c <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003080:	2b00      	cmp	r3, #0
 8003082:	d004      	beq.n	800308e <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8003084:	231f      	movs	r3, #31
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]
 800308c:	e000      	b.n	8003090 <HAL_SPI_Transmit+0x28e>
  }

error:
 800308e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2251      	movs	r2, #81	; 0x51
 8003094:	2101      	movs	r1, #1
 8003096:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2250      	movs	r2, #80	; 0x50
 800309c:	2100      	movs	r1, #0
 800309e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80030a0:	231f      	movs	r3, #31
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	781b      	ldrb	r3, [r3, #0]
}
 80030a6:	0018      	movs	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b008      	add	sp, #32
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b08c      	sub	sp, #48	; 0x30
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
 80030ba:	001a      	movs	r2, r3
 80030bc:	1cbb      	adds	r3, r7, #2
 80030be:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030c0:	2301      	movs	r3, #1
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030c4:	232b      	movs	r3, #43	; 0x2b
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2250      	movs	r2, #80	; 0x50
 80030d0:	5c9b      	ldrb	r3, [r3, r2]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_SPI_TransmitReceive+0x2c>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e1a0      	b.n	800341c <HAL_SPI_TransmitReceive+0x36e>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2250      	movs	r2, #80	; 0x50
 80030de:	2101      	movs	r1, #1
 80030e0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030e2:	f7fe f8a3 	bl	800122c <HAL_GetTick>
 80030e6:	0003      	movs	r3, r0
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030ea:	2023      	movs	r0, #35	; 0x23
 80030ec:	183b      	adds	r3, r7, r0
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	2151      	movs	r1, #81	; 0x51
 80030f2:	5c52      	ldrb	r2, [r2, r1]
 80030f4:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030fc:	231a      	movs	r3, #26
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	1cba      	adds	r2, r7, #2
 8003102:	8812      	ldrh	r2, [r2, #0]
 8003104:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003106:	183b      	adds	r3, r7, r0
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d011      	beq.n	8003132 <HAL_SPI_TransmitReceive+0x84>
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	2382      	movs	r3, #130	; 0x82
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	429a      	cmp	r2, r3
 8003116:	d107      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d103      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x7a>
 8003120:	183b      	adds	r3, r7, r0
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b04      	cmp	r3, #4
 8003126:	d004      	beq.n	8003132 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003128:	232b      	movs	r3, #43	; 0x2b
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	2202      	movs	r2, #2
 800312e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003130:	e169      	b.n	8003406 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d006      	beq.n	8003146 <HAL_SPI_TransmitReceive+0x98>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_SPI_TransmitReceive+0x98>
 800313e:	1cbb      	adds	r3, r7, #2
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d104      	bne.n	8003150 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003146:	232b      	movs	r3, #43	; 0x2b
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
    goto error;
 800314e:	e15a      	b.n	8003406 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2251      	movs	r2, #81	; 0x51
 8003154:	5c9b      	ldrb	r3, [r3, r2]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b04      	cmp	r3, #4
 800315a:	d003      	beq.n	8003164 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2251      	movs	r2, #81	; 0x51
 8003160:	2105      	movs	r1, #5
 8003162:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1cba      	adds	r2, r7, #2
 8003174:	8812      	ldrh	r2, [r2, #0]
 8003176:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	1cba      	adds	r2, r7, #2
 800317c:	8812      	ldrh	r2, [r2, #0]
 800317e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1cba      	adds	r2, r7, #2
 800318a:	8812      	ldrh	r2, [r2, #0]
 800318c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1cba      	adds	r2, r7, #2
 8003192:	8812      	ldrh	r2, [r2, #0]
 8003194:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2240      	movs	r2, #64	; 0x40
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d007      	beq.n	80031c0 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2140      	movs	r1, #64	; 0x40
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d000      	beq.n	80031ce <HAL_SPI_TransmitReceive+0x120>
 80031cc:	e07a      	b.n	80032c4 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d004      	beq.n	80031e0 <HAL_SPI_TransmitReceive+0x132>
 80031d6:	231a      	movs	r3, #26
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d166      	bne.n	80032ae <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	881a      	ldrh	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	1c9a      	adds	r2, r3, #2
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003204:	e053      	b.n	80032ae <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2202      	movs	r2, #2
 800320e:	4013      	ands	r3, r2
 8003210:	2b02      	cmp	r3, #2
 8003212:	d11b      	bne.n	800324c <HAL_SPI_TransmitReceive+0x19e>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d016      	beq.n	800324c <HAL_SPI_TransmitReceive+0x19e>
 800321e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003220:	2b01      	cmp	r3, #1
 8003222:	d113      	bne.n	800324c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	881a      	ldrh	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	1c9a      	adds	r2, r3, #2
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2201      	movs	r2, #1
 8003254:	4013      	ands	r3, r2
 8003256:	2b01      	cmp	r3, #1
 8003258:	d119      	bne.n	800328e <HAL_SPI_TransmitReceive+0x1e0>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d014      	beq.n	800328e <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326e:	b292      	uxth	r2, r2
 8003270:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003276:	1c9a      	adds	r2, r3, #2
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003280:	b29b      	uxth	r3, r3
 8003282:	3b01      	subs	r3, #1
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800328a:	2301      	movs	r3, #1
 800328c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800328e:	f7fd ffcd 	bl	800122c <HAL_GetTick>
 8003292:	0002      	movs	r2, r0
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800329a:	429a      	cmp	r2, r3
 800329c:	d807      	bhi.n	80032ae <HAL_SPI_TransmitReceive+0x200>
 800329e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a0:	3301      	adds	r3, #1
 80032a2:	d004      	beq.n	80032ae <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 80032a4:	232b      	movs	r3, #43	; 0x2b
 80032a6:	18fb      	adds	r3, r7, r3
 80032a8:	2203      	movs	r2, #3
 80032aa:	701a      	strb	r2, [r3, #0]
        goto error;
 80032ac:	e0ab      	b.n	8003406 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1a6      	bne.n	8003206 <HAL_SPI_TransmitReceive+0x158>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1a1      	bne.n	8003206 <HAL_SPI_TransmitReceive+0x158>
 80032c2:	e07f      	b.n	80033c4 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_SPI_TransmitReceive+0x22a>
 80032cc:	231a      	movs	r3, #26
 80032ce:	18fb      	adds	r3, r7, r3
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d000      	beq.n	80032d8 <HAL_SPI_TransmitReceive+0x22a>
 80032d6:	e06b      	b.n	80033b0 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	330c      	adds	r3, #12
 80032e2:	7812      	ldrb	r2, [r2, #0]
 80032e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032fe:	e057      	b.n	80033b0 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2202      	movs	r2, #2
 8003308:	4013      	ands	r3, r2
 800330a:	2b02      	cmp	r3, #2
 800330c:	d11c      	bne.n	8003348 <HAL_SPI_TransmitReceive+0x29a>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d017      	beq.n	8003348 <HAL_SPI_TransmitReceive+0x29a>
 8003318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331a:	2b01      	cmp	r3, #1
 800331c:	d114      	bne.n	8003348 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	330c      	adds	r3, #12
 8003328:	7812      	ldrb	r2, [r2, #0]
 800332a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800333a:	b29b      	uxth	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2201      	movs	r2, #1
 8003350:	4013      	ands	r3, r2
 8003352:	2b01      	cmp	r3, #1
 8003354:	d119      	bne.n	800338a <HAL_SPI_TransmitReceive+0x2dc>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d014      	beq.n	800338a <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003386:	2301      	movs	r3, #1
 8003388:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800338a:	f7fd ff4f 	bl	800122c <HAL_GetTick>
 800338e:	0002      	movs	r2, r0
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003396:	429a      	cmp	r2, r3
 8003398:	d802      	bhi.n	80033a0 <HAL_SPI_TransmitReceive+0x2f2>
 800339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339c:	3301      	adds	r3, #1
 800339e:	d102      	bne.n	80033a6 <HAL_SPI_TransmitReceive+0x2f8>
 80033a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d104      	bne.n	80033b0 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 80033a6:	232b      	movs	r3, #43	; 0x2b
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	2203      	movs	r2, #3
 80033ac:	701a      	strb	r2, [r3, #0]
        goto error;
 80033ae:	e02a      	b.n	8003406 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1a2      	bne.n	8003300 <HAL_SPI_TransmitReceive+0x252>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d19d      	bne.n	8003300 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	0018      	movs	r0, r3
 80033cc:	f000 f9d4 	bl	8003778 <SPI_EndRxTxTransaction>
 80033d0:	1e03      	subs	r3, r0, #0
 80033d2:	d007      	beq.n	80033e4 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 80033d4:	232b      	movs	r3, #43	; 0x2b
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	2201      	movs	r2, #1
 80033da:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80033e2:	e010      	b.n	8003406 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	e000      	b.n	8003406 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8003404:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2251      	movs	r2, #81	; 0x51
 800340a:	2101      	movs	r1, #1
 800340c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2250      	movs	r2, #80	; 0x50
 8003412:	2100      	movs	r1, #0
 8003414:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003416:	232b      	movs	r3, #43	; 0x2b
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	781b      	ldrb	r3, [r3, #0]
}
 800341c:	0018      	movs	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	b00c      	add	sp, #48	; 0x30
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	099b      	lsrs	r3, r3, #6
 8003440:	001a      	movs	r2, r3
 8003442:	2301      	movs	r3, #1
 8003444:	4013      	ands	r3, r2
 8003446:	d10f      	bne.n	8003468 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	2201      	movs	r2, #1
 800344c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800344e:	d00b      	beq.n	8003468 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	099b      	lsrs	r3, r3, #6
 8003454:	001a      	movs	r2, r3
 8003456:	2301      	movs	r3, #1
 8003458:	4013      	ands	r3, r2
 800345a:	d005      	beq.n	8003468 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	0010      	movs	r0, r2
 8003464:	4798      	blx	r3
    return;
 8003466:	e0d5      	b.n	8003614 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	085b      	lsrs	r3, r3, #1
 800346c:	001a      	movs	r2, r3
 800346e:	2301      	movs	r3, #1
 8003470:	4013      	ands	r3, r2
 8003472:	d00b      	beq.n	800348c <HAL_SPI_IRQHandler+0x68>
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	09db      	lsrs	r3, r3, #7
 8003478:	001a      	movs	r2, r3
 800347a:	2301      	movs	r3, #1
 800347c:	4013      	ands	r3, r2
 800347e:	d005      	beq.n	800348c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	0010      	movs	r0, r2
 8003488:	4798      	blx	r3
    return;
 800348a:	e0c3      	b.n	8003614 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	001a      	movs	r2, r3
 8003492:	2301      	movs	r3, #1
 8003494:	4013      	ands	r3, r2
 8003496:	d10c      	bne.n	80034b2 <HAL_SPI_IRQHandler+0x8e>
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	099b      	lsrs	r3, r3, #6
 800349c:	001a      	movs	r2, r3
 800349e:	2301      	movs	r3, #1
 80034a0:	4013      	ands	r3, r2
 80034a2:	d106      	bne.n	80034b2 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	0a1b      	lsrs	r3, r3, #8
 80034a8:	001a      	movs	r2, r3
 80034aa:	2301      	movs	r3, #1
 80034ac:	4013      	ands	r3, r2
 80034ae:	d100      	bne.n	80034b2 <HAL_SPI_IRQHandler+0x8e>
 80034b0:	e0b0      	b.n	8003614 <HAL_SPI_IRQHandler+0x1f0>
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	095b      	lsrs	r3, r3, #5
 80034b6:	001a      	movs	r2, r3
 80034b8:	2301      	movs	r3, #1
 80034ba:	4013      	ands	r3, r2
 80034bc:	d100      	bne.n	80034c0 <HAL_SPI_IRQHandler+0x9c>
 80034be:	e0a9      	b.n	8003614 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	099b      	lsrs	r3, r3, #6
 80034c4:	001a      	movs	r2, r3
 80034c6:	2301      	movs	r3, #1
 80034c8:	4013      	ands	r3, r2
 80034ca:	d023      	beq.n	8003514 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2251      	movs	r2, #81	; 0x51
 80034d0:	5c9b      	ldrb	r3, [r3, r2]
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d011      	beq.n	80034fc <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034dc:	2204      	movs	r2, #4
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	e00b      	b.n	8003514 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034fc:	2300      	movs	r3, #0
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	693b      	ldr	r3, [r7, #16]
        return;
 8003512:	e07f      	b.n	8003614 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	001a      	movs	r2, r3
 800351a:	2301      	movs	r3, #1
 800351c:	4013      	ands	r3, r2
 800351e:	d014      	beq.n	800354a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003524:	2201      	movs	r2, #1
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2140      	movs	r1, #64	; 0x40
 8003544:	438a      	bics	r2, r1
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	0a1b      	lsrs	r3, r3, #8
 800354e:	001a      	movs	r2, r3
 8003550:	2301      	movs	r3, #1
 8003552:	4013      	ands	r3, r2
 8003554:	d00c      	beq.n	8003570 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	2208      	movs	r2, #8
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003562:	2300      	movs	r3, #0
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003574:	2b00      	cmp	r3, #0
 8003576:	d04c      	beq.n	8003612 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	21e0      	movs	r1, #224	; 0xe0
 8003584:	438a      	bics	r2, r1
 8003586:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2251      	movs	r2, #81	; 0x51
 800358c:	2101      	movs	r1, #1
 800358e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	2202      	movs	r2, #2
 8003594:	4013      	ands	r3, r2
 8003596:	d103      	bne.n	80035a0 <HAL_SPI_IRQHandler+0x17c>
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2201      	movs	r2, #1
 800359c:	4013      	ands	r3, r2
 800359e:	d032      	beq.n	8003606 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2103      	movs	r1, #3
 80035ac:	438a      	bics	r2, r1
 80035ae:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d010      	beq.n	80035da <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035bc:	4a17      	ldr	r2, [pc, #92]	; (800361c <HAL_SPI_IRQHandler+0x1f8>)
 80035be:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7fd ff59 	bl	800147c <HAL_DMA_Abort_IT>
 80035ca:	1e03      	subs	r3, r0, #0
 80035cc:	d005      	beq.n	80035da <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d2:	2240      	movs	r2, #64	; 0x40
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d016      	beq.n	8003610 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e6:	4a0d      	ldr	r2, [pc, #52]	; (800361c <HAL_SPI_IRQHandler+0x1f8>)
 80035e8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ee:	0018      	movs	r0, r3
 80035f0:	f7fd ff44 	bl	800147c <HAL_DMA_Abort_IT>
 80035f4:	1e03      	subs	r3, r0, #0
 80035f6:	d00b      	beq.n	8003610 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fc:	2240      	movs	r2, #64	; 0x40
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003604:	e004      	b.n	8003610 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	0018      	movs	r0, r3
 800360a:	f000 f809 	bl	8003620 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800360e:	e000      	b.n	8003612 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8003610:	46c0      	nop			; (mov r8, r8)
    return;
 8003612:	46c0      	nop			; (mov r8, r8)
  }
}
 8003614:	46bd      	mov	sp, r7
 8003616:	b008      	add	sp, #32
 8003618:	bd80      	pop	{r7, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	08003631 	.word	0x08003631

08003620 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	46bd      	mov	sp, r7
 800362c:	b002      	add	sp, #8
 800362e:	bd80      	pop	{r7, pc}

08003630 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	0018      	movs	r0, r3
 800364e:	f7ff ffe7 	bl	8003620 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	46bd      	mov	sp, r7
 8003656:	b004      	add	sp, #16
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	1dfb      	adds	r3, r7, #7
 800366a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800366c:	f7fd fdde 	bl	800122c <HAL_GetTick>
 8003670:	0002      	movs	r2, r0
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	18d3      	adds	r3, r2, r3
 800367a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800367c:	f7fd fdd6 	bl	800122c <HAL_GetTick>
 8003680:	0003      	movs	r3, r0
 8003682:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003684:	4b3a      	ldr	r3, [pc, #232]	; (8003770 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	015b      	lsls	r3, r3, #5
 800368a:	0d1b      	lsrs	r3, r3, #20
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	4353      	muls	r3, r2
 8003690:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003692:	e058      	b.n	8003746 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	3301      	adds	r3, #1
 8003698:	d055      	beq.n	8003746 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800369a:	f7fd fdc7 	bl	800122c <HAL_GetTick>
 800369e:	0002      	movs	r2, r0
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	69fa      	ldr	r2, [r7, #28]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d902      	bls.n	80036b0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d142      	bne.n	8003736 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	21e0      	movs	r1, #224	; 0xe0
 80036bc:	438a      	bics	r2, r1
 80036be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	2382      	movs	r3, #130	; 0x82
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d113      	bne.n	80036f4 <SPI_WaitFlagStateUntilTimeout+0x98>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	021b      	lsls	r3, r3, #8
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d005      	beq.n	80036e4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d107      	bne.n	80036f4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2140      	movs	r1, #64	; 0x40
 80036f0:	438a      	bics	r2, r1
 80036f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	019b      	lsls	r3, r3, #6
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d110      	bne.n	8003722 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	491a      	ldr	r1, [pc, #104]	; (8003774 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800370c:	400a      	ands	r2, r1
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2180      	movs	r1, #128	; 0x80
 800371c:	0189      	lsls	r1, r1, #6
 800371e:	430a      	orrs	r2, r1
 8003720:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2251      	movs	r2, #81	; 0x51
 8003726:	2101      	movs	r1, #1
 8003728:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2250      	movs	r2, #80	; 0x50
 800372e:	2100      	movs	r1, #0
 8003730:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e017      	b.n	8003766 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800373c:	2300      	movs	r3, #0
 800373e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	3b01      	subs	r3, #1
 8003744:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	4013      	ands	r3, r2
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	425a      	negs	r2, r3
 8003756:	4153      	adcs	r3, r2
 8003758:	b2db      	uxtb	r3, r3
 800375a:	001a      	movs	r2, r3
 800375c:	1dfb      	adds	r3, r7, #7
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d197      	bne.n	8003694 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	b008      	add	sp, #32
 800376c:	bd80      	pop	{r7, pc}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	20000000 	.word	0x20000000
 8003774:	ffffdfff 	.word	0xffffdfff

08003778 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af02      	add	r7, sp, #8
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003784:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <SPI_EndRxTxTransaction+0x84>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	491d      	ldr	r1, [pc, #116]	; (8003800 <SPI_EndRxTxTransaction+0x88>)
 800378a:	0018      	movs	r0, r3
 800378c:	f7fc fcc4 	bl	8000118 <__udivsi3>
 8003790:	0003      	movs	r3, r0
 8003792:	001a      	movs	r2, r3
 8003794:	0013      	movs	r3, r2
 8003796:	015b      	lsls	r3, r3, #5
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	189b      	adds	r3, r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	2382      	movs	r3, #130	; 0x82
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d112      	bne.n	80037d4 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	0013      	movs	r3, r2
 80037b8:	2200      	movs	r2, #0
 80037ba:	2180      	movs	r1, #128	; 0x80
 80037bc:	f7ff ff4e 	bl	800365c <SPI_WaitFlagStateUntilTimeout>
 80037c0:	1e03      	subs	r3, r0, #0
 80037c2:	d016      	beq.n	80037f2 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c8:	2220      	movs	r2, #32
 80037ca:	431a      	orrs	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e00f      	b.n	80037f4 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	3b01      	subs	r3, #1
 80037de:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2280      	movs	r2, #128	; 0x80
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b80      	cmp	r3, #128	; 0x80
 80037ec:	d0f2      	beq.n	80037d4 <SPI_EndRxTxTransaction+0x5c>
 80037ee:	e000      	b.n	80037f2 <SPI_EndRxTxTransaction+0x7a>
        break;
 80037f0:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	0018      	movs	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b006      	add	sp, #24
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000000 	.word	0x20000000
 8003800:	016e3600 	.word	0x016e3600

08003804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e032      	b.n	800387c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2239      	movs	r2, #57	; 0x39
 800381a:	5c9b      	ldrb	r3, [r3, r2]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d107      	bne.n	8003832 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2238      	movs	r2, #56	; 0x38
 8003826:	2100      	movs	r1, #0
 8003828:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	0018      	movs	r0, r3
 800382e:	f7fd fb95 	bl	8000f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2239      	movs	r2, #57	; 0x39
 8003836:	2102      	movs	r1, #2
 8003838:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3304      	adds	r3, #4
 8003842:	0019      	movs	r1, r3
 8003844:	0010      	movs	r0, r2
 8003846:	f000 fa01 	bl	8003c4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	223e      	movs	r2, #62	; 0x3e
 800384e:	2101      	movs	r1, #1
 8003850:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	223a      	movs	r2, #58	; 0x3a
 8003856:	2101      	movs	r1, #1
 8003858:	5499      	strb	r1, [r3, r2]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	223b      	movs	r2, #59	; 0x3b
 800385e:	2101      	movs	r1, #1
 8003860:	5499      	strb	r1, [r3, r2]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	223c      	movs	r2, #60	; 0x3c
 8003866:	2101      	movs	r1, #1
 8003868:	5499      	strb	r1, [r3, r2]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	223d      	movs	r2, #61	; 0x3d
 800386e:	2101      	movs	r1, #1
 8003870:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2239      	movs	r2, #57	; 0x39
 8003876:	2101      	movs	r1, #1
 8003878:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	0018      	movs	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	b002      	add	sp, #8
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2202      	movs	r2, #2
 8003894:	4013      	ands	r3, r2
 8003896:	2b02      	cmp	r3, #2
 8003898:	d124      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	2202      	movs	r2, #2
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d11d      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2203      	movs	r2, #3
 80038ae:	4252      	negs	r2, r2
 80038b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2203      	movs	r2, #3
 80038c0:	4013      	ands	r3, r2
 80038c2:	d004      	beq.n	80038ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	0018      	movs	r0, r3
 80038c8:	f000 f9a8 	bl	8003c1c <HAL_TIM_IC_CaptureCallback>
 80038cc:	e007      	b.n	80038de <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	0018      	movs	r0, r3
 80038d2:	f000 f99b 	bl	8003c0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	0018      	movs	r0, r3
 80038da:	f000 f9a7 	bl	8003c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2204      	movs	r2, #4
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d125      	bne.n	800393e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	2204      	movs	r2, #4
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d11e      	bne.n	800393e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2205      	movs	r2, #5
 8003906:	4252      	negs	r2, r2
 8003908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2202      	movs	r2, #2
 800390e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	23c0      	movs	r3, #192	; 0xc0
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4013      	ands	r3, r2
 800391c:	d004      	beq.n	8003928 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	0018      	movs	r0, r3
 8003922:	f000 f97b 	bl	8003c1c <HAL_TIM_IC_CaptureCallback>
 8003926:	e007      	b.n	8003938 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	0018      	movs	r0, r3
 800392c:	f000 f96e 	bl	8003c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	0018      	movs	r0, r3
 8003934:	f000 f97a 	bl	8003c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2208      	movs	r2, #8
 8003946:	4013      	ands	r3, r2
 8003948:	2b08      	cmp	r3, #8
 800394a:	d124      	bne.n	8003996 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2208      	movs	r2, #8
 8003954:	4013      	ands	r3, r2
 8003956:	2b08      	cmp	r3, #8
 8003958:	d11d      	bne.n	8003996 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2209      	movs	r2, #9
 8003960:	4252      	negs	r2, r2
 8003962:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2204      	movs	r2, #4
 8003968:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	2203      	movs	r2, #3
 8003972:	4013      	ands	r3, r2
 8003974:	d004      	beq.n	8003980 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	0018      	movs	r0, r3
 800397a:	f000 f94f 	bl	8003c1c <HAL_TIM_IC_CaptureCallback>
 800397e:	e007      	b.n	8003990 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	0018      	movs	r0, r3
 8003984:	f000 f942 	bl	8003c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	0018      	movs	r0, r3
 800398c:	f000 f94e 	bl	8003c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2210      	movs	r2, #16
 800399e:	4013      	ands	r3, r2
 80039a0:	2b10      	cmp	r3, #16
 80039a2:	d125      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2210      	movs	r2, #16
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d11e      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2211      	movs	r2, #17
 80039b8:	4252      	negs	r2, r2
 80039ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2208      	movs	r2, #8
 80039c0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69da      	ldr	r2, [r3, #28]
 80039c8:	23c0      	movs	r3, #192	; 0xc0
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4013      	ands	r3, r2
 80039ce:	d004      	beq.n	80039da <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	0018      	movs	r0, r3
 80039d4:	f000 f922 	bl	8003c1c <HAL_TIM_IC_CaptureCallback>
 80039d8:	e007      	b.n	80039ea <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	0018      	movs	r0, r3
 80039de:	f000 f915 	bl	8003c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	0018      	movs	r0, r3
 80039e6:	f000 f921 	bl	8003c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2201      	movs	r2, #1
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d10f      	bne.n	8003a1e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d108      	bne.n	8003a1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2202      	movs	r2, #2
 8003a12:	4252      	negs	r2, r2
 8003a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f000 f8ef 	bl	8003bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	2240      	movs	r2, #64	; 0x40
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d10f      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	2240      	movs	r2, #64	; 0x40
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b40      	cmp	r3, #64	; 0x40
 8003a38:	d108      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2241      	movs	r2, #65	; 0x41
 8003a40:	4252      	negs	r2, r2
 8003a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	0018      	movs	r0, r3
 8003a48:	f000 f8f8 	bl	8003c3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b002      	add	sp, #8
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5e:	230f      	movs	r3, #15
 8003a60:	18fb      	adds	r3, r7, r3
 8003a62:	2200      	movs	r2, #0
 8003a64:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2238      	movs	r2, #56	; 0x38
 8003a6a:	5c9b      	ldrb	r3, [r3, r2]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_TIM_ConfigClockSource+0x20>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e0bc      	b.n	8003bee <HAL_TIM_ConfigClockSource+0x19a>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2238      	movs	r2, #56	; 0x38
 8003a78:	2101      	movs	r1, #1
 8003a7a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2239      	movs	r2, #57	; 0x39
 8003a80:	2102      	movs	r1, #2
 8003a82:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2277      	movs	r2, #119	; 0x77
 8003a90:	4393      	bics	r3, r2
 8003a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4a58      	ldr	r2, [pc, #352]	; (8003bf8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2280      	movs	r2, #128	; 0x80
 8003aaa:	0192      	lsls	r2, r2, #6
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d040      	beq.n	8003b32 <HAL_TIM_ConfigClockSource+0xde>
 8003ab0:	2280      	movs	r2, #128	; 0x80
 8003ab2:	0192      	lsls	r2, r2, #6
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d900      	bls.n	8003aba <HAL_TIM_ConfigClockSource+0x66>
 8003ab8:	e088      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x178>
 8003aba:	2280      	movs	r2, #128	; 0x80
 8003abc:	0152      	lsls	r2, r2, #5
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d100      	bne.n	8003ac4 <HAL_TIM_ConfigClockSource+0x70>
 8003ac2:	e088      	b.n	8003bd6 <HAL_TIM_ConfigClockSource+0x182>
 8003ac4:	2280      	movs	r2, #128	; 0x80
 8003ac6:	0152      	lsls	r2, r2, #5
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d900      	bls.n	8003ace <HAL_TIM_ConfigClockSource+0x7a>
 8003acc:	e07e      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x178>
 8003ace:	2b70      	cmp	r3, #112	; 0x70
 8003ad0:	d018      	beq.n	8003b04 <HAL_TIM_ConfigClockSource+0xb0>
 8003ad2:	d900      	bls.n	8003ad6 <HAL_TIM_ConfigClockSource+0x82>
 8003ad4:	e07a      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x178>
 8003ad6:	2b60      	cmp	r3, #96	; 0x60
 8003ad8:	d04f      	beq.n	8003b7a <HAL_TIM_ConfigClockSource+0x126>
 8003ada:	d900      	bls.n	8003ade <HAL_TIM_ConfigClockSource+0x8a>
 8003adc:	e076      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x178>
 8003ade:	2b50      	cmp	r3, #80	; 0x50
 8003ae0:	d03b      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0x106>
 8003ae2:	d900      	bls.n	8003ae6 <HAL_TIM_ConfigClockSource+0x92>
 8003ae4:	e072      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x178>
 8003ae6:	2b40      	cmp	r3, #64	; 0x40
 8003ae8:	d057      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x146>
 8003aea:	d900      	bls.n	8003aee <HAL_TIM_ConfigClockSource+0x9a>
 8003aec:	e06e      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x178>
 8003aee:	2b30      	cmp	r3, #48	; 0x30
 8003af0:	d063      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0x166>
 8003af2:	d86b      	bhi.n	8003bcc <HAL_TIM_ConfigClockSource+0x178>
 8003af4:	2b20      	cmp	r3, #32
 8003af6:	d060      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0x166>
 8003af8:	d868      	bhi.n	8003bcc <HAL_TIM_ConfigClockSource+0x178>
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d05d      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0x166>
 8003afe:	2b10      	cmp	r3, #16
 8003b00:	d05b      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0x166>
 8003b02:	e063      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	6899      	ldr	r1, [r3, #8]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f000 f968 	bl	8003de8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2277      	movs	r2, #119	; 0x77
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	609a      	str	r2, [r3, #8]
      break;
 8003b30:	e052      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6899      	ldr	r1, [r3, #8]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f000 f951 	bl	8003de8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2180      	movs	r1, #128	; 0x80
 8003b52:	01c9      	lsls	r1, r1, #7
 8003b54:	430a      	orrs	r2, r1
 8003b56:	609a      	str	r2, [r3, #8]
      break;
 8003b58:	e03e      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	6859      	ldr	r1, [r3, #4]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	001a      	movs	r2, r3
 8003b68:	f000 f8c4 	bl	8003cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2150      	movs	r1, #80	; 0x50
 8003b72:	0018      	movs	r0, r3
 8003b74:	f000 f91e 	bl	8003db4 <TIM_ITRx_SetConfig>
      break;
 8003b78:	e02e      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6859      	ldr	r1, [r3, #4]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	001a      	movs	r2, r3
 8003b88:	f000 f8e2 	bl	8003d50 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2160      	movs	r1, #96	; 0x60
 8003b92:	0018      	movs	r0, r3
 8003b94:	f000 f90e 	bl	8003db4 <TIM_ITRx_SetConfig>
      break;
 8003b98:	e01e      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6859      	ldr	r1, [r3, #4]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	001a      	movs	r2, r3
 8003ba8:	f000 f8a4 	bl	8003cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2140      	movs	r1, #64	; 0x40
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f000 f8fe 	bl	8003db4 <TIM_ITRx_SetConfig>
      break;
 8003bb8:	e00e      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	0019      	movs	r1, r3
 8003bc4:	0010      	movs	r0, r2
 8003bc6:	f000 f8f5 	bl	8003db4 <TIM_ITRx_SetConfig>
      break;
 8003bca:	e005      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003bcc:	230f      	movs	r3, #15
 8003bce:	18fb      	adds	r3, r7, r3
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	701a      	strb	r2, [r3, #0]
      break;
 8003bd4:	e000      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003bd6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2239      	movs	r2, #57	; 0x39
 8003bdc:	2101      	movs	r1, #1
 8003bde:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2238      	movs	r2, #56	; 0x38
 8003be4:	2100      	movs	r1, #0
 8003be6:	5499      	strb	r1, [r3, r2]

  return status;
 8003be8:	230f      	movs	r3, #15
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	781b      	ldrb	r3, [r3, #0]
}
 8003bee:	0018      	movs	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b004      	add	sp, #16
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	ffff00ff 	.word	0xffff00ff

08003bfc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c04:	46c0      	nop			; (mov r8, r8)
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b002      	add	sp, #8
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c14:	46c0      	nop			; (mov r8, r8)
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b002      	add	sp, #8
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c24:	46c0      	nop			; (mov r8, r8)
 8003c26:	46bd      	mov	sp, r7
 8003c28:	b002      	add	sp, #8
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c34:	46c0      	nop			; (mov r8, r8)
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b002      	add	sp, #8
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c44:	46c0      	nop			; (mov r8, r8)
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b002      	add	sp, #8
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	2380      	movs	r3, #128	; 0x80
 8003c60:	05db      	lsls	r3, r3, #23
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d007      	beq.n	8003c76 <TIM_Base_SetConfig+0x2a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a1f      	ldr	r2, [pc, #124]	; (8003ce8 <TIM_Base_SetConfig+0x9c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d003      	beq.n	8003c76 <TIM_Base_SetConfig+0x2a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a1e      	ldr	r2, [pc, #120]	; (8003cec <TIM_Base_SetConfig+0xa0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d108      	bne.n	8003c88 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2270      	movs	r2, #112	; 0x70
 8003c7a:	4393      	bics	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	05db      	lsls	r3, r3, #23
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d007      	beq.n	8003ca2 <TIM_Base_SetConfig+0x56>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a14      	ldr	r2, [pc, #80]	; (8003ce8 <TIM_Base_SetConfig+0x9c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d003      	beq.n	8003ca2 <TIM_Base_SetConfig+0x56>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a13      	ldr	r2, [pc, #76]	; (8003cec <TIM_Base_SetConfig+0xa0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d108      	bne.n	8003cb4 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <TIM_Base_SetConfig+0xa4>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2280      	movs	r2, #128	; 0x80
 8003cb8:	4393      	bics	r3, r2
 8003cba:	001a      	movs	r2, r3
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	615a      	str	r2, [r3, #20]
}
 8003ce0:	46c0      	nop			; (mov r8, r8)
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	b004      	add	sp, #16
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40010800 	.word	0x40010800
 8003cec:	40011400 	.word	0x40011400
 8003cf0:	fffffcff 	.word	0xfffffcff

08003cf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	4393      	bics	r3, r2
 8003d0e:	001a      	movs	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	22f0      	movs	r2, #240	; 0xf0
 8003d1e:	4393      	bics	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	220a      	movs	r2, #10
 8003d30:	4393      	bics	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	621a      	str	r2, [r3, #32]
}
 8003d48:	46c0      	nop			; (mov r8, r8)
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b006      	add	sp, #24
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	2210      	movs	r2, #16
 8003d62:	4393      	bics	r3, r2
 8003d64:	001a      	movs	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	4a0d      	ldr	r2, [pc, #52]	; (8003db0 <TIM_TI2_ConfigInputStage+0x60>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	031b      	lsls	r3, r3, #12
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	22a0      	movs	r2, #160	; 0xa0
 8003d8c:	4393      	bics	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	621a      	str	r2, [r3, #32]
}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b006      	add	sp, #24
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	ffff0fff 	.word	0xffff0fff

08003db4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2270      	movs	r2, #112	; 0x70
 8003dc8:	4393      	bics	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	2207      	movs	r2, #7
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	609a      	str	r2, [r3, #8]
}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b004      	add	sp, #16
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	4a09      	ldr	r2, [pc, #36]	; (8003e24 <TIM_ETR_SetConfig+0x3c>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	021a      	lsls	r2, r3, #8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	609a      	str	r2, [r3, #8]
}
 8003e1c:	46c0      	nop			; (mov r8, r8)
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b006      	add	sp, #24
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	ffff00ff 	.word	0xffff00ff

08003e28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2238      	movs	r2, #56	; 0x38
 8003e36:	5c9b      	ldrb	r3, [r3, r2]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e042      	b.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2238      	movs	r2, #56	; 0x38
 8003e44:	2101      	movs	r1, #1
 8003e46:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2239      	movs	r2, #57	; 0x39
 8003e4c:	2102      	movs	r1, #2
 8003e4e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2270      	movs	r2, #112	; 0x70
 8003e64:	4393      	bics	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	2380      	movs	r3, #128	; 0x80
 8003e80:	05db      	lsls	r3, r3, #23
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d009      	beq.n	8003e9a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a11      	ldr	r2, [pc, #68]	; (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d004      	beq.n	8003e9a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a0f      	ldr	r2, [pc, #60]	; (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d10c      	bne.n	8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2280      	movs	r2, #128	; 0x80
 8003e9e:	4393      	bics	r3, r2
 8003ea0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2239      	movs	r2, #57	; 0x39
 8003eb8:	2101      	movs	r1, #1
 8003eba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2238      	movs	r2, #56	; 0x38
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	b004      	add	sp, #16
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	40010800 	.word	0x40010800
 8003ed4:	40011400 	.word	0x40011400

08003ed8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e044      	b.n	8003f74 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d107      	bne.n	8003f02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2274      	movs	r2, #116	; 0x74
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	0018      	movs	r0, r3
 8003efe:	f7fd f861 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2224      	movs	r2, #36	; 0x24
 8003f06:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2101      	movs	r1, #1
 8003f14:	438a      	bics	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f000 fbce 	bl	80046bc <UART_SetConfig>
 8003f20:	0003      	movs	r3, r0
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e024      	b.n	8003f74 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	0018      	movs	r0, r3
 8003f36:	f000 fe0b 	bl	8004b50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	490d      	ldr	r1, [pc, #52]	; (8003f7c <HAL_UART_Init+0xa4>)
 8003f46:	400a      	ands	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	212a      	movs	r1, #42	; 0x2a
 8003f56:	438a      	bics	r2, r1
 8003f58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2101      	movs	r1, #1
 8003f66:	430a      	orrs	r2, r1
 8003f68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f000 fea3 	bl	8004cb8 <UART_CheckIdleState>
 8003f72:	0003      	movs	r3, r0
}
 8003f74:	0018      	movs	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b002      	add	sp, #8
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	ffffb7ff 	.word	0xffffb7ff

08003f80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	1dbb      	adds	r3, r7, #6
 8003f8e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d000      	beq.n	8003f9a <HAL_UART_Transmit+0x1a>
 8003f98:	e095      	b.n	80040c6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_UART_Transmit+0x28>
 8003fa0:	1dbb      	adds	r3, r7, #6
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e08d      	b.n	80040c8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	015b      	lsls	r3, r3, #5
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d109      	bne.n	8003fcc <HAL_UART_Transmit+0x4c>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d105      	bne.n	8003fcc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d001      	beq.n	8003fcc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e07d      	b.n	80040c8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2274      	movs	r2, #116	; 0x74
 8003fd0:	5c9b      	ldrb	r3, [r3, r2]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_UART_Transmit+0x5a>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e076      	b.n	80040c8 <HAL_UART_Transmit+0x148>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2274      	movs	r2, #116	; 0x74
 8003fde:	2101      	movs	r1, #1
 8003fe0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2280      	movs	r2, #128	; 0x80
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2221      	movs	r2, #33	; 0x21
 8003fee:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ff0:	f7fd f91c 	bl	800122c <HAL_GetTick>
 8003ff4:	0003      	movs	r3, r0
 8003ff6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	1dba      	adds	r2, r7, #6
 8003ffc:	2150      	movs	r1, #80	; 0x50
 8003ffe:	8812      	ldrh	r2, [r2, #0]
 8004000:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	1dba      	adds	r2, r7, #6
 8004006:	2152      	movs	r1, #82	; 0x52
 8004008:	8812      	ldrh	r2, [r2, #0]
 800400a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	2380      	movs	r3, #128	; 0x80
 8004012:	015b      	lsls	r3, r3, #5
 8004014:	429a      	cmp	r2, r3
 8004016:	d108      	bne.n	800402a <HAL_UART_Transmit+0xaa>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d104      	bne.n	800402a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004020:	2300      	movs	r3, #0
 8004022:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	61bb      	str	r3, [r7, #24]
 8004028:	e003      	b.n	8004032 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800402e:	2300      	movs	r3, #0
 8004030:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2274      	movs	r2, #116	; 0x74
 8004036:	2100      	movs	r1, #0
 8004038:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800403a:	e02c      	b.n	8004096 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	0013      	movs	r3, r2
 8004046:	2200      	movs	r2, #0
 8004048:	2180      	movs	r1, #128	; 0x80
 800404a:	f000 fe7d 	bl	8004d48 <UART_WaitOnFlagUntilTimeout>
 800404e:	1e03      	subs	r3, r0, #0
 8004050:	d001      	beq.n	8004056 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e038      	b.n	80040c8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10b      	bne.n	8004074 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	001a      	movs	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	05d2      	lsls	r2, r2, #23
 8004068:	0dd2      	lsrs	r2, r2, #23
 800406a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	3302      	adds	r3, #2
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	e007      	b.n	8004084 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	781a      	ldrb	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	3301      	adds	r3, #1
 8004082:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2252      	movs	r2, #82	; 0x52
 8004088:	5a9b      	ldrh	r3, [r3, r2]
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b299      	uxth	r1, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2252      	movs	r2, #82	; 0x52
 8004094:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2252      	movs	r2, #82	; 0x52
 800409a:	5a9b      	ldrh	r3, [r3, r2]
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1cc      	bne.n	800403c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	0013      	movs	r3, r2
 80040ac:	2200      	movs	r2, #0
 80040ae:	2140      	movs	r1, #64	; 0x40
 80040b0:	f000 fe4a 	bl	8004d48 <UART_WaitOnFlagUntilTimeout>
 80040b4:	1e03      	subs	r3, r0, #0
 80040b6:	d001      	beq.n	80040bc <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e005      	b.n	80040c8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2220      	movs	r2, #32
 80040c0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	e000      	b.n	80040c8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80040c6:	2302      	movs	r3, #2
  }
}
 80040c8:	0018      	movs	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b008      	add	sp, #32
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040d0:	b590      	push	{r4, r7, lr}
 80040d2:	b0ab      	sub	sp, #172	; 0xac
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	22a4      	movs	r2, #164	; 0xa4
 80040e0:	18b9      	adds	r1, r7, r2
 80040e2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	20a0      	movs	r0, #160	; 0xa0
 80040ec:	1839      	adds	r1, r7, r0
 80040ee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	219c      	movs	r1, #156	; 0x9c
 80040f8:	1879      	adds	r1, r7, r1
 80040fa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040fc:	0011      	movs	r1, r2
 80040fe:	18bb      	adds	r3, r7, r2
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a99      	ldr	r2, [pc, #612]	; (8004368 <HAL_UART_IRQHandler+0x298>)
 8004104:	4013      	ands	r3, r2
 8004106:	2298      	movs	r2, #152	; 0x98
 8004108:	18bc      	adds	r4, r7, r2
 800410a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800410c:	18bb      	adds	r3, r7, r2
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d114      	bne.n	800413e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004114:	187b      	adds	r3, r7, r1
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2220      	movs	r2, #32
 800411a:	4013      	ands	r3, r2
 800411c:	d00f      	beq.n	800413e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800411e:	183b      	adds	r3, r7, r0
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2220      	movs	r2, #32
 8004124:	4013      	ands	r3, r2
 8004126:	d00a      	beq.n	800413e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800412c:	2b00      	cmp	r3, #0
 800412e:	d100      	bne.n	8004132 <HAL_UART_IRQHandler+0x62>
 8004130:	e298      	b.n	8004664 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	0010      	movs	r0, r2
 800413a:	4798      	blx	r3
      }
      return;
 800413c:	e292      	b.n	8004664 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800413e:	2398      	movs	r3, #152	; 0x98
 8004140:	18fb      	adds	r3, r7, r3
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d100      	bne.n	800414a <HAL_UART_IRQHandler+0x7a>
 8004148:	e114      	b.n	8004374 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800414a:	239c      	movs	r3, #156	; 0x9c
 800414c:	18fb      	adds	r3, r7, r3
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2201      	movs	r2, #1
 8004152:	4013      	ands	r3, r2
 8004154:	d106      	bne.n	8004164 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004156:	23a0      	movs	r3, #160	; 0xa0
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a83      	ldr	r2, [pc, #524]	; (800436c <HAL_UART_IRQHandler+0x29c>)
 800415e:	4013      	ands	r3, r2
 8004160:	d100      	bne.n	8004164 <HAL_UART_IRQHandler+0x94>
 8004162:	e107      	b.n	8004374 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004164:	23a4      	movs	r3, #164	; 0xa4
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2201      	movs	r2, #1
 800416c:	4013      	ands	r3, r2
 800416e:	d012      	beq.n	8004196 <HAL_UART_IRQHandler+0xc6>
 8004170:	23a0      	movs	r3, #160	; 0xa0
 8004172:	18fb      	adds	r3, r7, r3
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	2380      	movs	r3, #128	; 0x80
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	4013      	ands	r3, r2
 800417c:	d00b      	beq.n	8004196 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2201      	movs	r2, #1
 8004184:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2280      	movs	r2, #128	; 0x80
 800418a:	589b      	ldr	r3, [r3, r2]
 800418c:	2201      	movs	r2, #1
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2180      	movs	r1, #128	; 0x80
 8004194:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004196:	23a4      	movs	r3, #164	; 0xa4
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2202      	movs	r2, #2
 800419e:	4013      	ands	r3, r2
 80041a0:	d011      	beq.n	80041c6 <HAL_UART_IRQHandler+0xf6>
 80041a2:	239c      	movs	r3, #156	; 0x9c
 80041a4:	18fb      	adds	r3, r7, r3
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2201      	movs	r2, #1
 80041aa:	4013      	ands	r3, r2
 80041ac:	d00b      	beq.n	80041c6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2202      	movs	r2, #2
 80041b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2280      	movs	r2, #128	; 0x80
 80041ba:	589b      	ldr	r3, [r3, r2]
 80041bc:	2204      	movs	r2, #4
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2180      	movs	r1, #128	; 0x80
 80041c4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041c6:	23a4      	movs	r3, #164	; 0xa4
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2204      	movs	r2, #4
 80041ce:	4013      	ands	r3, r2
 80041d0:	d011      	beq.n	80041f6 <HAL_UART_IRQHandler+0x126>
 80041d2:	239c      	movs	r3, #156	; 0x9c
 80041d4:	18fb      	adds	r3, r7, r3
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2201      	movs	r2, #1
 80041da:	4013      	ands	r3, r2
 80041dc:	d00b      	beq.n	80041f6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2204      	movs	r2, #4
 80041e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2280      	movs	r2, #128	; 0x80
 80041ea:	589b      	ldr	r3, [r3, r2]
 80041ec:	2202      	movs	r2, #2
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2180      	movs	r1, #128	; 0x80
 80041f4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041f6:	23a4      	movs	r3, #164	; 0xa4
 80041f8:	18fb      	adds	r3, r7, r3
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2208      	movs	r2, #8
 80041fe:	4013      	ands	r3, r2
 8004200:	d017      	beq.n	8004232 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004202:	23a0      	movs	r3, #160	; 0xa0
 8004204:	18fb      	adds	r3, r7, r3
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2220      	movs	r2, #32
 800420a:	4013      	ands	r3, r2
 800420c:	d105      	bne.n	800421a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800420e:	239c      	movs	r3, #156	; 0x9c
 8004210:	18fb      	adds	r3, r7, r3
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2201      	movs	r2, #1
 8004216:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004218:	d00b      	beq.n	8004232 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2208      	movs	r2, #8
 8004220:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2280      	movs	r2, #128	; 0x80
 8004226:	589b      	ldr	r3, [r3, r2]
 8004228:	2208      	movs	r2, #8
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2180      	movs	r1, #128	; 0x80
 8004230:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004232:	23a4      	movs	r3, #164	; 0xa4
 8004234:	18fb      	adds	r3, r7, r3
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	2380      	movs	r3, #128	; 0x80
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	4013      	ands	r3, r2
 800423e:	d013      	beq.n	8004268 <HAL_UART_IRQHandler+0x198>
 8004240:	23a0      	movs	r3, #160	; 0xa0
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	2380      	movs	r3, #128	; 0x80
 8004248:	04db      	lsls	r3, r3, #19
 800424a:	4013      	ands	r3, r2
 800424c:	d00c      	beq.n	8004268 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2280      	movs	r2, #128	; 0x80
 8004254:	0112      	lsls	r2, r2, #4
 8004256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2280      	movs	r2, #128	; 0x80
 800425c:	589b      	ldr	r3, [r3, r2]
 800425e:	2220      	movs	r2, #32
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2180      	movs	r1, #128	; 0x80
 8004266:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2280      	movs	r2, #128	; 0x80
 800426c:	589b      	ldr	r3, [r3, r2]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d100      	bne.n	8004274 <HAL_UART_IRQHandler+0x1a4>
 8004272:	e1f9      	b.n	8004668 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004274:	23a4      	movs	r3, #164	; 0xa4
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2220      	movs	r2, #32
 800427c:	4013      	ands	r3, r2
 800427e:	d00e      	beq.n	800429e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004280:	23a0      	movs	r3, #160	; 0xa0
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2220      	movs	r2, #32
 8004288:	4013      	ands	r3, r2
 800428a:	d008      	beq.n	800429e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004290:	2b00      	cmp	r3, #0
 8004292:	d004      	beq.n	800429e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	0010      	movs	r0, r2
 800429c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2280      	movs	r2, #128	; 0x80
 80042a2:	589b      	ldr	r3, [r3, r2]
 80042a4:	2194      	movs	r1, #148	; 0x94
 80042a6:	187a      	adds	r2, r7, r1
 80042a8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2240      	movs	r2, #64	; 0x40
 80042b2:	4013      	ands	r3, r2
 80042b4:	2b40      	cmp	r3, #64	; 0x40
 80042b6:	d004      	beq.n	80042c2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80042b8:	187b      	adds	r3, r7, r1
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2228      	movs	r2, #40	; 0x28
 80042be:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042c0:	d047      	beq.n	8004352 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	0018      	movs	r0, r3
 80042c6:	f000 fe03 	bl	8004ed0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2240      	movs	r2, #64	; 0x40
 80042d2:	4013      	ands	r3, r2
 80042d4:	2b40      	cmp	r3, #64	; 0x40
 80042d6:	d137      	bne.n	8004348 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d8:	f3ef 8310 	mrs	r3, PRIMASK
 80042dc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80042de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042e0:	2090      	movs	r0, #144	; 0x90
 80042e2:	183a      	adds	r2, r7, r0
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	2301      	movs	r3, #1
 80042e8:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042ec:	f383 8810 	msr	PRIMASK, r3
}
 80042f0:	46c0      	nop			; (mov r8, r8)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2140      	movs	r1, #64	; 0x40
 80042fe:	438a      	bics	r2, r1
 8004300:	609a      	str	r2, [r3, #8]
 8004302:	183b      	adds	r3, r7, r0
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800430a:	f383 8810 	msr	PRIMASK, r3
}
 800430e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	2b00      	cmp	r3, #0
 8004316:	d012      	beq.n	800433e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431c:	4a14      	ldr	r2, [pc, #80]	; (8004370 <HAL_UART_IRQHandler+0x2a0>)
 800431e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	0018      	movs	r0, r3
 8004326:	f7fd f8a9 	bl	800147c <HAL_DMA_Abort_IT>
 800432a:	1e03      	subs	r3, r0, #0
 800432c:	d01a      	beq.n	8004364 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	0018      	movs	r0, r3
 800433a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800433c:	e012      	b.n	8004364 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	0018      	movs	r0, r3
 8004342:	f000 f9a7 	bl	8004694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004346:	e00d      	b.n	8004364 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	0018      	movs	r0, r3
 800434c:	f000 f9a2 	bl	8004694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004350:	e008      	b.n	8004364 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	0018      	movs	r0, r3
 8004356:	f000 f99d 	bl	8004694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2280      	movs	r2, #128	; 0x80
 800435e:	2100      	movs	r1, #0
 8004360:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004362:	e181      	b.n	8004668 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004364:	46c0      	nop			; (mov r8, r8)
    return;
 8004366:	e17f      	b.n	8004668 <HAL_UART_IRQHandler+0x598>
 8004368:	0000080f 	.word	0x0000080f
 800436c:	04000120 	.word	0x04000120
 8004370:	08004f95 	.word	0x08004f95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004378:	2b01      	cmp	r3, #1
 800437a:	d000      	beq.n	800437e <HAL_UART_IRQHandler+0x2ae>
 800437c:	e133      	b.n	80045e6 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800437e:	23a4      	movs	r3, #164	; 0xa4
 8004380:	18fb      	adds	r3, r7, r3
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2210      	movs	r2, #16
 8004386:	4013      	ands	r3, r2
 8004388:	d100      	bne.n	800438c <HAL_UART_IRQHandler+0x2bc>
 800438a:	e12c      	b.n	80045e6 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800438c:	23a0      	movs	r3, #160	; 0xa0
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2210      	movs	r2, #16
 8004394:	4013      	ands	r3, r2
 8004396:	d100      	bne.n	800439a <HAL_UART_IRQHandler+0x2ca>
 8004398:	e125      	b.n	80045e6 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2210      	movs	r2, #16
 80043a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2240      	movs	r2, #64	; 0x40
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b40      	cmp	r3, #64	; 0x40
 80043ae:	d000      	beq.n	80043b2 <HAL_UART_IRQHandler+0x2e2>
 80043b0:	e09d      	b.n	80044ee <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	217e      	movs	r1, #126	; 0x7e
 80043bc:	187b      	adds	r3, r7, r1
 80043be:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80043c0:	187b      	adds	r3, r7, r1
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d100      	bne.n	80043ca <HAL_UART_IRQHandler+0x2fa>
 80043c8:	e150      	b.n	800466c <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2258      	movs	r2, #88	; 0x58
 80043ce:	5a9b      	ldrh	r3, [r3, r2]
 80043d0:	187a      	adds	r2, r7, r1
 80043d2:	8812      	ldrh	r2, [r2, #0]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d300      	bcc.n	80043da <HAL_UART_IRQHandler+0x30a>
 80043d8:	e148      	b.n	800466c <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	187a      	adds	r2, r7, r1
 80043de:	215a      	movs	r1, #90	; 0x5a
 80043e0:	8812      	ldrh	r2, [r2, #0]
 80043e2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2220      	movs	r2, #32
 80043ee:	4013      	ands	r3, r2
 80043f0:	d16e      	bne.n	80044d0 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043f2:	f3ef 8310 	mrs	r3, PRIMASK
 80043f6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80043f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80043fc:	2301      	movs	r3, #1
 80043fe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004402:	f383 8810 	msr	PRIMASK, r3
}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	499a      	ldr	r1, [pc, #616]	; (800467c <HAL_UART_IRQHandler+0x5ac>)
 8004414:	400a      	ands	r2, r1
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800441a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800441c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441e:	f383 8810 	msr	PRIMASK, r3
}
 8004422:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004424:	f3ef 8310 	mrs	r3, PRIMASK
 8004428:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800442a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442c:	677b      	str	r3, [r7, #116]	; 0x74
 800442e:	2301      	movs	r3, #1
 8004430:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004434:	f383 8810 	msr	PRIMASK, r3
}
 8004438:	46c0      	nop			; (mov r8, r8)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2101      	movs	r1, #1
 8004446:	438a      	bics	r2, r1
 8004448:	609a      	str	r2, [r3, #8]
 800444a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800444c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800444e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004450:	f383 8810 	msr	PRIMASK, r3
}
 8004454:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004456:	f3ef 8310 	mrs	r3, PRIMASK
 800445a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800445c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800445e:	673b      	str	r3, [r7, #112]	; 0x70
 8004460:	2301      	movs	r3, #1
 8004462:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004466:	f383 8810 	msr	PRIMASK, r3
}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2140      	movs	r1, #64	; 0x40
 8004478:	438a      	bics	r2, r1
 800447a:	609a      	str	r2, [r3, #8]
 800447c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800447e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004482:	f383 8810 	msr	PRIMASK, r3
}
 8004486:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2220      	movs	r2, #32
 800448c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004494:	f3ef 8310 	mrs	r3, PRIMASK
 8004498:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800449a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800449c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800449e:	2301      	movs	r3, #1
 80044a0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044a4:	f383 8810 	msr	PRIMASK, r3
}
 80044a8:	46c0      	nop			; (mov r8, r8)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2110      	movs	r1, #16
 80044b6:	438a      	bics	r2, r1
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c0:	f383 8810 	msr	PRIMASK, r3
}
 80044c4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ca:	0018      	movs	r0, r3
 80044cc:	f7fc ff96 	bl	80013fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2258      	movs	r2, #88	; 0x58
 80044d4:	5a9a      	ldrh	r2, [r3, r2]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	215a      	movs	r1, #90	; 0x5a
 80044da:	5a5b      	ldrh	r3, [r3, r1]
 80044dc:	b29b      	uxth	r3, r3
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	0011      	movs	r1, r2
 80044e6:	0018      	movs	r0, r3
 80044e8:	f000 f8dc 	bl	80046a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044ec:	e0be      	b.n	800466c <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2258      	movs	r2, #88	; 0x58
 80044f2:	5a99      	ldrh	r1, [r3, r2]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	225a      	movs	r2, #90	; 0x5a
 80044f8:	5a9b      	ldrh	r3, [r3, r2]
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	208e      	movs	r0, #142	; 0x8e
 80044fe:	183b      	adds	r3, r7, r0
 8004500:	1a8a      	subs	r2, r1, r2
 8004502:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	225a      	movs	r2, #90	; 0x5a
 8004508:	5a9b      	ldrh	r3, [r3, r2]
 800450a:	b29b      	uxth	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d100      	bne.n	8004512 <HAL_UART_IRQHandler+0x442>
 8004510:	e0ae      	b.n	8004670 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8004512:	183b      	adds	r3, r7, r0
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d100      	bne.n	800451c <HAL_UART_IRQHandler+0x44c>
 800451a:	e0a9      	b.n	8004670 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800451c:	f3ef 8310 	mrs	r3, PRIMASK
 8004520:	60fb      	str	r3, [r7, #12]
  return(result);
 8004522:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004524:	2488      	movs	r4, #136	; 0x88
 8004526:	193a      	adds	r2, r7, r4
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	2301      	movs	r3, #1
 800452c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f383 8810 	msr	PRIMASK, r3
}
 8004534:	46c0      	nop			; (mov r8, r8)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	494f      	ldr	r1, [pc, #316]	; (8004680 <HAL_UART_IRQHandler+0x5b0>)
 8004542:	400a      	ands	r2, r1
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	193b      	adds	r3, r7, r4
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f383 8810 	msr	PRIMASK, r3
}
 8004552:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004554:	f3ef 8310 	mrs	r3, PRIMASK
 8004558:	61bb      	str	r3, [r7, #24]
  return(result);
 800455a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455c:	2484      	movs	r4, #132	; 0x84
 800455e:	193a      	adds	r2, r7, r4
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	2301      	movs	r3, #1
 8004564:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	f383 8810 	msr	PRIMASK, r3
}
 800456c:	46c0      	nop			; (mov r8, r8)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2101      	movs	r1, #1
 800457a:	438a      	bics	r2, r1
 800457c:	609a      	str	r2, [r3, #8]
 800457e:	193b      	adds	r3, r7, r4
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	f383 8810 	msr	PRIMASK, r3
}
 800458a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800459e:	f3ef 8310 	mrs	r3, PRIMASK
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a6:	2480      	movs	r4, #128	; 0x80
 80045a8:	193a      	adds	r2, r7, r4
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	2301      	movs	r3, #1
 80045ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b2:	f383 8810 	msr	PRIMASK, r3
}
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2110      	movs	r1, #16
 80045c4:	438a      	bics	r2, r1
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	193b      	adds	r3, r7, r4
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d0:	f383 8810 	msr	PRIMASK, r3
}
 80045d4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045d6:	183b      	adds	r3, r7, r0
 80045d8:	881a      	ldrh	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	0011      	movs	r1, r2
 80045de:	0018      	movs	r0, r3
 80045e0:	f000 f860 	bl	80046a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045e4:	e044      	b.n	8004670 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045e6:	23a4      	movs	r3, #164	; 0xa4
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	2380      	movs	r3, #128	; 0x80
 80045ee:	035b      	lsls	r3, r3, #13
 80045f0:	4013      	ands	r3, r2
 80045f2:	d010      	beq.n	8004616 <HAL_UART_IRQHandler+0x546>
 80045f4:	239c      	movs	r3, #156	; 0x9c
 80045f6:	18fb      	adds	r3, r7, r3
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	2380      	movs	r3, #128	; 0x80
 80045fc:	03db      	lsls	r3, r3, #15
 80045fe:	4013      	ands	r3, r2
 8004600:	d009      	beq.n	8004616 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2280      	movs	r2, #128	; 0x80
 8004608:	0352      	lsls	r2, r2, #13
 800460a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	0018      	movs	r0, r3
 8004610:	f000 fd02 	bl	8005018 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004614:	e02f      	b.n	8004676 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004616:	23a4      	movs	r3, #164	; 0xa4
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2280      	movs	r2, #128	; 0x80
 800461e:	4013      	ands	r3, r2
 8004620:	d00f      	beq.n	8004642 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004622:	23a0      	movs	r3, #160	; 0xa0
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2280      	movs	r2, #128	; 0x80
 800462a:	4013      	ands	r3, r2
 800462c:	d009      	beq.n	8004642 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004632:	2b00      	cmp	r3, #0
 8004634:	d01e      	beq.n	8004674 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	0010      	movs	r0, r2
 800463e:	4798      	blx	r3
    }
    return;
 8004640:	e018      	b.n	8004674 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004642:	23a4      	movs	r3, #164	; 0xa4
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2240      	movs	r2, #64	; 0x40
 800464a:	4013      	ands	r3, r2
 800464c:	d013      	beq.n	8004676 <HAL_UART_IRQHandler+0x5a6>
 800464e:	23a0      	movs	r3, #160	; 0xa0
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2240      	movs	r2, #64	; 0x40
 8004656:	4013      	ands	r3, r2
 8004658:	d00d      	beq.n	8004676 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	0018      	movs	r0, r3
 800465e:	f000 fcb0 	bl	8004fc2 <UART_EndTransmit_IT>
    return;
 8004662:	e008      	b.n	8004676 <HAL_UART_IRQHandler+0x5a6>
      return;
 8004664:	46c0      	nop			; (mov r8, r8)
 8004666:	e006      	b.n	8004676 <HAL_UART_IRQHandler+0x5a6>
    return;
 8004668:	46c0      	nop			; (mov r8, r8)
 800466a:	e004      	b.n	8004676 <HAL_UART_IRQHandler+0x5a6>
      return;
 800466c:	46c0      	nop			; (mov r8, r8)
 800466e:	e002      	b.n	8004676 <HAL_UART_IRQHandler+0x5a6>
      return;
 8004670:	46c0      	nop			; (mov r8, r8)
 8004672:	e000      	b.n	8004676 <HAL_UART_IRQHandler+0x5a6>
    return;
 8004674:	46c0      	nop			; (mov r8, r8)
  }

}
 8004676:	46bd      	mov	sp, r7
 8004678:	b02b      	add	sp, #172	; 0xac
 800467a:	bd90      	pop	{r4, r7, pc}
 800467c:	fffffeff 	.word	0xfffffeff
 8004680:	fffffedf 	.word	0xfffffedf

08004684 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800468c:	46c0      	nop			; (mov r8, r8)
 800468e:	46bd      	mov	sp, r7
 8004690:	b002      	add	sp, #8
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800469c:	46c0      	nop			; (mov r8, r8)
 800469e:	46bd      	mov	sp, r7
 80046a0:	b002      	add	sp, #8
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	000a      	movs	r2, r1
 80046ae:	1cbb      	adds	r3, r7, #2
 80046b0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b002      	add	sp, #8
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046bc:	b5b0      	push	{r4, r5, r7, lr}
 80046be:	b08e      	sub	sp, #56	; 0x38
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046c4:	231a      	movs	r3, #26
 80046c6:	2218      	movs	r2, #24
 80046c8:	189b      	adds	r3, r3, r2
 80046ca:	19db      	adds	r3, r3, r7
 80046cc:	2200      	movs	r2, #0
 80046ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	431a      	orrs	r2, r3
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	431a      	orrs	r2, r3
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4ab4      	ldr	r2, [pc, #720]	; (80049c0 <UART_SetConfig+0x304>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	0019      	movs	r1, r3
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046fa:	430a      	orrs	r2, r1
 80046fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4aaf      	ldr	r2, [pc, #700]	; (80049c4 <UART_SetConfig+0x308>)
 8004706:	4013      	ands	r3, r2
 8004708:	0019      	movs	r1, r3
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4aa9      	ldr	r2, [pc, #676]	; (80049c8 <UART_SetConfig+0x30c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d004      	beq.n	8004730 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800472c:	4313      	orrs	r3, r2
 800472e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	4aa5      	ldr	r2, [pc, #660]	; (80049cc <UART_SetConfig+0x310>)
 8004738:	4013      	ands	r3, r2
 800473a:	0019      	movs	r1, r3
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004742:	430a      	orrs	r2, r1
 8004744:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4aa1      	ldr	r2, [pc, #644]	; (80049d0 <UART_SetConfig+0x314>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d131      	bne.n	80047b4 <UART_SetConfig+0xf8>
 8004750:	4ba0      	ldr	r3, [pc, #640]	; (80049d4 <UART_SetConfig+0x318>)
 8004752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004754:	220c      	movs	r2, #12
 8004756:	4013      	ands	r3, r2
 8004758:	2b0c      	cmp	r3, #12
 800475a:	d01d      	beq.n	8004798 <UART_SetConfig+0xdc>
 800475c:	d823      	bhi.n	80047a6 <UART_SetConfig+0xea>
 800475e:	2b08      	cmp	r3, #8
 8004760:	d00c      	beq.n	800477c <UART_SetConfig+0xc0>
 8004762:	d820      	bhi.n	80047a6 <UART_SetConfig+0xea>
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <UART_SetConfig+0xb2>
 8004768:	2b04      	cmp	r3, #4
 800476a:	d00e      	beq.n	800478a <UART_SetConfig+0xce>
 800476c:	e01b      	b.n	80047a6 <UART_SetConfig+0xea>
 800476e:	231b      	movs	r3, #27
 8004770:	2218      	movs	r2, #24
 8004772:	189b      	adds	r3, r3, r2
 8004774:	19db      	adds	r3, r3, r7
 8004776:	2200      	movs	r2, #0
 8004778:	701a      	strb	r2, [r3, #0]
 800477a:	e065      	b.n	8004848 <UART_SetConfig+0x18c>
 800477c:	231b      	movs	r3, #27
 800477e:	2218      	movs	r2, #24
 8004780:	189b      	adds	r3, r3, r2
 8004782:	19db      	adds	r3, r3, r7
 8004784:	2202      	movs	r2, #2
 8004786:	701a      	strb	r2, [r3, #0]
 8004788:	e05e      	b.n	8004848 <UART_SetConfig+0x18c>
 800478a:	231b      	movs	r3, #27
 800478c:	2218      	movs	r2, #24
 800478e:	189b      	adds	r3, r3, r2
 8004790:	19db      	adds	r3, r3, r7
 8004792:	2204      	movs	r2, #4
 8004794:	701a      	strb	r2, [r3, #0]
 8004796:	e057      	b.n	8004848 <UART_SetConfig+0x18c>
 8004798:	231b      	movs	r3, #27
 800479a:	2218      	movs	r2, #24
 800479c:	189b      	adds	r3, r3, r2
 800479e:	19db      	adds	r3, r3, r7
 80047a0:	2208      	movs	r2, #8
 80047a2:	701a      	strb	r2, [r3, #0]
 80047a4:	e050      	b.n	8004848 <UART_SetConfig+0x18c>
 80047a6:	231b      	movs	r3, #27
 80047a8:	2218      	movs	r2, #24
 80047aa:	189b      	adds	r3, r3, r2
 80047ac:	19db      	adds	r3, r3, r7
 80047ae:	2210      	movs	r2, #16
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	e049      	b.n	8004848 <UART_SetConfig+0x18c>
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a83      	ldr	r2, [pc, #524]	; (80049c8 <UART_SetConfig+0x30c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d13e      	bne.n	800483c <UART_SetConfig+0x180>
 80047be:	4b85      	ldr	r3, [pc, #532]	; (80049d4 <UART_SetConfig+0x318>)
 80047c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047c2:	23c0      	movs	r3, #192	; 0xc0
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	4013      	ands	r3, r2
 80047c8:	22c0      	movs	r2, #192	; 0xc0
 80047ca:	0112      	lsls	r2, r2, #4
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d027      	beq.n	8004820 <UART_SetConfig+0x164>
 80047d0:	22c0      	movs	r2, #192	; 0xc0
 80047d2:	0112      	lsls	r2, r2, #4
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d82a      	bhi.n	800482e <UART_SetConfig+0x172>
 80047d8:	2280      	movs	r2, #128	; 0x80
 80047da:	0112      	lsls	r2, r2, #4
 80047dc:	4293      	cmp	r3, r2
 80047de:	d011      	beq.n	8004804 <UART_SetConfig+0x148>
 80047e0:	2280      	movs	r2, #128	; 0x80
 80047e2:	0112      	lsls	r2, r2, #4
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d822      	bhi.n	800482e <UART_SetConfig+0x172>
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d004      	beq.n	80047f6 <UART_SetConfig+0x13a>
 80047ec:	2280      	movs	r2, #128	; 0x80
 80047ee:	00d2      	lsls	r2, r2, #3
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00e      	beq.n	8004812 <UART_SetConfig+0x156>
 80047f4:	e01b      	b.n	800482e <UART_SetConfig+0x172>
 80047f6:	231b      	movs	r3, #27
 80047f8:	2218      	movs	r2, #24
 80047fa:	189b      	adds	r3, r3, r2
 80047fc:	19db      	adds	r3, r3, r7
 80047fe:	2200      	movs	r2, #0
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	e021      	b.n	8004848 <UART_SetConfig+0x18c>
 8004804:	231b      	movs	r3, #27
 8004806:	2218      	movs	r2, #24
 8004808:	189b      	adds	r3, r3, r2
 800480a:	19db      	adds	r3, r3, r7
 800480c:	2202      	movs	r2, #2
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	e01a      	b.n	8004848 <UART_SetConfig+0x18c>
 8004812:	231b      	movs	r3, #27
 8004814:	2218      	movs	r2, #24
 8004816:	189b      	adds	r3, r3, r2
 8004818:	19db      	adds	r3, r3, r7
 800481a:	2204      	movs	r2, #4
 800481c:	701a      	strb	r2, [r3, #0]
 800481e:	e013      	b.n	8004848 <UART_SetConfig+0x18c>
 8004820:	231b      	movs	r3, #27
 8004822:	2218      	movs	r2, #24
 8004824:	189b      	adds	r3, r3, r2
 8004826:	19db      	adds	r3, r3, r7
 8004828:	2208      	movs	r2, #8
 800482a:	701a      	strb	r2, [r3, #0]
 800482c:	e00c      	b.n	8004848 <UART_SetConfig+0x18c>
 800482e:	231b      	movs	r3, #27
 8004830:	2218      	movs	r2, #24
 8004832:	189b      	adds	r3, r3, r2
 8004834:	19db      	adds	r3, r3, r7
 8004836:	2210      	movs	r2, #16
 8004838:	701a      	strb	r2, [r3, #0]
 800483a:	e005      	b.n	8004848 <UART_SetConfig+0x18c>
 800483c:	231b      	movs	r3, #27
 800483e:	2218      	movs	r2, #24
 8004840:	189b      	adds	r3, r3, r2
 8004842:	19db      	adds	r3, r3, r7
 8004844:	2210      	movs	r2, #16
 8004846:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a5e      	ldr	r2, [pc, #376]	; (80049c8 <UART_SetConfig+0x30c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d000      	beq.n	8004854 <UART_SetConfig+0x198>
 8004852:	e084      	b.n	800495e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004854:	231b      	movs	r3, #27
 8004856:	2218      	movs	r2, #24
 8004858:	189b      	adds	r3, r3, r2
 800485a:	19db      	adds	r3, r3, r7
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b08      	cmp	r3, #8
 8004860:	d01d      	beq.n	800489e <UART_SetConfig+0x1e2>
 8004862:	dc20      	bgt.n	80048a6 <UART_SetConfig+0x1ea>
 8004864:	2b04      	cmp	r3, #4
 8004866:	d015      	beq.n	8004894 <UART_SetConfig+0x1d8>
 8004868:	dc1d      	bgt.n	80048a6 <UART_SetConfig+0x1ea>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <UART_SetConfig+0x1b8>
 800486e:	2b02      	cmp	r3, #2
 8004870:	d005      	beq.n	800487e <UART_SetConfig+0x1c2>
 8004872:	e018      	b.n	80048a6 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004874:	f7fd fd8e 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 8004878:	0003      	movs	r3, r0
 800487a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800487c:	e01c      	b.n	80048b8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800487e:	4b55      	ldr	r3, [pc, #340]	; (80049d4 <UART_SetConfig+0x318>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2210      	movs	r2, #16
 8004884:	4013      	ands	r3, r2
 8004886:	d002      	beq.n	800488e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004888:	4b53      	ldr	r3, [pc, #332]	; (80049d8 <UART_SetConfig+0x31c>)
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800488c:	e014      	b.n	80048b8 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800488e:	4b53      	ldr	r3, [pc, #332]	; (80049dc <UART_SetConfig+0x320>)
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004892:	e011      	b.n	80048b8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004894:	f7fd fcce 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 8004898:	0003      	movs	r3, r0
 800489a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800489c:	e00c      	b.n	80048b8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800489e:	2380      	movs	r3, #128	; 0x80
 80048a0:	021b      	lsls	r3, r3, #8
 80048a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048a4:	e008      	b.n	80048b8 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80048aa:	231a      	movs	r3, #26
 80048ac:	2218      	movs	r2, #24
 80048ae:	189b      	adds	r3, r3, r2
 80048b0:	19db      	adds	r3, r3, r7
 80048b2:	2201      	movs	r2, #1
 80048b4:	701a      	strb	r2, [r3, #0]
        break;
 80048b6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d100      	bne.n	80048c0 <UART_SetConfig+0x204>
 80048be:	e130      	b.n	8004b22 <UART_SetConfig+0x466>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	0013      	movs	r3, r2
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	189b      	adds	r3, r3, r2
 80048ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d305      	bcc.n	80048dc <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048d8:	429a      	cmp	r2, r3
 80048da:	d906      	bls.n	80048ea <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80048dc:	231a      	movs	r3, #26
 80048de:	2218      	movs	r2, #24
 80048e0:	189b      	adds	r3, r3, r2
 80048e2:	19db      	adds	r3, r3, r7
 80048e4:	2201      	movs	r2, #1
 80048e6:	701a      	strb	r2, [r3, #0]
 80048e8:	e11b      	b.n	8004b22 <UART_SetConfig+0x466>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	2300      	movs	r3, #0
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	6939      	ldr	r1, [r7, #16]
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	000b      	movs	r3, r1
 80048f8:	0e1b      	lsrs	r3, r3, #24
 80048fa:	0010      	movs	r0, r2
 80048fc:	0205      	lsls	r5, r0, #8
 80048fe:	431d      	orrs	r5, r3
 8004900:	000b      	movs	r3, r1
 8004902:	021c      	lsls	r4, r3, #8
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	60bb      	str	r3, [r7, #8]
 800490c:	2300      	movs	r3, #0
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	68b8      	ldr	r0, [r7, #8]
 8004912:	68f9      	ldr	r1, [r7, #12]
 8004914:	1900      	adds	r0, r0, r4
 8004916:	4169      	adcs	r1, r5
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	603b      	str	r3, [r7, #0]
 800491e:	2300      	movs	r3, #0
 8004920:	607b      	str	r3, [r7, #4]
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f7fb fc83 	bl	8000230 <__aeabi_uldivmod>
 800492a:	0002      	movs	r2, r0
 800492c:	000b      	movs	r3, r1
 800492e:	0013      	movs	r3, r2
 8004930:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004934:	23c0      	movs	r3, #192	; 0xc0
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	429a      	cmp	r2, r3
 800493a:	d309      	bcc.n	8004950 <UART_SetConfig+0x294>
 800493c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800493e:	2380      	movs	r3, #128	; 0x80
 8004940:	035b      	lsls	r3, r3, #13
 8004942:	429a      	cmp	r2, r3
 8004944:	d204      	bcs.n	8004950 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800494c:	60da      	str	r2, [r3, #12]
 800494e:	e0e8      	b.n	8004b22 <UART_SetConfig+0x466>
        }
        else
        {
          ret = HAL_ERROR;
 8004950:	231a      	movs	r3, #26
 8004952:	2218      	movs	r2, #24
 8004954:	189b      	adds	r3, r3, r2
 8004956:	19db      	adds	r3, r3, r7
 8004958:	2201      	movs	r2, #1
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	e0e1      	b.n	8004b22 <UART_SetConfig+0x466>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	69da      	ldr	r2, [r3, #28]
 8004962:	2380      	movs	r3, #128	; 0x80
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	429a      	cmp	r2, r3
 8004968:	d000      	beq.n	800496c <UART_SetConfig+0x2b0>
 800496a:	e083      	b.n	8004a74 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 800496c:	231b      	movs	r3, #27
 800496e:	2218      	movs	r2, #24
 8004970:	189b      	adds	r3, r3, r2
 8004972:	19db      	adds	r3, r3, r7
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b08      	cmp	r3, #8
 8004978:	d834      	bhi.n	80049e4 <UART_SetConfig+0x328>
 800497a:	009a      	lsls	r2, r3, #2
 800497c:	4b18      	ldr	r3, [pc, #96]	; (80049e0 <UART_SetConfig+0x324>)
 800497e:	18d3      	adds	r3, r2, r3
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004984:	f7fd fd06 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 8004988:	0003      	movs	r3, r0
 800498a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800498c:	e033      	b.n	80049f6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800498e:	f7fd fd17 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 8004992:	0003      	movs	r3, r0
 8004994:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004996:	e02e      	b.n	80049f6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004998:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <UART_SetConfig+0x318>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2210      	movs	r2, #16
 800499e:	4013      	ands	r3, r2
 80049a0:	d002      	beq.n	80049a8 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80049a2:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <UART_SetConfig+0x31c>)
 80049a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049a6:	e026      	b.n	80049f6 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80049a8:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <UART_SetConfig+0x320>)
 80049aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049ac:	e023      	b.n	80049f6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ae:	f7fd fc41 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80049b2:	0003      	movs	r3, r0
 80049b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049b6:	e01e      	b.n	80049f6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	021b      	lsls	r3, r3, #8
 80049bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049be:	e01a      	b.n	80049f6 <UART_SetConfig+0x33a>
 80049c0:	efff69f3 	.word	0xefff69f3
 80049c4:	ffffcfff 	.word	0xffffcfff
 80049c8:	40004800 	.word	0x40004800
 80049cc:	fffff4ff 	.word	0xfffff4ff
 80049d0:	40004400 	.word	0x40004400
 80049d4:	40021000 	.word	0x40021000
 80049d8:	003d0900 	.word	0x003d0900
 80049dc:	00f42400 	.word	0x00f42400
 80049e0:	08005178 	.word	0x08005178
      default:
        pclk = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80049e8:	231a      	movs	r3, #26
 80049ea:	2218      	movs	r2, #24
 80049ec:	189b      	adds	r3, r3, r2
 80049ee:	19db      	adds	r3, r3, r7
 80049f0:	2201      	movs	r2, #1
 80049f2:	701a      	strb	r2, [r3, #0]
        break;
 80049f4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d100      	bne.n	80049fe <UART_SetConfig+0x342>
 80049fc:	e091      	b.n	8004b22 <UART_SetConfig+0x466>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a00:	005a      	lsls	r2, r3, #1
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	18d2      	adds	r2, r2, r3
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	0019      	movs	r1, r3
 8004a10:	0010      	movs	r0, r2
 8004a12:	f7fb fb81 	bl	8000118 <__udivsi3>
 8004a16:	0003      	movs	r3, r0
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	2b0f      	cmp	r3, #15
 8004a20:	d921      	bls.n	8004a66 <UART_SetConfig+0x3aa>
 8004a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	025b      	lsls	r3, r3, #9
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d21c      	bcs.n	8004a66 <UART_SetConfig+0x3aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	200e      	movs	r0, #14
 8004a32:	2418      	movs	r4, #24
 8004a34:	1903      	adds	r3, r0, r4
 8004a36:	19db      	adds	r3, r3, r7
 8004a38:	210f      	movs	r1, #15
 8004a3a:	438a      	bics	r2, r1
 8004a3c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	085b      	lsrs	r3, r3, #1
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2207      	movs	r2, #7
 8004a46:	4013      	ands	r3, r2
 8004a48:	b299      	uxth	r1, r3
 8004a4a:	1903      	adds	r3, r0, r4
 8004a4c:	19db      	adds	r3, r3, r7
 8004a4e:	1902      	adds	r2, r0, r4
 8004a50:	19d2      	adds	r2, r2, r7
 8004a52:	8812      	ldrh	r2, [r2, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	1902      	adds	r2, r0, r4
 8004a5e:	19d2      	adds	r2, r2, r7
 8004a60:	8812      	ldrh	r2, [r2, #0]
 8004a62:	60da      	str	r2, [r3, #12]
 8004a64:	e05d      	b.n	8004b22 <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8004a66:	231a      	movs	r3, #26
 8004a68:	2218      	movs	r2, #24
 8004a6a:	189b      	adds	r3, r3, r2
 8004a6c:	19db      	adds	r3, r3, r7
 8004a6e:	2201      	movs	r2, #1
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	e056      	b.n	8004b22 <UART_SetConfig+0x466>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a74:	231b      	movs	r3, #27
 8004a76:	2218      	movs	r2, #24
 8004a78:	189b      	adds	r3, r3, r2
 8004a7a:	19db      	adds	r3, r3, r7
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d822      	bhi.n	8004ac8 <UART_SetConfig+0x40c>
 8004a82:	009a      	lsls	r2, r3, #2
 8004a84:	4b2e      	ldr	r3, [pc, #184]	; (8004b40 <UART_SetConfig+0x484>)
 8004a86:	18d3      	adds	r3, r2, r3
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a8c:	f7fd fc82 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 8004a90:	0003      	movs	r3, r0
 8004a92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a94:	e021      	b.n	8004ada <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a96:	f7fd fc93 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 8004a9a:	0003      	movs	r3, r0
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a9e:	e01c      	b.n	8004ada <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aa0:	4b28      	ldr	r3, [pc, #160]	; (8004b44 <UART_SetConfig+0x488>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2210      	movs	r2, #16
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d002      	beq.n	8004ab0 <UART_SetConfig+0x3f4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004aaa:	4b27      	ldr	r3, [pc, #156]	; (8004b48 <UART_SetConfig+0x48c>)
 8004aac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004aae:	e014      	b.n	8004ada <UART_SetConfig+0x41e>
          pclk = (uint32_t) HSI_VALUE;
 8004ab0:	4b26      	ldr	r3, [pc, #152]	; (8004b4c <UART_SetConfig+0x490>)
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ab4:	e011      	b.n	8004ada <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ab6:	f7fd fbbd 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 8004aba:	0003      	movs	r3, r0
 8004abc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004abe:	e00c      	b.n	8004ada <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ac0:	2380      	movs	r3, #128	; 0x80
 8004ac2:	021b      	lsls	r3, r3, #8
 8004ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ac6:	e008      	b.n	8004ada <UART_SetConfig+0x41e>
      default:
        pclk = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004acc:	231a      	movs	r3, #26
 8004ace:	2218      	movs	r2, #24
 8004ad0:	189b      	adds	r3, r3, r2
 8004ad2:	19db      	adds	r3, r3, r7
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	701a      	strb	r2, [r3, #0]
        break;
 8004ad8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d020      	beq.n	8004b22 <UART_SetConfig+0x466>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	085a      	lsrs	r2, r3, #1
 8004ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae8:	18d2      	adds	r2, r2, r3
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	0019      	movs	r1, r3
 8004af0:	0010      	movs	r0, r2
 8004af2:	f7fb fb11 	bl	8000118 <__udivsi3>
 8004af6:	0003      	movs	r3, r0
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	2b0f      	cmp	r3, #15
 8004b00:	d909      	bls.n	8004b16 <UART_SetConfig+0x45a>
 8004b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b04:	2380      	movs	r3, #128	; 0x80
 8004b06:	025b      	lsls	r3, r3, #9
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d204      	bcs.n	8004b16 <UART_SetConfig+0x45a>
      {
        huart->Instance->BRR = usartdiv;
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b12:	60da      	str	r2, [r3, #12]
 8004b14:	e005      	b.n	8004b22 <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8004b16:	231a      	movs	r3, #26
 8004b18:	2218      	movs	r2, #24
 8004b1a:	189b      	adds	r3, r3, r2
 8004b1c:	19db      	adds	r3, r3, r7
 8004b1e:	2201      	movs	r2, #1
 8004b20:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	2200      	movs	r2, #0
 8004b26:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b2e:	231a      	movs	r3, #26
 8004b30:	2218      	movs	r2, #24
 8004b32:	189b      	adds	r3, r3, r2
 8004b34:	19db      	adds	r3, r3, r7
 8004b36:	781b      	ldrb	r3, [r3, #0]
}
 8004b38:	0018      	movs	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b00e      	add	sp, #56	; 0x38
 8004b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8004b40:	0800519c 	.word	0x0800519c
 8004b44:	40021000 	.word	0x40021000
 8004b48:	003d0900 	.word	0x003d0900
 8004b4c:	00f42400 	.word	0x00f42400

08004b50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d00b      	beq.n	8004b7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	4a4a      	ldr	r2, [pc, #296]	; (8004c94 <UART_AdvFeatureConfig+0x144>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	0019      	movs	r1, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	2202      	movs	r2, #2
 8004b80:	4013      	ands	r3, r2
 8004b82:	d00b      	beq.n	8004b9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	4a43      	ldr	r2, [pc, #268]	; (8004c98 <UART_AdvFeatureConfig+0x148>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	0019      	movs	r1, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	d00b      	beq.n	8004bbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	4a3b      	ldr	r2, [pc, #236]	; (8004c9c <UART_AdvFeatureConfig+0x14c>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	0019      	movs	r1, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	2208      	movs	r2, #8
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d00b      	beq.n	8004be0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	4a34      	ldr	r2, [pc, #208]	; (8004ca0 <UART_AdvFeatureConfig+0x150>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	0019      	movs	r1, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	2210      	movs	r2, #16
 8004be6:	4013      	ands	r3, r2
 8004be8:	d00b      	beq.n	8004c02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	4a2c      	ldr	r2, [pc, #176]	; (8004ca4 <UART_AdvFeatureConfig+0x154>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	0019      	movs	r1, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	2220      	movs	r2, #32
 8004c08:	4013      	ands	r3, r2
 8004c0a:	d00b      	beq.n	8004c24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	4a25      	ldr	r2, [pc, #148]	; (8004ca8 <UART_AdvFeatureConfig+0x158>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	0019      	movs	r1, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	2240      	movs	r2, #64	; 0x40
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d01d      	beq.n	8004c6a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a1d      	ldr	r2, [pc, #116]	; (8004cac <UART_AdvFeatureConfig+0x15c>)
 8004c36:	4013      	ands	r3, r2
 8004c38:	0019      	movs	r1, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c4a:	2380      	movs	r3, #128	; 0x80
 8004c4c:	035b      	lsls	r3, r3, #13
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d10b      	bne.n	8004c6a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	4a15      	ldr	r2, [pc, #84]	; (8004cb0 <UART_AdvFeatureConfig+0x160>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	0019      	movs	r1, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	2280      	movs	r2, #128	; 0x80
 8004c70:	4013      	ands	r3, r2
 8004c72:	d00b      	beq.n	8004c8c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	4a0e      	ldr	r2, [pc, #56]	; (8004cb4 <UART_AdvFeatureConfig+0x164>)
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	0019      	movs	r1, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	605a      	str	r2, [r3, #4]
  }
}
 8004c8c:	46c0      	nop			; (mov r8, r8)
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b002      	add	sp, #8
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	fffdffff 	.word	0xfffdffff
 8004c98:	fffeffff 	.word	0xfffeffff
 8004c9c:	fffbffff 	.word	0xfffbffff
 8004ca0:	ffff7fff 	.word	0xffff7fff
 8004ca4:	ffffefff 	.word	0xffffefff
 8004ca8:	ffffdfff 	.word	0xffffdfff
 8004cac:	ffefffff 	.word	0xffefffff
 8004cb0:	ff9fffff 	.word	0xff9fffff
 8004cb4:	fff7ffff 	.word	0xfff7ffff

08004cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2280      	movs	r2, #128	; 0x80
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cc8:	f7fc fab0 	bl	800122c <HAL_GetTick>
 8004ccc:	0003      	movs	r3, r0
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2208      	movs	r2, #8
 8004cd8:	4013      	ands	r3, r2
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d10c      	bne.n	8004cf8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2280      	movs	r2, #128	; 0x80
 8004ce2:	0391      	lsls	r1, r2, #14
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	4a17      	ldr	r2, [pc, #92]	; (8004d44 <UART_CheckIdleState+0x8c>)
 8004ce8:	9200      	str	r2, [sp, #0]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f000 f82c 	bl	8004d48 <UART_WaitOnFlagUntilTimeout>
 8004cf0:	1e03      	subs	r3, r0, #0
 8004cf2:	d001      	beq.n	8004cf8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e021      	b.n	8004d3c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2204      	movs	r2, #4
 8004d00:	4013      	ands	r3, r2
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d10c      	bne.n	8004d20 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2280      	movs	r2, #128	; 0x80
 8004d0a:	03d1      	lsls	r1, r2, #15
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	4a0d      	ldr	r2, [pc, #52]	; (8004d44 <UART_CheckIdleState+0x8c>)
 8004d10:	9200      	str	r2, [sp, #0]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f000 f818 	bl	8004d48 <UART_WaitOnFlagUntilTimeout>
 8004d18:	1e03      	subs	r3, r0, #0
 8004d1a:	d001      	beq.n	8004d20 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e00d      	b.n	8004d3c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2274      	movs	r2, #116	; 0x74
 8004d36:	2100      	movs	r1, #0
 8004d38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b004      	add	sp, #16
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	01ffffff 	.word	0x01ffffff

08004d48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b094      	sub	sp, #80	; 0x50
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	1dfb      	adds	r3, r7, #7
 8004d56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d58:	e0a3      	b.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	d100      	bne.n	8004d62 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004d60:	e09f      	b.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d62:	f7fc fa63 	bl	800122c <HAL_GetTick>
 8004d66:	0002      	movs	r2, r0
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d302      	bcc.n	8004d78 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d13d      	bne.n	8004df4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d78:	f3ef 8310 	mrs	r3, PRIMASK
 8004d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d80:	647b      	str	r3, [r7, #68]	; 0x44
 8004d82:	2301      	movs	r3, #1
 8004d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d88:	f383 8810 	msr	PRIMASK, r3
}
 8004d8c:	46c0      	nop			; (mov r8, r8)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	494c      	ldr	r1, [pc, #304]	; (8004ecc <UART_WaitOnFlagUntilTimeout+0x184>)
 8004d9a:	400a      	ands	r2, r1
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	f383 8810 	msr	PRIMASK, r3
}
 8004da8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004daa:	f3ef 8310 	mrs	r3, PRIMASK
 8004dae:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db2:	643b      	str	r3, [r7, #64]	; 0x40
 8004db4:	2301      	movs	r3, #1
 8004db6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	f383 8810 	msr	PRIMASK, r3
}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2101      	movs	r1, #1
 8004dcc:	438a      	bics	r2, r1
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd6:	f383 8810 	msr	PRIMASK, r3
}
 8004dda:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2220      	movs	r2, #32
 8004de0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2220      	movs	r2, #32
 8004de6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2274      	movs	r2, #116	; 0x74
 8004dec:	2100      	movs	r1, #0
 8004dee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e067      	b.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	d050      	beq.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	69da      	ldr	r2, [r3, #28]
 8004e06:	2380      	movs	r3, #128	; 0x80
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	401a      	ands	r2, r3
 8004e0c:	2380      	movs	r3, #128	; 0x80
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d146      	bne.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2280      	movs	r2, #128	; 0x80
 8004e1a:	0112      	lsls	r2, r2, #4
 8004e1c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e22:	613b      	str	r3, [r7, #16]
  return(result);
 8004e24:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e28:	2301      	movs	r3, #1
 8004e2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f383 8810 	msr	PRIMASK, r3
}
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4923      	ldr	r1, [pc, #140]	; (8004ecc <UART_WaitOnFlagUntilTimeout+0x184>)
 8004e40:	400a      	ands	r2, r1
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e46:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	f383 8810 	msr	PRIMASK, r3
}
 8004e4e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e50:	f3ef 8310 	mrs	r3, PRIMASK
 8004e54:	61fb      	str	r3, [r7, #28]
  return(result);
 8004e56:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e58:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	f383 8810 	msr	PRIMASK, r3
}
 8004e64:	46c0      	nop			; (mov r8, r8)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2101      	movs	r1, #1
 8004e72:	438a      	bics	r2, r1
 8004e74:	609a      	str	r2, [r3, #8]
 8004e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	f383 8810 	msr	PRIMASK, r3
}
 8004e80:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2220      	movs	r2, #32
 8004e86:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2280      	movs	r2, #128	; 0x80
 8004e92:	2120      	movs	r1, #32
 8004e94:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2274      	movs	r2, #116	; 0x74
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e010      	b.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	425a      	negs	r2, r3
 8004eb2:	4153      	adcs	r3, r2
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	001a      	movs	r2, r3
 8004eb8:	1dfb      	adds	r3, r7, #7
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d100      	bne.n	8004ec2 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004ec0:	e74b      	b.n	8004d5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b014      	add	sp, #80	; 0x50
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	fffffe5f 	.word	0xfffffe5f

08004ed0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08e      	sub	sp, #56	; 0x38
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8004edc:	617b      	str	r3, [r7, #20]
  return(result);
 8004ede:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	f383 8810 	msr	PRIMASK, r3
}
 8004eec:	46c0      	nop			; (mov r8, r8)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4925      	ldr	r1, [pc, #148]	; (8004f90 <UART_EndRxTransfer+0xc0>)
 8004efa:	400a      	ands	r2, r1
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	f383 8810 	msr	PRIMASK, r3
}
 8004f08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f0e:	623b      	str	r3, [r7, #32]
  return(result);
 8004f10:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f12:	633b      	str	r3, [r7, #48]	; 0x30
 8004f14:	2301      	movs	r3, #1
 8004f16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	f383 8810 	msr	PRIMASK, r3
}
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	438a      	bics	r2, r1
 8004f2e:	609a      	str	r2, [r3, #8]
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f36:	f383 8810 	msr	PRIMASK, r3
}
 8004f3a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d118      	bne.n	8004f76 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f44:	f3ef 8310 	mrs	r3, PRIMASK
 8004f48:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f4a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f4e:	2301      	movs	r3, #1
 8004f50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f383 8810 	msr	PRIMASK, r3
}
 8004f58:	46c0      	nop			; (mov r8, r8)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2110      	movs	r1, #16
 8004f66:	438a      	bics	r2, r1
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f383 8810 	msr	PRIMASK, r3
}
 8004f74:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004f88:	46c0      	nop			; (mov r8, r8)
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b00e      	add	sp, #56	; 0x38
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	fffffedf 	.word	0xfffffedf

08004f94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	225a      	movs	r2, #90	; 0x5a
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2252      	movs	r2, #82	; 0x52
 8004fae:	2100      	movs	r1, #0
 8004fb0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f7ff fb6d 	bl	8004694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b004      	add	sp, #16
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b086      	sub	sp, #24
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fca:	f3ef 8310 	mrs	r3, PRIMASK
 8004fce:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f383 8810 	msr	PRIMASK, r3
}
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2140      	movs	r1, #64	; 0x40
 8004fec:	438a      	bics	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f383 8810 	msr	PRIMASK, r3
}
 8004ffa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	0018      	movs	r0, r3
 800500c:	f7ff fb3a 	bl	8004684 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005010:	46c0      	nop			; (mov r8, r8)
 8005012:	46bd      	mov	sp, r7
 8005014:	b006      	add	sp, #24
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005020:	46c0      	nop			; (mov r8, r8)
 8005022:	46bd      	mov	sp, r7
 8005024:	b002      	add	sp, #8
 8005026:	bd80      	pop	{r7, pc}

08005028 <__libc_init_array>:
 8005028:	b570      	push	{r4, r5, r6, lr}
 800502a:	2600      	movs	r6, #0
 800502c:	4d0c      	ldr	r5, [pc, #48]	; (8005060 <__libc_init_array+0x38>)
 800502e:	4c0d      	ldr	r4, [pc, #52]	; (8005064 <__libc_init_array+0x3c>)
 8005030:	1b64      	subs	r4, r4, r5
 8005032:	10a4      	asrs	r4, r4, #2
 8005034:	42a6      	cmp	r6, r4
 8005036:	d109      	bne.n	800504c <__libc_init_array+0x24>
 8005038:	2600      	movs	r6, #0
 800503a:	f000 f87d 	bl	8005138 <_init>
 800503e:	4d0a      	ldr	r5, [pc, #40]	; (8005068 <__libc_init_array+0x40>)
 8005040:	4c0a      	ldr	r4, [pc, #40]	; (800506c <__libc_init_array+0x44>)
 8005042:	1b64      	subs	r4, r4, r5
 8005044:	10a4      	asrs	r4, r4, #2
 8005046:	42a6      	cmp	r6, r4
 8005048:	d105      	bne.n	8005056 <__libc_init_array+0x2e>
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	00b3      	lsls	r3, r6, #2
 800504e:	58eb      	ldr	r3, [r5, r3]
 8005050:	4798      	blx	r3
 8005052:	3601      	adds	r6, #1
 8005054:	e7ee      	b.n	8005034 <__libc_init_array+0xc>
 8005056:	00b3      	lsls	r3, r6, #2
 8005058:	58eb      	ldr	r3, [r5, r3]
 800505a:	4798      	blx	r3
 800505c:	3601      	adds	r6, #1
 800505e:	e7f2      	b.n	8005046 <__libc_init_array+0x1e>
 8005060:	080051f0 	.word	0x080051f0
 8005064:	080051f0 	.word	0x080051f0
 8005068:	080051f0 	.word	0x080051f0
 800506c:	080051f4 	.word	0x080051f4

08005070 <__itoa>:
 8005070:	1e93      	subs	r3, r2, #2
 8005072:	b510      	push	{r4, lr}
 8005074:	000c      	movs	r4, r1
 8005076:	2b22      	cmp	r3, #34	; 0x22
 8005078:	d904      	bls.n	8005084 <__itoa+0x14>
 800507a:	2300      	movs	r3, #0
 800507c:	001c      	movs	r4, r3
 800507e:	700b      	strb	r3, [r1, #0]
 8005080:	0020      	movs	r0, r4
 8005082:	bd10      	pop	{r4, pc}
 8005084:	2a0a      	cmp	r2, #10
 8005086:	d109      	bne.n	800509c <__itoa+0x2c>
 8005088:	2800      	cmp	r0, #0
 800508a:	da07      	bge.n	800509c <__itoa+0x2c>
 800508c:	232d      	movs	r3, #45	; 0x2d
 800508e:	700b      	strb	r3, [r1, #0]
 8005090:	2101      	movs	r1, #1
 8005092:	4240      	negs	r0, r0
 8005094:	1861      	adds	r1, r4, r1
 8005096:	f000 f80f 	bl	80050b8 <__utoa>
 800509a:	e7f1      	b.n	8005080 <__itoa+0x10>
 800509c:	2100      	movs	r1, #0
 800509e:	e7f9      	b.n	8005094 <__itoa+0x24>

080050a0 <itoa>:
 80050a0:	b510      	push	{r4, lr}
 80050a2:	f7ff ffe5 	bl	8005070 <__itoa>
 80050a6:	bd10      	pop	{r4, pc}

080050a8 <memset>:
 80050a8:	0003      	movs	r3, r0
 80050aa:	1882      	adds	r2, r0, r2
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d100      	bne.n	80050b2 <memset+0xa>
 80050b0:	4770      	bx	lr
 80050b2:	7019      	strb	r1, [r3, #0]
 80050b4:	3301      	adds	r3, #1
 80050b6:	e7f9      	b.n	80050ac <memset+0x4>

080050b8 <__utoa>:
 80050b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ba:	000c      	movs	r4, r1
 80050bc:	0016      	movs	r6, r2
 80050be:	b08d      	sub	sp, #52	; 0x34
 80050c0:	2225      	movs	r2, #37	; 0x25
 80050c2:	0007      	movs	r7, r0
 80050c4:	4916      	ldr	r1, [pc, #88]	; (8005120 <__utoa+0x68>)
 80050c6:	a802      	add	r0, sp, #8
 80050c8:	f000 f82c 	bl	8005124 <memcpy>
 80050cc:	1e62      	subs	r2, r4, #1
 80050ce:	9200      	str	r2, [sp, #0]
 80050d0:	1eb3      	subs	r3, r6, #2
 80050d2:	aa02      	add	r2, sp, #8
 80050d4:	2500      	movs	r5, #0
 80050d6:	9201      	str	r2, [sp, #4]
 80050d8:	2b22      	cmp	r3, #34	; 0x22
 80050da:	d904      	bls.n	80050e6 <__utoa+0x2e>
 80050dc:	7025      	strb	r5, [r4, #0]
 80050de:	002c      	movs	r4, r5
 80050e0:	0020      	movs	r0, r4
 80050e2:	b00d      	add	sp, #52	; 0x34
 80050e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050e6:	0038      	movs	r0, r7
 80050e8:	0031      	movs	r1, r6
 80050ea:	f7fb f89b 	bl	8000224 <__aeabi_uidivmod>
 80050ee:	000b      	movs	r3, r1
 80050f0:	9a01      	ldr	r2, [sp, #4]
 80050f2:	0029      	movs	r1, r5
 80050f4:	5cd3      	ldrb	r3, [r2, r3]
 80050f6:	9a00      	ldr	r2, [sp, #0]
 80050f8:	3501      	adds	r5, #1
 80050fa:	5553      	strb	r3, [r2, r5]
 80050fc:	003b      	movs	r3, r7
 80050fe:	0007      	movs	r7, r0
 8005100:	429e      	cmp	r6, r3
 8005102:	d9f0      	bls.n	80050e6 <__utoa+0x2e>
 8005104:	2300      	movs	r3, #0
 8005106:	0022      	movs	r2, r4
 8005108:	5563      	strb	r3, [r4, r5]
 800510a:	000b      	movs	r3, r1
 800510c:	1ac8      	subs	r0, r1, r3
 800510e:	4283      	cmp	r3, r0
 8005110:	dde6      	ble.n	80050e0 <__utoa+0x28>
 8005112:	7810      	ldrb	r0, [r2, #0]
 8005114:	5ce5      	ldrb	r5, [r4, r3]
 8005116:	7015      	strb	r5, [r2, #0]
 8005118:	54e0      	strb	r0, [r4, r3]
 800511a:	3201      	adds	r2, #1
 800511c:	3b01      	subs	r3, #1
 800511e:	e7f5      	b.n	800510c <__utoa+0x54>
 8005120:	080051c0 	.word	0x080051c0

08005124 <memcpy>:
 8005124:	2300      	movs	r3, #0
 8005126:	b510      	push	{r4, lr}
 8005128:	429a      	cmp	r2, r3
 800512a:	d100      	bne.n	800512e <memcpy+0xa>
 800512c:	bd10      	pop	{r4, pc}
 800512e:	5ccc      	ldrb	r4, [r1, r3]
 8005130:	54c4      	strb	r4, [r0, r3]
 8005132:	3301      	adds	r3, #1
 8005134:	e7f8      	b.n	8005128 <memcpy+0x4>
	...

08005138 <_init>:
 8005138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513e:	bc08      	pop	{r3}
 8005140:	469e      	mov	lr, r3
 8005142:	4770      	bx	lr

08005144 <_fini>:
 8005144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514a:	bc08      	pop	{r3}
 800514c:	469e      	mov	lr, r3
 800514e:	4770      	bx	lr
